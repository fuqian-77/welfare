//去掉jsp可视化编辑器  windows+preferences+file association+jsp+选择没有visual的editor+default+ok
//去掉“点”完提示。windows下面那个preferences下面Myeclipse下面Javascript下面editor下面content assist下面的auto-activation的enable auto activation 的勾去掉，然后apply就可以了
//pdf编辑插件jspdf website //http://rawgit.com/MrRio/jsPDF/master/docs/global.html#output
//document.getElementById("iframe123").src = doc.output('datauristring');//在iframe中显示 
//A:visited { COLOR: #000000; TEXT-DECORATION: none}
//A:hover { COLOR: #ff7f24; text-decoration: underline;}
//A:active { COLOR: #ff7f24; text-decoration: underline;}
//tomcat server.xml <host>中添加：		<Context path="/mybase" docBase="d:\imlab\mybase" debug="0" reloadable="true"></Context>
//Project->Properties->javabuildpath+Libraries下，可以Add一个Jar到这个Project里。
//修改部署的文件路径，修改工种目录中的.project文件中的<name>项
//2. 在“type filter text“的框框里输入”ContentTypes;
//3. 点击右边的Text，选择Java Properties File，看一下下面的两个选项  
//Project->Properties->javabuildpath+Libraries下，可以Add一个Jar到这个Project里。
//修改部署的文件路径，修改工种目录中的.project文件中的<name>项
//windows+preferences+general -> appearance -> colors and fonts 右边展开basic -> text font
//$('#wineditpanel').panel('options').fit=false;
//$('#wineditpanel').panel('options',{fit: false});
//$('#wineditpanel').panel({height:600});

//alter table homework,resources,answers add attachmentflag as case when filesourcename='' then '' else 'attachment24.png' end
//alter table homework,resources,answers add AttachmentFileType nvarchar(100)	
//alter table homework add userid varchar(12)
//alter table homework add reviewpassword varchar(255)
//alter table resources add attachmenttag as 'resources'+cast(resourcerowid as varchar(12))
//alter table homework add attachmenttag as 'homework'+cast(homeworkrowid as varchar(12))
//alter table answers add attachmenttag as 'answers'+cast(answerrowid as varchar(12))
//alter table attachments add attachmenttag varchar(50)
//update attachments set attachmenttag=FileType+cast(fileid as varchar(12))

//首先要确定JDK安装路径：d:\java\jdk1.7
//然后将jacob.dll或者jacob1.17-x86.dll放到d:\java\jdk1.7\jre\bin下面，注意文件名不要修改
//jacob.jar放到d:\java\jdk1.7\jre\lib\ext下面，JVM默认调用这个jar来处理
//OK，注意位置要放正确，否则不会执行成功，java项目里的buidpath下的可有可无。

//pxmlfile='xml//resource.xml';
//pxmlfile='xml//resourcecategory.xml';
//pxmlfile='xml//km.xml';
rowHeight=32;
colWidth=8;
sysdateformat='Y-n-j';  //日期控件的日期格式，不足0
sysfulldateformat='Y-m-d';  //日期控件的日期格式,补足0  
syslabel={};
systext={};
sysbutton={};
syslabel.fontname='宋体'; //label显示的字体
syslabel.topmargin=4;  //label与输入框的高度差
syslabel.align='left';  //label与text之间字体对齐
syslabel.fontsize=13;  //label字体大小
syslabel.fontbold=false;  //label字体是否加黑 
syslabel.rowspace='135%'; //字的行间距，用于数据查询query 
systext.fontname='Times New roman'; //输入框的字体
systext.height=24;  //输入框的默认高度
systext.rowheight=36;  //表单控件间的行距
sysbutton.height=24;
sysbutton.width=65;
sys={};
sys.browser=myCheckBrowser();  //游览器类别
if (sys.browser=='firefox' ) sys.dateformat='Y-m-d';  //补足0
else if (sys.browser=='ie')  sys.dateformat='Y/m/d';
sys.windowcon='movie.png';
//sys.theme={theme: "web"};  //样式
sys.theme={ theme: "default" };
sys.panelcolor="background-color: #E0ECFF;";
sys.fusionchartno=1;
sys.tab=String.fromCharCode(9);  //tab键
sys.ftab='['+String.fromCharCode(9)+']';  //tab键分隔各字段名称
sys.vtab='['+String.fromCharCode(9)+']';  //tab键分隔各字段值
sys.sqltab='@'+String.fromCharCode(9)+'@';  //sql语句之间tab键分隔
sys.gridcellpix=6;  //表格中每个字符的像素值
sys.treemenuwidth=190;
sys.urlpath="";  //工程路径
sys.project="";  //工程名称
sys.today=myLocalTime().date;
sys.app='';
url=window.location.pathname; //hostname; //href;
arrUrl=url.split("/");
if (arrUrl.length>1) sys.project=arrUrl[1];
sys.userid="";
sys.useraccount="admin",
sys.username="admin";
sys.userright='';
sys.usertype='';
sys.userpassword='';
sys.userlogindate='';
sys.action='';
sys.notes='';
sys.flag='';
sys.emailsender='melabcenter@163.com';
sys.emailpassword='melabcenter0554';
sys.period={};   //系统变量
sys.sql={};  //系统变量,存放sql查询语句
//
sys.realpath='';
sys.path=url;
sys.urlright='';  //用户进入的程序链接名称，用于权限设置
sys.menuurl='';  //用户进入的程序链接名称，用于权限设置
sys.buttonright='';  //按钮权限
sys.screenwidth=window.screen.width;
sys.screenheight=window.screen.height;
sys.windowheight=sysGetWinSize().h;
sys.windowwidth=sysGetWinSize().w;
sys.menubutton=['addflag','updateflag','deleteflag','reviewflag','uploadflag','downloadflag','printflag'];
sys.chnnumber=['一','二','三','四','五','六','七','八','九','十'];
sys.keyeventcmp=';text;combo;combobox;numberbox;datebox;textbox;password;';
sys.maxfilenumber=100;
sys.previewtype=';pdf;jpg;jpeg;png;gif;bmp;tif;tiff;doc;docx;ppt;pptx;swf;mp3;wav;';
results=myRunSelectCases('xcode','');
sysxcode={};
for (var i=0;i<results.length;i++){
	str="sysxcode."+results[i].str+"="+results[i].xcode+";";
	str+="\n sysxcode.xcode_"+results[i].xcode+"='"+results[i].str+"';";
	eval(str);
}
syspy={};
syspy.n=0;
syspy.firstchr = "";
syspy.multichr={"19969":"DZ","19975":"WM","19988":"QJ","20048":"YL","20056":"SC","20060":"NM","20094":"QG","20127":"QJ","20167":"QC","20193":"YG","20250":"KH","20256":"ZC","20282":"SC","20285":"QJG","20291":"TD","20314":"YD","20340":"NE","20375":"TD","20389":"YJ","20391":"CZ","20415":"PB","20446":"YS","20447":"SQ","20504":"TC","20608":"KG","20854":"QJ","20857":"ZC","20911":"PF","20504":"TC","20608":"KG","20854":"QJ","20857":"ZC","20911":"PF","20985":"AW","21032":"PB","21048":"XQ","21049":"SC","21089":"YS","21119":"JC","21242":"SB","21273":"SC","21305":"YP","21306":"QO","21330":"ZC","21333":"SDC","21345":"QK","21378":"CA","21397":"SC","21414":"XS","21442":"SC","21477":"JG","21480":"TD","21484":"ZS","21494":"YX","21505":"YX","21512":"HG","21523":"XH","21537":"PB","21542":"PF","21549":"KH","21571":"E","21574":"DA","21588":"TD","21589":"O","21618":"ZC","21621":"KHA","21632":"ZJ","21654":"KG","21679":"LKG","21683":"KH","21710":"A","21719":"YH","21734":"WOE","21769":"A","21780":"WN","21804":"XH","21834":"A","21899":"ZD","21903":"RN","21908":"WO","21939":"ZC","21956":"SA","21964":"YA","21970":"TD","22003":"A","22031":"JG","22040":"XS","22060":"ZC","22066":"ZC","22079":"MH","22129":"XJ","22179":"XA","22237":"NJ","22244":"TD","22280":"JQ","22300":"YH","22313":"XW","22331":"YQ","22343":"YJ","22351":"PH","22395":"DC","22412":"TD","22484":"PB","22500":"PB","22534":"ZD","22549":"DH","22561":"PB","22612":"TD","22771":"KQ","22831":"HB","22841":"JG","22855":"QJ","22865":"XQ","23013":"ML","23081":"WM","23487":"SX","23558":"QJ","23561":"YW","23586":"YW","23614":"YW","23615":"SN","23631":"PB","23646":"ZS","23663":"ZT","23673":"YG","23762":"TD","23769":"ZS","23780":"QJ","23884":"QK","24055":"XH","24113":"DC","24162":"ZC","24191":"GA","24273":"QJ","24324":"NL","24377":"TD","24378":"QJ","24439":"PF","24554":"ZS","24683":"TD","24694":"WE","24733":"LK","24925":"TN","25094":"ZG","25100":"XQ","25103":"XH","25153":"PB","25170":"PB","25179":"KG","25203":"PB","25240":"ZS","25282":"FB","25303":"NA","25324":"KG","25341":"ZY","25373":"WZ","25375":"XJ","25384":"A","25457":"A","25528":"SD","25530":"SC","25552":"TD","25774":"ZC","25874":"ZC","26044":"YW","26080":"WM","26292":"PB","26333":"PB","26355":"ZY","26366":"CZ","26397":"ZC","26399":"QJ","26415":"ZS","26451":"SB","26526":"ZC","26552":"JG","26561":"TD","26588":"JG","26597":"CZ","26629":"ZS","26638":"YL","26646":"XQ","26653":"KG","26657":"XJ","26727":"HG","26894":"ZC","26937":"ZS","26946":"ZC","26999":"KJ","27099":"KJ","27449":"YQ","27481":"XS","27542":"ZS","27663":"ZS","27748":"TS","27784":"SC","27788":"ZD","27795":"TD","27812":"O","27850":"PB","27852":"MB","27895":"SL","27898":"PL","27973":"QJ","27981":"KH","27986":"HX","27994":"XJ","28044":"YC","28065":"WG","28177":"SM","28267":"QJ","28291":"KH","28337":"ZQ","28463":"TL","28548":"DC","28601":"TD","28689":"PB","28805":"JG","28820":"QG","28846":"PB","28952":"TD","28975":"ZC","29100":"A","29325":"QJ","29575":"SL","29602":"FB","30010":"TD","30044":"CX","30058":"PF","30091":"YSP","30111":"YN","30229":"XJ","30427":"SC","30465":"SX","30631":"YQ","30655":"QJ","30684":"QJG","30707":"SD","30729":"XH","30796":"LG","30917":"PB","31074":"NM","31085":"JZ","31109":"SC","31181":"ZC","31192":"MLB","31293":"JQ","31400":"YX","31584":"YJ","31896":"ZN","31909":"ZY","31995":"XJ","32321":"PF","32327":"ZY","32418":"HG","32420":"XQ","32421":"HG","32438":"LG","32473":"GJ","32488":"TD","32521":"QJ","32527":"PB","32562":"ZSQ","32564":"JZ","32735":"ZD","32793":"PB","33071":"PF","33098":"XL","33100":"YA","33152":"PB","33261":"CX","33324":"BP","33333":"TD","33406":"YA","33426":"WM","33432":"PB","33445":"JG","33486":"ZN","33493":"TS","33507":"QJ","33540":"QJ","33544":"ZC","33564":"XQ","33617":"YT","33632":"QJ","33636":"XH","33637":"YX","33694":"WG","33705":"PF","33728":"YW","33882":"SR","34067":"WM","34074":"YW","34121":"QJ","34255":"ZC","34259":"XL","34425":"JH","34430":"XH","34485":"KH","34503":"YS","34532":"HG","34552":"XS","34558":"YE","34593":"ZL","34660":"YQ","34892":"XH","34928":"SC","34999":"QJ","35048":"PB","35059":"SC","35098":"ZC","35203":"TQ","35265":"JX","35299":"JX","35782":"SZ","35828":"YS","35830":"E","35843":"TD","35895":"YG","35977":"MH","36158":"JG","36228":"QJ","36426":"XQ","36466":"DC","36710":"JC","36711":"ZYG","36767":"PB","36866":"SK","36951":"YW","37034":"YX","37063":"XH","37218":"ZC","37325":"ZC","38063":"PB","38079":"TD","38085":"QY","38107":"DC","38116":"TD","38123":"YD","38224":"HG","38241":"XTC","38271":"ZC","38415":"YE","38426":"KH","38461":"YD","38463":"AE","38466":"PB","38477":"XJ","38518":"YT","38551":"WK","38585":"ZC","38704":"XS","38739":"LJ","38761":"GJ","38808":"SQ","39048":"JG","39049":"XJ","39052":"HG","39076":"CZ","39271":"XT","39534":"TD","39552":"TD","39584":"PB","39647":"SB","39730":"LG","39748":"TPB","40109":"ZQ","40479":"ND","40516":"HG","40536":"HG","40583":"QJ","40765":"YQ","40784":"QJ","40840":"YK","40863":"QJG"};
//控件
sys.cmp = [
		'textfield','combo','combofield','label','labelfield',
		'readonlyfield','displayfield','linkfield',
		'textpicker','gridpicker','treepicker','editbutton',
		'checkbox','memofield','memo',
		'sysuser','sysdate','sysusername','sysnumber',
		'fileupload','filedownload','filefield','imageupload',
		'datefield','password',
		'numberfield','decimalfield','rmb','rmbfield','totalfields','summaryfields',
		'spinfield',
		'report','footer',
		'groupbox','tab','form'
	];
//属性
sys.xattrs=['title','text','label','length','value','blanktext','minvalue','maxvalue','filename','datafields','nodefields','filterfields','sortfield','style','rmb','sumfields','avgfields','countfields','maxfields','minfields','summarycolumn',
'keyfield','lockedfields','decimal','sql','items','valuefields','labelwidth','masterfield','url','font','rule','rowheight','checkbox','modal','align','table',
'documentdate','reviewfields','format','titlerows','titlefont'];

//可编辑列数据类型
sys.editableColumnfields="/textfield/datefield/decimalfield/numberfield/combo/combofield/editbutton/";  
//上传后附件的存放路径
syspath={};
syspath.master="mybase//";
syspath.teachers="mybase//photos//teachers//";
syspath.students="mybase//photos//students//";
syspath.labs="mybase//labs//";
syspath.contacts="mybase//contacts//";  //存放联系人附件
syspath.employees="mybase//employees//";  //存放员工附件
syspath.products="mybase//products//";   //存放产品附件
syspath.activities="mybase//activities//";   //存放活动附件
syspath.services="mybase//services//";   //存放服务附件
syspath.customers="mybase//customers//";   //存放客户附件
syspath.collections="mybase//collections//";  //存放回笼单附件
syspath.orders="mybase//orders//";  //存放订单附件
syspath.faqs="mybase//faqs//";    //存放faq附件
syspath.troubles="mybase//troubles//";    //存放故障附件
syspath.invoices="mybase//invoices//";   //存放发票附件
syspath.resources="mybase//resources//";   //存放资源附件
syspath.homework="mybase//homework//";   //存放资源附件
sysfilenotfound="system//images//filenotfound.png";  
prowppx=26;
pcolppx=7;   
pgridrowheight=21;
pwinheight=600;
pwinwidth=800;
pitemsPerPage=20;  //grid中每页显示的记录数量
maxReturnNumber=20;  //一次从后台返回记录的数量，超过该值树中节点将分层获取。
//以下为函数
function myReadUserBean(){
	
}

function sh(s){
	console.log(s);
}

function myToXcode(s){
	ss='';
	if (s!='' && s!=undefined){
		for (i=0;i<s.length;i++){
			s1=s.substr(i,1);
			x=s1.charCodeAt();
			//if (i>500) delta=1000+1;
			//else 
			delta=2*i+1;
			if ((s1>='a' && s1<='z')||(s1>='A' && s1<='Z')){
				y=eval('sysxcode.'+s1)+delta;
				ss+=''+(y+200000);
			}else{ 
				ss+=''+(100000+x+delta);
			}
		}
	}
	return ss;
}

function myFromXcode(s){  //加密起见，最后要删除这个函数
	var result='';
	if (s!='' && s!=undefined){
		var s1='';
		var s2='';
		var k=0;
		var i=0;
		while (i<s.length){
			//if (k>500) delta=1000+1;
			//else 
			delta=2*k+1;
			s1=s.substr(i,6);
			s2="";
			x=parseInt(s1);
			if (x>200000){  //字母
				y=x-200000-delta;
				eval('s2=sysxcode.xcode_'+y+';');
				result+=s2;
			}else{
				y=x-100000-delta;  //汉字非字母
				s2= String.fromCharCode(y);
				result+=s2;
			}
			i+=6;
			k++;
		}			
	}
	return result;
}

function myGetPyCode(str) {  //汉字全部
    var result = "";
    if (syspy.n==0){
	    var results=myRunSelectCases('pycode','');
		for (var i=0;i<results.length;i++){
			var s=results[i].str;
			eval(s);
		}
		syspy.n=results.length;
	}
	if (str!='' && str!=undefined){
	    for (var i = 0; i < str.length; i++) {
	    	var s=str.charAt(i).toString();
	    	var unicode = s.charCodeAt();  
	    	var py='';
			if (s != "" ) {
				if (unicode>=19968 && unicode<=40869){
					py=eval("syspy.x"+unicode);
		        }else py=s;
				result += py; //.substr(0,1);  //getPY(str.charAt(i).toString())
			}	
	    }
    }
    return result;
}

function myGetMemoCode(str) {  //汉字首字母
    var result = "";
	if (str!='' && str!=undefined){
	    for (var i = 0; i < str.length; i++) {
	    	var s=str.charAt(i).toString();
	    	var unicode = s.charCodeAt();  
	    	var py='';
			if (s != "" ) {
				if (unicode>=19968 && unicode<=40869){
					py=syspy.firstchr.charAt(unicode-19968);
		        }else{
		        	py=s;
		        }
				result += py; //.substr(0,1);  //getPY(str.charAt(i).toString())
			}	
	    }
    }
    return result.toLowerCase();
}

function myGetPeriod(date1){
	var s=null;
	results=myRunSelectCases('period', date1);  //获取学期信息
	if (results.length>0){
		s=results[0];
	}
	
	return s;	
}

function myGetWidthOfText(str, fontname, fontsize){
	var canvas = document.createElement('canvas');
	var ctx = canvas.getContext("2d");
	ctx.font = fontsize+"px "+fontname;        
	return(ctx.measureText(str).width);
}

function myGetBrowserScrollSize(){
    var css = {
        "border":  "none",
        "height":  "200px",
        "margin":  "0",
        "padding": "0",
        "width":   "200px"
    };
    var inner = $("<div>").css($.extend({}, css));
    var outer = $("<div>").css($.extend({
        "left":       "-1000px",
        "overflow":   "scroll",
        "position":   "absolute",
        "top":        "-1000px"
    }, css)).append(inner).appendTo("body")
    .scrollLeft(1000)
    .scrollTop(1000);
    var scrollSize = {
        "height": (outer.offset().top - inner.offset().top) || 0,
        "width": (outer.offset().left - inner.offset().left) || 0
    };
    outer.remove();
    return scrollSize;
}

function myCheckBrowser(){
	//返回当前正在使用的游览器的类型
	var type=navigator.userAgent.toLowerCase();
	var browser=navigator.userAgent;
	if (type.indexOf('msie')>=0 && type.indexOf('opera')<0) {
		browser='ie';
	}else if (type.indexOf('firefox')>=0) {
		browser='firefox';
	}else if (type.indexOf('opera')>=0) {
		browser='opera';
	}else if (type.indexOf('chrome')>=0) {
		browser='chrome';
	}else if (type.indexOf('safari')>=0) {
		browser='safari';
	}
	return (browser);	 	
}

function sysGetWinSize(){
	//获取窗口高度和宽度。
	var p={};
	p.w=0; p.h=0;
	if (window.innerHeight)
		p.h = window.innerHeight;
	else if ((document.body) && (document.body.clientHeight))
		p.h = document.body.clientHeight;
	//通过深入Document内部对body进行检测，获取窗口大小
	if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth){
		p.h = document.documentElement.clientHeight;
	}
	//winHeight=window.screen.height;
	//球宽度
	if (window.innerWidth)//Internet Explorer,Chrome,Firefox,Opera,Safari;
		p.w = window.innerWidth;
	else if ((document.body) && (document.body.clientWidth))//Internet Explorer 8,7,6,5
		p.w = document.body.clientWidth;
	//通过深入Document内部对body进行检测，获取窗口大小
	if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth){
		p.w = document.documentElement.clientWidth;
	}
	return(p);
}

function myBanBackSpace(e){
	var ev = e || window.event;
	var obj = ev.target || ev.srcElement;
	var t = obj.type || obj.getAttribute('type');
	var vReadOnly = obj.readOnly;
	var vDisabled = obj.disabled;
	vReadOnly = (vReadOnly == undefined) ? false : vReadOnly;
	vDisabled = (vDisabled == undefined) ? true : vDisabled;
	var flag1= ev.keyCode == 8 && (t=='password' || t=='text' || t=='textarea')&& (vReadOnly==true || vDisabled==true);
	var flag2= ev.keyCode == 8 && t != 'password' && t != 'text' && t != 'textarea' ;
	var flag3= (ev.keyCode == 33 || ev.keyCode == 34) && t== 'textarea' && sys.browser=='chrome' ;
	if (t=='keditor'){
		console.log(999);
		var flag4= (ev.keyCode == 8 ) && (vReadOnly==true || vDisabled==true);
		if (!flag4) flag4= (ev.keyCode == 33 || ev.keyCode == 34) && (sys.browser=='chrome') ;
		if (!flag4) flag4= (ev.keyCode == 86 && ev.ctrlKey);
	}
	if(flag2 || flag1 || flag3|| flag4 ) return false;
	//if(flag2 || flag1 || flag3|| flag4 || flag5 || flag6) return false;
}

function trim(str){
	if (str!=undefined) return str.replace(/(^\s*)|(\s*$)/g,'');
	else return '';
}


String.prototype.replaceAll = function (str1,str2){
	var str = this;
	if (str==undefined) str=''; 
	var result = str.replace(eval("/"+str1+"/gi"),str2);
	return result;
}

String.prototype.replaceAllString = function (str1,str2){
	var str = this;
	if (str==undefined) str=''; 
	var result = str.replace(str1,str2);
	while (result.indexOf(str1)>=0){
		var result = str.replace(str1,str2);		
	} 
	return result;
}

function replace92(str,str1){ //替换斜杠为其他字符
	var result=''
	if (str==undefined) str=''; 
	for (var i=0;i<str.length;i++){
		if (str.substr(i,1)=="\\") result+=str1;
		else result+=str.substr(i,1);
	}
	return result;
}

function myReplace(str,str1,str2){ //替换斜杠为其他字符
	var result=''
	if (str==undefined) str='';
	if (str1=="\\"){
		for (var i=0;i<str.length;i++){
			if (str.substr(i,1)=="\\") result+=str2;
			else result+=str.substr(i,1);
		}
	}else if (str1=="'"){
		for (var i=0;i<str.length;i++){
			if (str.substr(i,1)=="'"){
				result+="\\'";
			}	
			else result+=str.substr(i,1);
		}
	}
	return result;
}

function myIndexOfJson(json, field, str){
	//在json数据中找到某个字段的某个值是否存在，不存在，返回-1
	var index=-1;
	for (var i=0; i<json.length; i++){
		if (json[i][field]==str){
			index=i; break;
		}
	}
	return index;
}

function myToSqlValue(value){
	if (value==undefined) value='';
	else value=value+'';
	//value=value.replace(/\r/g,"&nbsp;")
	if (value!=''){
		//console.log(value);
		value=value.replace(/\n/g,"<br>") 
		value=value.replaceAll("'","''"); //处理单引号
		value=value.replaceAll("	"," "); //删除tab键
		value=value.replaceAll('"','\\\"'); //处理双引号
	}
	return value;
}

function mySpace(n){
	var str='';
	for (var i=1; i<=n; i++) str+='&nbsp;';
	return str;
}

function myToUnicode(str){  //汉字转换成unicode，英文字母也是4位数字
	var result='';
	if (str!=''){
		for(var i=0;i<str.length;i++){
			var chr=parseInt(str[i].charCodeAt(0),10).toString(16);
			//if (chr.length<4) chr+='%%%%';
			result+=chr.substr(0,4);
		}
	}
	//return escape(str).toLocaleLowerCase().replace(/%u/gi, '#u');     
	return result;
}

function xmyToChn(str){  //unicode转换为汉字和英文字母
	var result='';
	if (str!=''){
		for (var i=0;i<str.length;i++){
			var chr=str.substr(i*4,4);
			chr=chr.replace('%','');
			result+=String.fromCharCode(parseInt(chr,16).toString(10));
		}
	} 
	return result;
 	//return unescape(str.replace(/\#u/gi, '%u'));  	
}

function myDirectory(action,path){
	$.ajax({     
		type: "Post",     
		url: "system/easyui_doDirectory.jsp",     
		data: {action: action, directory:path}, 
		async: false, method: 'post',    
		success: function(data) {     
			
		}     
	});
}
		
//按格式取服务器系统当前日期时间
function myServerTime(f){
	var s={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_servertime.jsp",     
		data: {}, 
		async: false, method: 'post',    
		success: function(data) {     
			eval("s="+data);
		}     
	});
	return myGetDate(s,f);
}

//按格式取本地系统当前日期时间或取一个时间中的一部分
function myLocalTime(date){
	if (date==undefined || date=='') var date = new Date();
	else date= new Date(date);
	var y=date.getFullYear()+'';
	var m=date.getMonth()+1+'';
	var d=date.getDate()+'';
	var h=date.getHours()+'';
	var mi=date.getMinutes()+'';
	var sec=date.getSeconds()+'';
	var ms=date.getMilliseconds()+'';
	var timeid=date.getTime()+'';
	if (m.length<2) m='0'+m;
	if (d.length<2) d='0'+d;
	if (h.length<2) h='0'+h;
	if (mi.length<2) mi='0'+mi;
	if (sec.length<2) sec='0'+sec;
	var result={};	
	result.date=y+'-'+m+'-'+d;
	result.datetime=y+'-'+m+'-'+d+' '+h+':'+mi+':'+sec;
	result.longdate='年'+m+'月'+d+'日';
	result.time=h+':'+mi+':'+sec+'.'+ms;
	result.fulldatetime=y+'-'+m+'-'+d+' '+h+':'+mi+':'+sec+'.'+ms;
	result.timestamp=y+''+m+''+d+''+timeid;
	result.dateid=y+''+m+''+d;
	result.timeid=timeid;  //时间整数
	result.ms=ms;  //微秒
	result.sec=sec;  //微秒
	return result;
}

function xmyGetDate(dtime,f){
	var y=dtime.year+'';
	var m=dtime.month+'';
	var d=dtime.day+'';
	var h=dtime.hour+'';
	var mi=dtime.min+'';
	var s=dtime.sec+'';
	var ms=dtime.ms+'';
	var seconds=dtime.seconds+'';
	if (m.length<2) m='0'+m;
	if (d.length<2) d='0'+d;
	if (h.length<2) h='0'+h;
	if (mi.length<2) mi='0'+mi;
	if (s.length<2) s='0'+s;
	if (ms.length<2) ms='0'+ms;
	if (ms.length<3) ms='0'+ms;
	var result='';
	if (f.indexOf('y')>=0) result+=y;
	if (f.indexOf('m')>=0) result+='-'+m;
	if (f.indexOf('d')>=0) result+='-'+d;
	if (f.indexOf('h')>=0) result+=' '+h;
	if (f.indexOf('n')>=0) result+=':'+mi;
	if (f.indexOf('s')>=0) result+=':'+s;
	if (f.indexOf('d')>=0) result+='.'+ms;
	if (f=='date') result=y+'-'+m+'-'+d;
	if (f=='datetime' || f=='ymdhms') result=y+'-'+m+'-'+d+' '+h+':'+mi+':'+s;
	if (f=='shortdatetime' || f=='ymdhm'){
		result=y+'-'+m+'-'+d+' '+h+':'+mi;
	}
	if (f=='longdate') result=y+'年'+m+'月'+d+'日';
	if (f=='time' || f=='hmss') result=h+':'+mi+':'+s+'.'+ms;
	if (f=='fulldatetime' || f=='') result=y+'-'+m+'-'+d+' '+h+':'+mi+':'+s+'.'+ms;
	if (f=='timeid') result=y+''+m+''+d+''+seconds;
	if (f=='dateid') result=y+''+m+''+d;
	if (f=='seconds' || f=='second') result=seconds;  //时间整数
	if (f=='ms') result=ms; 
	if (f=='sec') result=seconds; 
	//日期--前10位，日期+时间--19，完整--共23位
	return result;
}
function xmyDateTime(date,format){
	date=date.trim()+'     ';
	//console.log(date);
	var y = date.substr(0,4);
	var m= date.substr(5,2);
	var d= date.substr(8,2);
	var h= date.substr(11,2);
	var mi= date.substr(14,2);
	var s= date.substr(17,2);
	var ms= date.substr(20,3);
	if (m.length<2) m='0'+m;
	if (d.length<2) d='0'+d;
	if (h.length<2) h='0'+h;
	if (mi.length<2) mi='0'+mi;
	if (s.length<2) s='0'+s;
	var t=h+':'+mi+':'+s+'.'+ms;
	var result='';
	if (format=='date' || format=='ymd') result=y+'-'+m+'-'+d;
	else if (format=='longdate') result=y+'年'+m+'月'+d+'日';
	else if (format=='time') result=t;
	else if (format=='fulltime') result=y+'-'+m+'-'+d+'-'+h+' '+mi+':'+s+':'+ms;
	else if (format=='second') result=date.getTime();
	else if (format=='year') result=y;
	else if (format=='month') result=y+'-'+m;
	else if (format=='datetime' || format=='ymdhm')	result=y+'-'+m+'-'+d+' '+h+':'+mi;
	else if (format=='hms') result=h+':'+mi+':'+s;
	else if (format=='hm') result=h+':'+mi;
	else if (format=='h') result=h;
	else if (format=='m') result=mi;
	else if (format=='s') result=s;
	else result=y+'-'+m+'-'+d+' '+t;
	//console.log(result);
	return result;
}

function myDateDiff(date1,date2){  //计算两个日期的时间差，返回一个对象
	var data={};
	date2=new Date(date2.replace(/-/g, "/"));  
	date1=new Date(date1.replace(/-/g, "/"));  
	var ms=date2.getTime()-date1.getTime();  //时间差的毫秒数
	var day=Math.floor(ms/(24*3600*1000));
	var left1=ms%(24*3600*1000);    //计算天数后剩余的毫秒数
	var hour=Math.floor(left1/(3600*1000));
	var left2=left1%(3600*1000);        //计算小时数后剩余的毫秒数
	var min=Math.floor(left2/(60*1000));
	var left3=left2%(60*1000)      //计算分钟数后剩余的毫秒数
	var sec=Math.round(left3/1000)
	var result='';
	if (day!=0) result+=day+'天';
	if (hour!=0) result+=hour+'小时';
	if (min!=0) result+=min+'分';
	if (sec!=0) result+=sec+'秒';
	data.day=result;
	result='';
	if (day*24+hour!=0) result+=(day*24+hour)+'小时';
	if (min!=0) result+=min+'分';
	if (sec!=0) result+=sec+'秒';
	data.hour=result;
	result='';
	if (day*24*60+hour*60+min!=0) result+=(day*24*60+hour*60+min)+'分';
	if (sec!=0) result+=sec+'秒';
	data.min=result;
	data.sec=(day*24*3600+hour*3600+min*60+sec);   //不加“秒'字
	data.ms=ms;
	return data;
}

function dateadd(date,days){
	date = date.replace(/-/g,"/"); //更改日期格式  
    var nd = new Date(date);  
    nd = nd.valueOf();  
    nd = nd + days * 24 * 60 * 60 * 1000;  
    nd = new Date(nd);  
    var y = nd.getFullYear();  
    var m = nd.getMonth()+1;  
    var d = nd.getDate();  
    if(m <= 9) m = "0"+m;  
    if(d <= 9) d = "0"+d;   
    var cdate = y+"-"+m+"-"+d;  
    return cdate;  
}

//按格式取日期
function myDateboxValue(id,format){
	var result='';
	if (format==undefined || format=='') var format='long';
	if ($("#"+id).length>0){
		var s=$("#"+id).textbox('getValue');
		var tmp=s.split('-');
		if (tmp.length==3){
			if (tmp[1].length<2) tmp[1]='0'+tmp[1];
			if (tmp[2].length<2) tmp[2]='0'+tmp[2];
			if (format=='long' || format=='day' ){
				result=tmp[0]+'年'+tmp[1]+'月'+tmp[2]+'日';
			}else if (format=='month'){
				result=tmp[0]+'年'+tmp[1]+'月';
			}else if (format=='year'){
				result=tmp[0]+'年';
			}
		}	
	}
	return result;
}

//定义简单消息框
function myMessageWin(id,msg,icon,top,left,height,width,style){
	if ($('#'+id).length==0){
		var title='系统提示';
		var str='<div id="'+id+'" class="easyui-window" title="<div style=\'margin:0px 0px 0px 4px; \'>'+title+'" data-options="iconCls:\'\'" ';
		str+='style="overflow:hidden; position:relative; margin:0; padding:0;"></div>';
		$("#main").append($(str));	
	}
	$("#"+id).window('close');
	if (width<=0) width=360;
	if (height<=0) height=150;
	if (style==undefined || style=='') style='close';
	style=';'+style+';'
	var xstyle='({width:'+width+', height:'+height;
	if (style.indexOf(';resize;')>=0)	xstyle+=' ,resizable: true';
	else xstyle+=' ,resizable: false';
	if (style.indexOf(';drag;')>=0) xstyle+=' ,draggable: true';
	else xstyle+=' ,draggable: false';
	if (style.indexOf(';close;')>=0) xstyle+=' ,closable:true';
	else xstyle+=' ,closable:false';
	xstyle+=' ,modal:true, collapsible:false, maximizable:false, minimizable:false';
	xstyle+='})';
	if (top>0 && left>0) $("#"+id).window({left:left, top:top});
	$("#"+id).window(eval(xstyle) );
	$("#"+id).attr('xtype','window');
	//$("#"+id).window('close'); //初始状态先关闭
	var btntop=height-78;
	if (icon=='ok'){
		iconid='system/images/icon-info.gif';
		btnleft=(width-sysbutton.width)/2.0;
		myButton([id+"Ok",id,"确定",btntop,btnleft,sysbutton.height,sysbutton.width]);
	}else if (icon=='warn'){
		iconid='system/images/icon-warning.gif';
		btnleft=(width-sysbutton.width)/2.0;
		myButton([id+"Ok",id,"确定",btntop,btnleft,sysbutton.height,sysbutton.width]);
	}else if (icon=='error'){
		iconid='system/images/icon-error.gif';
		btnleft=(width-sysbutton.width)/2.0;
		myButton([id+"Ok",id,"确定",btntop,btnleft,sysbutton.height,sysbutton.width]);
	}else if (icon=='yesno' || icon=='question'){
		iconid='system/images/icon-question.gif';
		btnleft=(width-8-2*sysbutton.width)/3.0;
		myButton([id+"Ok",id,"确定",btntop,btnleft,sysbutton.height,sysbutton.width]);
		myButton([id+"Cancel",id,"取消",btntop,2*btnleft+sysbutton.width,sysbutton.height,sysbutton.width]);
		$("#"+id+"Cancel").on('click', function () {
			$("#"+id).window('close');		
		});
	}
	p={};
	p.id=id+'icon';	p.parent=id; p.label=''; p.labelwidth=0; p.left=12; p.left=12; p.height=32; p.width=32; p.src=iconid;
	//myImageField(id+'icon',id,'',0,12,12,32,32,iconid);
	myImageField(p);
	var msgdim=msg.split('@n');
	if (style.indexOf(';@l;')<0) xmargin=54;
	var str='';
	for (i=0;i<msgdim.length;i++){
		if (i==0 || i==msgdim.length-1) str+='<div style="margin:12px 54px 0px 54px;">';
		else if (i<2) str+='<div style="margin:5px 54px 0px 54px;">';
		else str+='<div style="margin:5px 6px 0px 6px;">';
		if (msgdim[i]=='') msgdim[i]='&nbsp;'
		str+=msgdim[i]+'</div>';
	}
	if (style.indexOf(';@l;')<0) str='<center>'+str+'</center>';
	$('#'+id).append($(str));	
}

//定义简单消息框
function myMessage(msg,icon,width,callback){
	var title='系统提示';
	if (callback==undefined) callback='';
	if (msg.constructor == window.Array){  //数组时
		var str=''
		for (var i=0;i<msg.length;i++){
			if (i>0) str+='@n';
			str+=msg[i];
		}
		str=str.replaceAll('<br>','@n');
	}else{
		var str=msg;
	}
	var tmp=str.split('@n');
	if (icon==undefined || icon=='') var icon='info';
	else if (icon=='warn') icon='warning';
	else if (icon=='alert') icon='info';
	var k=0;
	str='';
	for (var i=0;i<tmp.length;i++){
		var s=tmp[i].replaceAll(' ','&nbsp;');
		if (tmp[i]=='') s='<div style="margin:5px 0px 0px 0px;"></div>';
		else if (tmp.length==1) s='<div style="margin:8px 12px 5px 0px;">'+s+'</div>';//只有一行
		else if (k==0) s='<div style="margin:0px 18px 5px 0px;">'+s+'</div>';
		else if (k==1) s='<div style="margin:0px 12px 5px 0px;">'+s+'</div>';
		else s='<div style="margin:0px 0px 5px 30px;">'+s+'</div>';
		s='<center>'+s+'</center>';
		if (tmp[i]!='') k++;  
		str+=s;
	}
	var cmd='';
	cmd+="$.messager.alert({\n";
	cmd+="title:'"+title+"',\n";
	cmd+="msg:'"+str+"<br>',\n";
	if (width!=undefined && width>0){
		cmd+="width: "+width+",\n";
	}	
	cmd+="icon:'"+icon+"'\n";
	if (callback!='') cmd+=",fn:"+callback;
	cmd+="});\n";
	//console.log(cmd);
	eval(cmd);
}

//定义yesno确认框的文本
function myConfirmMessage(msg){
	var tmp=msg.split('@n');
	var k=0;
	var str='';
	for (var i=0;i<tmp.length;i++){
		var s=tmp[i].replaceAll(' ','&nbsp;');
		str+='<center><div style="';
		if (i==0 && tmp.length==1) str+='margin:16px 4px 0px 4px;';
		else if (i==0) str+='margin:6px 4px 0px 4px;';
		else if (i<2) str+='margin:5px 4px 0px 4px;';
		else str+='margin:5px 4px 0px 42px;';
		if (tmp[i]=='') str+='height:3px;';
		str+='">'+tmp[i]+'</div></center>';
	}
	//console.log(str);
	return(str);
}

function myMessageEvent(){  //空事件

}

//定义提示框
function myShowMessage(msg,width){
	myMessageShow(msg,width);
}
	//定义提示框
function myMessageShow(msg,width){
	if (width==undefined || width==0) width=200; 
	var tmp=msg.split('@n');
	var s='';
	var str='';
	var k=0;
	for(var i=0;i<tmp.length;i++){
		s=tmp[i].replaceAll(' ','&nbsp;');
		s='<div style="margin:8px 0px 0px 0px;">'+s+'</div>';
		s='<center>'+s+'</center>';
		if (tmp[i]!='') k++;  
		str+=s;
	}
	if (k>=2) height=96+(k-1)*24;
	else height=88+8+9;
	$.messager.show({
		title: '系统提示',
		width: width,
		height: height,
		msg: str,
		timeout: 2000,
		showType:'slide'
	});
}	 

//定义控件位置样式Style
function myDefineLabelStyle(top,left,height,width){
	var str='';
	if (top!=undefined && left!=undefined){
		str+='style=\\"';
		if (syslabel.fontbold) str+='font-weight:bold; ';
		str+='font-size: '+syslabel.fontsize+'px; font-family: '+syslabel.fontname+'; TOP: '+top+'px; LEFT: '+left+'px; ';
		if (height!=undefined && height>0){
			str+=' height: '+height+'px;';
		}	
		if (width!=undefined && width>0){
			str+=' width: '+width+'px;';
		}
		str+=' position: absolute';
	}	
	return str; 
}

//独立的label
function myLabel(v){
	//myLabel(id,parent,label,top,left,width,style){
	if (v instanceof Array){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.top=v[3];
		p.left=v[4];
		p.width=v[5];
		if (v.length>5) p.style=v[6];
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;	
	if (p.parent=='') p.parent='document.body';
	if (p.style==undefined) p.style='';
	else p.style=';'+p.style+';';
	var str='';
	if (p.width==undefined || p.width==0) p.width=200;
	str+="<div id='"+p.id+"' class='textdiv' align='left' style='overflow:hidden'>";  //超出范围隐藏文字
	if (p.style.indexOf(';b;')>=0) str+='<b>'; 
	if (p.style.indexOf(';u;')>=0) str+='<u>'; 
	if (p.style.indexOf(';i;')>=0) str+='<i>'; 
	if (p.style.indexOf(';a;')>=0) str+='<a>'; 
	str+=p.label;
	if (p.style.indexOf(';a;')>=0) str+='</a>'; 
	if (p.style.indexOf(';i;')>=0) str+='</i>'; 
	if (p.style.indexOf(';u;')>=0) str+='</u>'; 
	if (p.style.indexOf(';b;')>=0) str+='</b>';
	str+="</div>"; 
	$("#"+p.parent).append($(str));
	if (p.width>0) $("#"+p.id).css(myLabelCss(p.parent, p.top, p.left, 0, p.width));
	else $("#"+p.id).css(myLabelCss(p.parent, p.top, p.left, 0, 0));
	$("#"+p.id).attr('xtype', 'label');
	$("#"+p.id).attr('xparent', p.parent);
	$("#"+p.id).attr('xid', p.id);
	$("#"+p.id).attr('xdatatype', '');  //自定义属性，没有类型
}

//文本文字样式
function myLabelCss(parent,top,left,height,width){
	var css='';
	if (sys.browser=='firefox' && parent!=undefined && $("#"+parent).length>0 && $("#"+parent).attr('xtype')=='fieldset'){
		top=top-16;   //firefox游览器
	}
	var str='var css={position: "absolute"';
	if (syslabel.fontbold) str+=', font-weight:bold';
	str+=', "font-size":'+syslabel.fontsize+', "font-family":"'+syslabel.fontname+'"';
	if (top!=undefined && left!=undefined){
		str+=', "top":'+top+', "left":'+left;
		if (width!=undefined && width>0){
			str+=', "width": '+width;
		}else{
			str+=', "autosize":true';
		}
		if (height!=undefined && height>0){
			str+=', "height": '+height;
		}
		str+=', "z-index":2};\n';
	}else{
		str+="};\n";
	}
	eval(str);
	return css;		
}

//定义控件位置样式CSS
function myTextCss(parent, top, left, height, width){
	var str='';
	var css='';
	if (top!=undefined && left!=undefined){
		if (sys.browser=='firefox' && parent!=undefined && $("#"+parent).length>0 && $("#"+parent).attr('xtype')=='fieldset'){
			top=top-16;
		}
		/* 内容超出宽度时隐藏超出部分的内容 */
		str='var css={overflow:"hidden", "text-overflow":"ellipsis", padding:"0px 2px 0px 4px", position: "absolute", top:"'+top+'px", left:"'+left+'px"';
		if (width!=undefined && width>0){
			str+=', width: '+width;
		}
		if (height!=undefined && height>0){
			str+=', height: '+height;
		}
		str+=', "z-index":2};\n';
	}else{
		str+="\n";
	}
	eval(str);
	return css;		
}

function myFieldStyle(id,style){  //设置style只读、图标
	if (style!=undefined && style!=''){
		var tmp=(style+';').split(';');
		for (var i=0;i<tmp.length;i++){
			if (tmp[i]=='readonly'){
				$("#"+id).textbox({readonly:true});
				$("#"+id).attr('xreadonly', 1);
				$("#"+id).attr('xsaveflag', 0);  //只读列在默认状态下是不保存的
			} 
			if (tmp[i]=='noreset') $("#"+id).attr('xreset', 0);  //不容许设置其值，只靠自身改变
			if (tmp[i]=='save') $("#"+id).attr('xsaveflag', 1); 
			if (tmp[i]=='email') $("#"+id).textbox({validType:'email'});
			if (tmp[i]=='url') $("#"+id).textbox({validType:'url'});
			if (tmp[i]=='password') $("#"+id).textbox({type:'password'});
			if (tmp[i].indexOf('icon:')>=0){
				var x1=tmp[i].indexOf('icon:');
				var x2=tmp[i].indexOf(';',x1+1);
				if (x1>=0 && x2>0) var icon=tmp[i].substring(x1+5,x2-1); 
				else var icon=tmp[i].substr(x1+5,255);
				$("#"+id).textbox({buttonIcon: icon}); 
			}
		}
	}
}	

function myFieldLabel(id,parent,label,labelwidth,top,left,height,width){
	top=1*top; left=1*left; height=1*height; width=1*width; labelwidth=1*labelwidth; //数据类型转换
	//定义控件中的label
	if (label!=undefined && label!=''){
		if (label.substr(0,1)=='*'){
			label=label.substring(1);
			$("#"+parent).append("<label id='xlabel"+id+"' align='"+syslabel.align+"'>*</label>");
			$("#xlabel"+id).css(myLabelCss(parent,top+syslabel.topmargin,left+labelwidth+width+12,0,0));
		}
		$("#"+parent).append("<label id='label"+id+"' align='"+syslabel.align+"'>"+label+"</label>");
		if (labelwidth>0){
			$("#label"+id).css(myLabelCss(parent, top+syslabel.topmargin, left, 0, labelwidth));
		}else{
			$("#label"+id).css(myLabelCss(parent, top, 1*left+2, 0, label.length*syslabel.fontsize));
			top=top+syslabel.fontsize+syslabel.topmargin; //换行显示文本
		}
	}else labelwidth=0;
}

function myHiddenFields(fields){
	//字段名、控件名称和虚拟名称三个都一样，如果要从record中去数据，需要设置成hiddenfields
	//hiddenfield
	var str='';
	var parent='main';
	var items=fields.split(';');
	for (var i=0; i<items.length; i++){
		if (items[i]!='' && $("#"+items[i]).length==0){	//没有定义过的控件
			str='<input hidden="true" type="hidden" id="'+items[i]+'" style="left:0px; top:0px; height:0px; width:0px; padding:0px 0;" />';
			$("#"+parent).append($(str));
			$("#"+items[i]).attr('xid',items[i]);
			$("#"+items[i]).attr('xtype','hiddenfield');
			$("#"+items[i]).attr('xdatatype','c');  //自定义属性，字段数据类型
			$("#"+items[i]).attr('xsaveflag',1);  //自定义属性
			$("#"+items[i]).attr('xfield', items[i]);  //列名field与控件id名称相同
			$("#"+items[i]).attr('xfixedvalueflag', 0);
			//str="fieldmap."+items[i];
			//if (fieldmap!=undefined && eval(str)==undefined){
				//eval(str+"='"+items[i]+"'");
			//}
		}
	}
}

function myHiddenField(p){ //添加一个隐藏控件，可以带单独的field
	//var parent='document.body';
	var parent='main';
	if ($('#'+p.id).length==0){
		if (p.id==undefined || p.id=='') pid=p.field;
		if (p.field==undefined || p.field=='') p.field=p.id;
		str='<input hidden="true" type="hidden" id="'+p.id+'" style="width:0px;" />';
		$("#"+parent).append($(str));
		$("#"+p.id).attr('xid', p.id);
		$("#"+p.id).attr('xdatatype', 'c');  //自定义属性，字段数据类型
		$("#"+p.id).attr('xtype', 'hiddenfield');
		$("#"+p.id).attr('xsaveflag', 1);  //自定义属性
		$("#"+p.id).attr('xfield', p.field);  //自定义属性，字段名
		if (p.fixedvalue!=undefined){
			//数据保存时按fixedvalue值保存
			$("#"+p.id).attr('xfixedvalue', p.fixedvalue);
			$("#"+p.id).attr('xfixedvalueflag', 1);
		}else{
			$("#"+p.id).attr('xfixedvalueflag', 0);
		}
	}
}

//获取多选下拉框中已经选中条目的下标，返回数组
function myGetSelectedComboIndex(field){
	var index=[];
	var xvalue=$('#'+field).combobox("getValues");
	var xdata=$('#'+field).combobox("getData");
	for (var i=0;i<xvalue.length;i++){
		for (var j=0;j<xdata.length; j++){
			if (xvalue[i]==eval('xdata['+j+'].'+field)){
				index.push(j);
				break;
			}
		}
	}
	return index;
}


function myJSONLength(obj) {
	 var size = 0, key;
	 for (key in obj) {
		 if (obj.hasOwnProperty(key)) size++;
	 }
	 return size;
};
	 
function myImageIcon(filename){
	var icon='download64.jpg';
	if (filename!=''){ 
		fileext=filename.substring(filename.lastIndexOf(".")+1,255).toLowerCase();//文件扩展名
		var xvideo=';avi;rmvb;mov;asf;wmv;3gp;flv;mkv;rm;mid;vob;webm;';
		var xaudio=';mp3;wav;wma;';
		var ximage=';jpg;jpeg;gif;pcx;png;bmp;tif;tiff;';
		if (fileext==undefined) fileext='';
		if (fileext=='doc' || fileext=='docx') icon='word64.png';
		else if (fileext=='xls' || fileext=='xlsx') icon='excel64.png';  
		else if (fileext=='ppt' || fileext=='pptx') icon='ppt64.png';  
		else if (fileext=='pdf') icon='pdf64.png';
		else if (fileext=='swf') icon='swf64.png';
		else if (fileext=='fla') icon='flash64.png';
		else if (fileext=='html' || fileext=='htm') icon='html64.png';  
		else if (fileext=='rar') icon='rar64.png';
		else if (fileext=='zip') icon='zip64.png';
		else if (fileext=='swf') icon='swf64.png';
		else if (fileext=='exe') icon='fileexe64.png';
		else if (ximage.indexOf(fileext)>=0) icon='image64.png';
		else if (xaudio.indexOf(fileext)>=0) icon='audio64.png';
		else if (xvideo.indexOf(fileext)>=0) icon='video64.png';
	}
	return icon;
}

//改变控件图片大小--必须要3个属性列
function myZoomObject(id, ratio){
	var ratio=1.0*ratio*$("#"+id).attr('xratio');
	if (ratio==0) ratio=1;
	var width=$("#"+id).attr('xwidth')*ratio;
	if (width<32){
		width=32;
		ratio=width/$("#"+id).attr('xwidth');
	}
	var height=$("#"+id).attr('xheight')*ratio;
	//console.log(width, height,id);
	$("#"+id).css("width", width+"px");
	$("#"+id).css("height", height+"px");
	$("#"+id).attr('xratio', ratio);
}
//图形缩放函数
function myResizeImage(img, src, winheight, winwidth){
	if (winheight>0 || winwidth>0){
		var image=new Image();
		image.src=src;
		aheight=image.height+0;  
		awidth=image.width+0;
		image.onload=function() {  //必须放在onload事件中
			var aheight=image.height+0;  
			var awidth=image.width+0;
			//console.log(aheight+'---'+awidth);
			if (awidth>0 && aheight>0) {
				//调整图片大小,按比例缩放
				var Ratio = 1; 
				var wRatio=1;
				var hRatio=1;
				if (winwidth>0){
					var wRatio=winwidth /awidth;
				}
				if (winheight>0){
					var hRatio=winheight/aheight;
				}
				Ratio = (wRatio<=hRatio?wRatio:hRatio); 
				if (Ratio!=0){ 
					awidth = awidth * Ratio; 
					aheight = aheight * Ratio; 
				}
				if ($("#"+img).length>0){
					$("#"+img).css({width:awidth, height:aheight});
					$("#"+img).attr('awidth', awidth);  //图片原始宽度
					$("#"+img).attr('aheight', aheight); //图片原始高度
					if ($("#"+img).attr('xwidth')==undefined || $("#"+img).attr('xwidth')<=0) $("#"+img).attr('xwidth', awidth);
					if ($("#"+img).attr('xheight')==undefined || $("#"+img).attr('xheight')<=0) $("#"+img).attr('xheight', aheight);
					//console.log(awidth,aheight,img);
				}
			}
		};
		return ({width:awidth, height:aheight});
	}				
}		

function myHLine(id,parent,top,left,height,width,style){
	if (style==undefined) var style='black';
	var src='system/images/hline.gif';
	var str='<img src="'+src+'" id="'+id+'" style="position: absolute; top:'+top+'px; left:'+left+'px; width:'+width+'px; height:'+height+'px; padding-left:0; border:false" />';
	$("#"+parent).append($(str));
	$("#"+id).css(myTextCss(parent,top,left,height,width));
}

function myLink(v){
	if (v instanceof Array){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.top=v[2];
		p.left=v[3];
		p.height=v[4];
		p.width=v[5];
		if (v.length>6) p.style=v[6];
		if (v.length>7) p.color=v[7];
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;	
	str='<div id="'+p.id+'_div" style="position:absolute; top:'+p.top+'px; left:'+p.left+'px;';
	if (p.color!=undefined && p.color!='') str+=' color:'+p.color+';';
	str+='"><a id="'+p.id+'"';
	if (p.href!=undefined) str+=' href="'+p.href+'">'+p.text+'</a></div>';
	$('#'+p.parent).append($(str));
	$('#'+p.id).attr('xid', p.id);
	$('#'+p.id).attr('xparent', p.parent);
}

function myLine(v){
	//myLine(id,parent,top,left,height,width,style,color){
	if (v instanceof Array){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.top=v[2];
		p.left=v[3];
		p.height=v[4];
		p.width=v[5];
		if (v.length>6) p.style=v[6];
		if (v.length>7) p.color=v[7];
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;	
	if (p.color==undefined) p.color='black';
	if (p.style==undefined) p.style='';
	p.style=';'+p.style+';';
	if (p.style.indexOf(";bevel;")>=0){
		if (p.height<=1){
			var str='<div id="'+p.id+'1"><table border="0" cellspacing="0" cellpadding="0" height='+p.height+' style="border-color:gray; border-left-style:solid; border-width:'+p.width+'px"><tr><td valign=top></table></div>';	
			str+='<div id="'+p.id+'2"><table border="0" cellspacing="0" cellpadding="0" height='+p.height+' style="border-color:white; border-left-style:solid; border-width:'+p.width+'px"><tr><td valign=top></table></div>';	
			$("#"+p.parent).append($(str));
			$("#"+p.id+'1').css(myTextCss(p.parent, p.top, p.left, p.height, p.width));
			$("#"+p.id+'2').css(myTextCss(p.parent, p.top+p.height, p.left, p.height, p.width));
		}else if (p.width<=1){
			var str='<div id="'+p.id+'1"><table border="0" cellspacing="0" cellpadding="0" height='+p.height+' style="border-color:gray; border-left-style:solid; border-width:'+p.width+'px"><tr><td valign=top></table></div>';	
			str+='<div id="'+p.id+'2"><table border="0" cellspacing="0" cellpadding="0" height='+p.height+' style="border-color:white; border-left-style:solid; border-width:'+p.width+'px"><tr><td valign=top></table></div>';	
			$("#"+p.parent).append($(str));
			$("#"+p.id+'1').css(myTextCss(p.parent, p.top, p.left, p.height, p.width));
			$("#"+p.id+'2').css(myTextCss(p.parent, p.top, p.left+p.width, p.height, p.width));
		}
	}else{
		//var str='<div id="'+id+'"><hr style="position:absolute; top:'+top+'px; left:'+left+'px; height:'+height+'px; width:'+width+'px;" /></div>';
		var str='<div id="'+p.id+'"><table border="0" cellspacing="0" cellpadding="0" height='+p.height+' style="border-color:'+p.color+'; border-left-style:solid; border-width:'+p.width+'px"><tr><td valign=top></table></div>';	
		$("#"+p.parent).append($(str));
		$("#"+p.id).css(myTextCss(p.parent, p.top, p.left, p.height, p.width));
	}
}

function myClearFileField(fieldset){
	//清空file选择框
	var fields=fieldset.split(';');
	for (var i=0;i<fields.length;i++){
		var id=fields[i];
		var file = document.getElementById(id);
		if (file!=null){
			if (file.outerHTML) {  // for IE, Opera, Safari, Chrome
				file.outerHTML = file.outerHTML;
			}else{ // FF(包括3.5)
				file.value = "";
			}
			//清空后onchange事件失效，需要重新定义
			btnid=id+'button';
			if ($("#"+btnid).length>0) $("#"+btnid).linkbutton('disable');
		}
	}	
}

function myFileFieldChange(fieldset){
	//设置file选择框中按钮的状态
	var fields=fieldset.split(';');
	for (var i=0;i<fields.length;i++){
		var id=fields[i];
		//清空后onchange事件失效，需要重新定义
		var btnid=id+'button';
		if ($("#"+btnid).length>0){
			$("#"+id).bind('change',function(v){
				var filename = $("#"+id).val();
				if (filename=='') $("#"+btnid).linkbutton('disable');
				else $("#"+btnid).linkbutton('enable');
			});
		}
	}	
}

///fffffffff
function myFileUploadAttachment(fileupload,action){ //单个附件
	var cmp=$('#'+fileupload);
	var filespec=cmp.attr('xfilesourcename');  
	var filename=cmp.attr('xfileosname');
	if (action==undefined) action='add';
	var id=cmp.attr('xattachment');
	var divid=cmp.attr('xattachmentdiv');
	if (action=='clear' || action=='delete' || action=='show' || action=='add' || action=='edit'){//清空附件 
		if ($('#'+divid).length>0) $('#'+divid).remove();
		if (filename!='' && filename!=undefined){
			if (action=='add'){  //显示删除图表
				str='<div id="'+divid+'" class="textdiv" style="margin:0;">';
				str+='<a href="javascript:myFileUploadAttachment(\''+fileupload+'\',\'delete\');"><img src="system/images/deletefile.png" height="16px" width="16px" /></a>&nbsp;';
			}else{
				str='<div id="'+divid+'" class="textdiv" style="margin:5px 0px 0px 0px;">';
			}
			str+='<a href="javascript:myFileUploadAttachment(\''+fileupload+'\',\'download\');">';
			str+=cmp.attr('xfilesourcename');
			if (cmp.attr('xfilesize')!=0 && cmp.attr('xfilesizedesc')!=''){
				str+='('+cmp.attr('xfilesizedesc')+')';
			}
			str+='</a></div>';
			//console.log(str);
			$('#'+id).append($(str));
			if (action=='add'){  //上传附件后，x新增附件，带删除标记
				//记录新增附件名称
				var f1=cmp.attr('xfileosname');
				var f2=f1.substring(0,f1.lastIndexOf('.'))+'.pdf';
				if (("#_addedfiles").length==0){
					myHiddenFields("_addedfiles");
					mySetValue('_addedfiles','');
				}
				var v=myGetValue('_addedfiles');
				mySetValue('_addedfiles',v+'	'+f1+'	'+f2); //记录要删除的附件文件，tab键分割
			}else if (action=='delete'){ //删除附件
				var f1=cmp.attr('xfileosname');
				var f2=f1.substring(0,f1.lastIndexOf('.'))+'.pdf';
				if (("#_deletedfiles").length==0){
					myHiddenFields("_deletedfiles");
					mySetValue('_deletedfiles','');
				}
				var v=myGetValue('_deletedfiles');
				mySetValue('_deletedfiles',v+'	'+f1+'	'+f2); //记录要删除的附件文件，tab键分割
				if ($('#'+divid).length>0) $('#'+divid).remove();
				cmp.attr('xfilesourcename','');  
				cmp.attr('xfileosname','');  
				cmp.attr('xtargetfile','');  
				cmp.attr('xfilesize',0);  
				cmp.attr('xfilesizedesc','');  
				cmp.attr('xtargetpath','');  
				cmp.attr('xfileext','');
				cmp.attr('xuploaddate','');  
				cmp.attr('xuploadtime','');  
				cmp.attr('xfileext','');  
			}	
		}
	}else{
		if (action=='download'){ //下载单个附件
			if (filename!=''){
				var url=filename;
				var target=filespec;
				//var f2=url.substring(0,url.lastIndexOf('.'))+'.pdf';
				window.location.href='system//easyui_fileDownLoad.jsp?source='+url+'&target='+target;
				//var sql="update "+table.name+" set downloadtimes=(case when downloadtimes is null then 1 else downloadtimes+1 end)  where "+table.keyfield+"="+myGetValue(table.keyfield);
				//var result=myRunUpdateSql(sql);
				var n=cmp.attr('xdownloadtimes');
				cmp.attr('xdownloadtimes',n+1);
			}
		}
	}
}

function xmyAttachmentPanel(action,id,parent,title,results){
	//显示附件的面板处理，删除或
	if (action=='remove'){
		results=[];
	}else{
		if (results.length>0){
			var f1='';
			var f2='';
			var n=0;
			f='压缩包_'+results[0].filesourcename;
			for (var i=0;i<results.length;i++){
				if (i>0){
					f1+='|'; //分隔符tab
					f2+='|';  //分隔符tab
				}
				f1+="/"+results[i].fileosname;
				f2+=results[i].filesourcename;
				n++;
			} 
			if (n>0) xtitle=title+'附件列表('+n+'个附件)';
			else xtitle=title+'附件列表';
			if (n>1 && action=='query') xtitle+='<a href="javascript:myDownLoadAll(\''+id+'\');" src="">&nbsp;<u>[下载全部]</u></a>';
			if ($("#"+id).length==0){
				/*
				$('#'+parent).layout('add',{
					id: id,
					region: 'south',
					title: xtitle,
					split: true,
					border: true,
					collapsible:false,
					height:200
				});
				*/
				str='<div id="'+id+'" class="easyui-panel" data-options="split:true, region:\'south\'" style="height:200px; border:1px;"></div>';	
				$('#'+parent).append($(str));
			}else{
				myShowPanel(id,true);
			}
			$("#"+id).panel({title: xtitle, collapsible: false, height: 200 })
			//自定义属性，用于文件打包下载
			$("#"+id).attr("filecount",n);  
			$("#"+id).attr("targetname",f);  
			$("#"+id).attr("filename",f1);
			$("#"+id).attr("filetitle",f2);
		}else{
			//$('#'+parent).layout('remove','south');
			myShowPanel(id,false);
		}		
	}	
	return (results);
}	

function myAddAttachment(fileupload,parent){
	//新增加一个上传的附件
	var icon=myImageIcon($('#'+fileupload).attr('xfilesourcename'));
	//找到一个闲置的filediv(n)
	for (var n=1; n<=sys.maxfilenumber; n++){
		if ($('#filediv'+n).length==0) 	break;
	}
	$('#filediv'+(n)).remove();  //清空div包含的控件
	var str='<div id="filediv'+(n)+'" style="border:solid 1px navy; width:240px; display:block; float:left; padding:4px 1px 1px 4px; margin:4px 0px 0px 4px;"></div>';
	$('#'+parent).append($(str)); //添加一个层
	//设置层的自定义属性，记录附件信息
	$('#filediv'+n).attr('xfilesizedesc', $('#'+fileupload).attr('xfilesizedesc'));
	$('#filediv'+n).attr('xfilesourcename',$('#'+fileupload).attr('xfilesourcename'));
	$('#filediv'+n).attr('xfileosname',$('#'+fileupload).attr('xfileosname'));
	$('#filediv'+n).attr('xfilesize',$('#'+fileupload).attr('xfilesize'));
	$('#filediv'+n).attr('xfileext',$('#'+fileupload).attr('xfileext'));
	$('#filediv'+n).attr('xuploaddate',myLocalTime().datetime);
	$('#filediv'+n).attr('xdownloadtimes','0');
	$('#filediv'+n).attr('xparent', fileupload);  //上传控件的id
	fileid='filediv'+(n);
	//添加附件显示的信息，点击附件调用myDownLoadFile下载附件。myDownLoadFile函数需要在主程序中定义
	str='<div style="margin:0px 0px 4px 0px;"><a href="javascript:myDeleteAttachment('+n+');"><img src="system/images/deletefile.png" height="16px" width="16px" /></a>';
	str+='<center>';
	str+='<div style="margin:-18px 0px 2px 0px;">';
	str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');"><img src="system/images/'+icon+'" height="64px" width="64px" /></a>';
	str+='<a href="javascript:myMailFile(\''+fileid+'\');"><img src="system/images/mail48.png" height="24px" width="24px" /></a>';
	str+='</div>';
	str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');">';
	str+='<div style="text-align:center; width:232px; height:40px; margin:4px 0px 4px 0px;" >'+$('#'+fileupload).attr('xfilesourcename')+'('+$('#'+fileupload).attr('xfilesizedesc')+')</div>';
	str+='</a></center></div>';
	$('#filediv'+n).append($(str));
	//记录新增附件名称
	var f1=$('#'+fileupload).attr('xfileosname');
	var f2=f1.substring(0,f1.lastIndexOf('.'))+'.pdf';
	if (("#_addedfiles").length==0){
		myHiddenFields("_addedfiles");
		mySetValue('_addedfiles','');
	}
	var v=myGetValue('_addedfiles');
	mySetValue('_addedfiles',v+'	'+f1+'	'+f2); //原来的隐藏变量基础上记录要新增的附件文件，tab键分割
}

function myShowAttachment(pmyAttachment){
	//在页面上显示附件
	var result=pmyAttachment.results;
	if (result==null) return;
	var panel=pmyAttachment.panel;  //显示附件的面板
	var title=pmyAttachment.title;  //面板标题
	var tabpanel=pmyAttachment.tabpanel;  //附件预览的tabs名称
	var parent=pmyAttachment.layout;  //生成附件面板时随意的layout父类容器
	var position=pmyAttachment.position;   //面板添加在哪里，默认south
	var height=pmyAttachment.height;   //面板高度，默认200，少于120时，简洁显示
	//var top=pmyAttachment.top;  
	//var left=pmyAttachment.left;
	if (height==undefined) height=200;
	if (position==undefined || position=='') position='south';
	if (title==undefined) title='';
	for (var n=1; n<=sys.maxfilenumber; n++) $('#filediv'+n).remove();
	n=result.length;
	if (n>0) xtitle=title+'附件列表('+n+'个附件)';
	else xtitle=title+'附件列表';
	if (n>1) xtitle+='<a href="javascript:myDownLoadAll(\''+panel+'\');" src="">&nbsp;<u>[下载全部]</u></a>';
	if ($("#"+panel).length==0){
		$('#'+parent).layout('add',{
			id: panel,
			region: position,
			title: xtitle,
			split:true,
			border:true,
			collapsible:true,
			height: height
		});
	}else{
		$("#"+panel).panel({ title: xtitle });
	}
	$("#"+panel).panel("expand");
	if (result.length>0){
		var f1='', f2='';
		var f='压缩包_'+result[0].filesourcename;
		for (var n=1;n<=result.length;n++){
			if (n>1){
				f1+='|'; //分隔符
				f2+='|';  //分隔符
			}
			f1+="/"+result[n-1].fileosname;
			f2+=result[n-1].filesourcename;
			var icon=myImageIcon(result[n-1].filesourcename);
			var str='<div id="filediv'+n+'" style="border:solid 1px navy; width:240px; height:\'100%\'; display:block; float:left; padding:4px 1px 1px 4px; margin:4px 0px 0px 4px;"></div>';
			$('#'+panel).append($(str));
			//设置自定义属性
			$('#filediv'+n).attr('xfilesizedesc',result[n-1].filesizedesc);
			$('#filediv'+n).attr('xfilesourcename',result[n-1].filesourcename);
			$('#filediv'+n).attr('xfileosname',result[n-1].fileosname);
			$('#filediv'+n).attr('xfilesize',result[n-1].filesize);
			$('#filediv'+n).attr('xfileext',result[n-1].fileext);
			$('#filediv'+n).attr('xuploaddate',result[n-1].uploaddate);
			$('#filediv'+n).attr('xdownloadtimes',result[n-1].downloadtimes);
			$('#filediv'+n).attr('xparent', result[n-1].filetype);
			//设置附件信息
			fileid='filediv'+(n);
			str='<div style="margin:0px 0px 4px 0px;"><a href="javascript:myDeleteAttachment('+n+');"><img src="system/images/deletefile.png" height="16px" width="16px" /></a>';
			str+='<center>';
			str+='<div style="margin:-18px 0px 2px 0px;">';
			str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');"><img src="system/images/'+icon+'" height="64px" width="64px" /></a>';
			str+='<a href="javascript:myMailFile(\''+fileid+'\');"><img src="system/images/mail48.png" height="24px" width="24px" /></a>';
			str+='</div>';
			str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');">';
			str+='<div style="text-align:center; width:232px; height:40px; margin:4px 0px 4px 0px; padding:0px 4px 0px 4px;" >'+result[n-1].filesourcename+'('+result[n-1].filesizedesc+')</div>';
			str+='</a></center></div>';
			$('#filediv'+n).append($(str));
		}	
		$("#"+panel).attr("targetname",f);  
		$("#"+panel).attr("filename",f1);
		$("#"+panel).attr("filetitle",f2);
		$("#"+panel).attr("filecount",result.length);  
	}
}

function myRemoveLayoutPanel(layout,position){
	$('#'+layout).layout('remove',position);
}

//function myDownLoadAttachment(result,panel,title,tabpanel){
function myDownLoadAttachment(pmyAttachment){
	var result=pmyAttachment.results;
	if (result==undefined || result==null) return;
	var panel=pmyAttachment.panel;  //显示附件的面板
	var title=pmyAttachment.title;  //面板标题
	var tabpanel=pmyAttachment.tabpanel;  //附件预览的tabs名称
	var parent=pmyAttachment.layout;  //生成附件面板时随意的layout父类容器
	var position=pmyAttachment.position;   //面板添加在哪里，默认south
	var height=pmyAttachment.height;   //面板高度，默认200，少于120时，简洁显示
	if (height==undefined) height=200;
	if (position==undefined || position=='') position='south';
	if (title==undefined) title='';
	for (var n=1; n<=sys.maxfilenumber; n++) $('#filediv'+n).remove();
	if (result.length==0){
		$('#'+parent).layout('remove',position);
	}else{
		if (height>120) var imgflag=1;
		else var imgflag=0;
		n=result.length;
		if (n>0) xtitle=title+'附件列表('+n+'个附件)';
		else xtitle=title+'附件列表';
		if (n>1) xtitle+='<a href="javascript:myDownLoadAll(\''+panel+'\');" src="">&nbsp;<u>[下载全部]</u></a>';
		if ($("#"+panel).length==0){
			$('#'+parent).layout('add',{
				id: panel,
				region: position,
				title: xtitle,
				split:true,
				border:true,
				collapsible:true,
				height: height
			});
		}else{
			$("#"+panel).panel({ title: xtitle });
		}
		$("#"+panel).panel("expand");
		var f1='', f2='';
		var f='压缩包_'+result[0].filesourcename;
		for (var n=1; n<=result.length; n++){
			if (n>1){
				f1+='|'; //分隔符tab
				f2+='|';  //分隔符tab
			}
			f1+="/"+result[n-1].fileosname;
			f2+=result[n-1].filesourcename;
			var icon=myImageIcon(result[n-1].filesourcename);
			var fileext=result[n-1].fileext;
			var pdffilename='';
			var playicon='';
			var str='';
			if ((';pdf;swf;doc;docx;ppt;pptx;jpg;jpeg;png;gif;tif;tiff;').indexOf(';'+fileext+';')>=0){
				pdffilename=result[n-1].fileosname.substring(0,result[n-1].fileosname.lastIndexOf(".")).toLowerCase()+'.pdf';
				str+='<div id="filediv'+n+'" style="border:solid 1px navy; width:240px; display:block; float:left; padding:4px 1px 4px 1px; margin:4px 0px 0px 4px;"></div>';
				playicon='play4.png';
			}else if ((';mp3;wav;').indexOf(';'+fileext+';')>=0){
				pdffilename=result[n-1].fileosname;
				str+='<div id="filediv'+n+'" style="border:solid 1px navy; width:240px; display:block; float:left; padding:4px 1px 4px 1px; margin:4px 0px 0px 4px;"></div>';
				playicon='play1.png';
			}else if ((';jpg;jpeg;png;gif;tif;tiff;').indexOf(';'+fileext+';')>=0){
				str+='<img id="filediv'+n+'" src="'+result[n-1].fileosname+'" style="border:solid 1px navy; width:240px; display:block; float:left; padding:4px 1px 4px 1px; margin:4px 0px 0px 4px;">';
				playicon='play4.png';
			}else{
				str+='<div id="filediv'+n+'" style="border:solid 1px navy; width:240px; display:block; float:left; padding:4px 1px 4px 1px; margin:4px 0px 0px 4px;"></div>';
			}
			$('#'+panel).append($(str));
			//设置自定义属性
			$('#filediv'+n).attr('xfilesizedesc',result[n-1].filesizedesc);
			$('#filediv'+n).attr('xfilesourcename',result[n-1].filesourcename);
			$('#filediv'+n).attr('xfileosname',result[n-1].fileosname);
			$('#filediv'+n).attr('xfilesize',result[n-1].filesize);
			$('#filediv'+n).attr('xfileext',result[n-1].fileext);
			$('#filediv'+n).attr('xuploaddate',result[n-1].uploaddate);
			$('#filediv'+n).attr('xdownloadtimes',result[n-1].downloadtimes);
			$('#filediv'+n).attr('xparent', result[n-1].filetype);
			//设置附件信息
			fileid='filediv'+(n);
			if (imgflag==1){ //附件面板高度足够，显示文档图标
				str+='<div style="width:232px;">';
				str='<center>';
				if (pdffilename!=''){
					str+='<a href="javascript:myReadAttachment('+n+',\''+tabpanel+'\');">';
					str+='<img src="system/images/'+playicon+'" height="32px" width="32px" /></a>&nbsp;&nbsp;';
				}
				str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');"><img src="system/images/'+icon+'" height="64px" width="64px" /></a>';
				str+='<a href="javascript:myMailFile(\''+fileid+'\');"><img src="system/images/mail48.png" height="24px" width="24px" /></a>';
				str+='</div>';
				str+='<a href="javascript:myDownLoadFile(\''+fileid+'\');"><div style="text-align:center; width:232px; height:30px; margin:4px 0px 4px 0px;" >'+result[n-1].filesourcename+'('+result[n-1].filesizedesc+')</div></a>';
				str+='</center></div>';
				/*
				str='<table border="0" width="232px" height="44px" cellspacing="0px" cellpadding="2px"><tr width="100%">';
				str+='<center>';
				if (pdffilename!=''){
					str+='<td><a href="javascript:myReadAttachment('+n+',\''+tabpanel+'\');">';
					str+='<img src="system/images/'+playicon+'" height="32px" width="32px" /></a></td>&nbsp;&nbsp;';
				}
				str+='<td><a href="javascript:myDownLoadFile(\''+fileid+'\');"><img src="system/images/'+icon+'" height="64px" width="64px" /></a></td>';
				str+='<td><a href="javascript:myMailFile(\''+fileid+'\');"><img src="system/images/mail48.png" height="24px" width="24px" /></a></td>';
				str+='<td><a href="javascript:myDownLoadFile(\''+fileid+'\');">'+myGetValue('filesourcename'+n)+'('+myGetValue('filesizedesc'+n)+')</a></td>';
				str+='</center></tr></table>';
				*/
			}else{  //只显示预览和文档名称大小
				str='<table border="0" width="232px" height="44px" cellspacing="0px" cellpadding="2px"><tr width="100%">';
				str+='<center>';
				if (pdffilename!=''){
					str+='<td><a href="javascript:myReadAttachment('+n+',\''+tabpanel+'\');">';
					str+='<img src="system/images/'+playicon+'" height="24px" width="24px" style="margin:0px 0px 0px 0px;"/></a></td>';
				}
				str+='<td><a href="javascript:myDownLoadFile(\''+fileid+'\');" style="margin:0px 0px 0px 4px;">';
				str+=result[n-1].filesourcename+'('+result[n-1].filesizedesc+')</a></td>';
				str+='<td><a href="javascript:myMailFile(\''+fileid+'\');">';
				str+='<img src="system/images/mail48.png" height="24px" width="24px" /></a></td>';
				str+='</center></tr></table>';
			}
			$('#filediv'+n).append($(str));
		}
		$("#"+panel).attr("filecount",result.length);  
		$("#"+panel).attr("targetname",f);  
		$("#"+panel).attr("filename",f1);
		$("#"+panel).attr("filetitle",f2);
	}
	$('#'+parent).layout('resize');  //必须加

}

function myDownLoadFile(fileid){
	var url=$('#'+fileid).attr('xfileosname'); 
	var target=$('#'+fileid).attr('xfilesourcename');
	if (target=='') target='无命名'+url.substring(url.lastIndexOf('.'));
	window.location.href='system//easyui_fileDownLoad.jsp?source='+url+'&target='+target;
	myDownLoadEvent(fileid);
}
	
function myMailFile(fileid){
	var filename=$('#'+fileid).attr('xfileosname'); 
	var subject=$('#'+fileid).attr('xfilesourcename'); 
	var content="邮件来自melab.zstu.edu.cn";
	var email='zxywolf@126.com';
	var filedesc=myGetValue('filesourcename'+n);
	//sys.emailsender='melabcenter@163.com';
	//sys.emailpassword='melabcenter0554';
	mySendEmail(sys.emailsender,sys.emailpassword,email,subject,content,filename,filedesc);		
}

function myDownLoadAll(panel){  //打包下载全部附件
	var n=$("#"+panel).attr("filecount");
	if (n>1){ //打包压缩
		var f1=$("#"+panel).attr("targetname");;
		var f2=$("#"+panel).attr("filename");
		var f3=$("#"+panel).attr("filetitle");
		myDownLoadZipFiles(f1,f2,f3);
	}else{
		var url=$('#filediv1').attr('xfileosname');  //取第一个附件下载
		var target=$('#filediv1').attr('xfilesourcename');
		if (url!=undefined) window.location.href='system//easyui_fileDownLoad.jsp?source='+url+'&target='+target;
	}
}

function myReadAttachment(n,pdftab){ //阅读预览附件
	//var str="<embed id='book_pdf' width='100%' height='100%' src='mybase/test1.pdf#page="+(i++)+"' />";
	//$("#content").html(str);	
	//<a href="mypdffile.pdf#page=9">Jump to page 9</a>
	//data="mypdffile.pdf#navpanes=0&scrollbar=0&toolbar=0&zoom=100
	//$("#"+tabpanel).css({overflow:'hidden'});
	if ($('#myimagebar').length==0){  //创建图形工具条：旋转、放大、缩小
		str='<div id="myimagebar" class="zoomimgvbar" style="padding: 15px 0px 0px 2px;">';
		str+='<img src="system/images/rotate_img.png" title="旋转" id="myimagerotate" width="48px" height="48px">';
		str+='<img src="system/images/zoom_inimg.png" title="放大" id="myimagezoomin" width="48px" height="48px">';
		str+='<img src="system/images/zoom_outimg.png" title="缩小" id="myimagezoomout" width="48px" height="48px">';
		str+='</div>';
		$('#'+pdftab).append($(str)); //选项卡中添加工具栏，位置固定（css样式文件中确定class）
		$("#myimagerotate").attr('xtabs', pdftab);
		$("#myimagezoomin").attr('xtabs', pdftab);
		$("#myimagezoomout").attr('xtabs', pdftab);
		//事件定义
		$("#myimagerotate").click(function(e){ //图形旋转
			var pdftab=$(this).attr('xtabs');  //选项卡所在的tabs
			var tab = $('#'+pdftab).tabs('getSelected');
			//var index=$('#'+pdftab).tabs('getTabIndex',tab);
			id=tab.attr('xchild'); //找到选项卡对应的图片附件文件名称，xchild为这个按钮对应的图片文件
			myRotate(id, 90);  //每次转90度			
		});
		$("#myimagezoomout").click(function(e){ //图片缩小
			var pdftab=$(this).attr('xtabs');
			var tab = $('#'+pdftab).tabs('getSelected');
			id=tab.attr('xchild'); //在选项卡产生时，记录它所显示的文件
			myZoomObject(id, 0.9);  //每次缩小10%			
		});
		$("#myimagezoomin").click(function(e){  //图片放大
			var pdftab=$(this).attr('xtabs');
			var tab = $('#'+pdftab).tabs('getSelected');
			id=tab.attr('xchild');
			myZoomObject(id, 1.1);  //每次放大10%			
		});
	}	
	var file=$('#filediv'+n).attr('xfileosname');
	var title=$('#filediv'+n).attr('xfilesourcename');
	if (byteLength(title)>50) title=byteSubstr(title,0,50)+'…'; //取前面50个字符，汉字算2个字符
	var tabno=-1;
	if (file!=''){
		var message='';
		var fileext=file.substr(file.lastIndexOf('.')+1,255).toLowerCase();
		if (fileext=='doc' || fileext=='docx' || fileext=='ppt' || fileext=='pptx'){
			pdffile=file.substr(0,file.lastIndexOf('.')).toLowerCase()+'.pdf';
			if (myDoFiles('exist',file)==0){
				message=myOfficeToPdf(file, pdffile);
				if (message==''){
					fileext='pdf';
					file=pdffile;
					myMessageShow('PDF文件已经转换成功！');
				}else{
					fileext='';
				}
			}else{
				file=pdffile;
				fileext='pdf';
			}
			title=title.substring(0,title.lastIndexOf('.'));
		}
		if ((';pdf;swf;mp3;wav;mp4;jpg;jpeg;gif;tif;tiff;png;').indexOf(';'+fileext+';')>=0){
			var tabs=$('#'+pdftab).tabs('tabs');
			var flag=0;
			for (var i=1;i<tabs.length;i++){ //循环查找有没有选项卡已经显示了当前文件
				var xtab=$('#'+pdftab).tabs('getTab',i);
				if (xtab.attr('xfilename')==file){
					if (xtab.attr('xfilename')==file){
						flag=i;
						break;
					};
				}
			}
			$('#'+pdftab).tabs({fit:true});  //显示附件的选项卡，为自动高度和宽度。本设置不能放到主程序里去
			if (flag==0){  //新增一页
				tabno=tabs.length;
				$('#'+pdftab).tabs('add',{
					title: title,
					closable: true,
					selected: true
				});
				var xtab = $('#'+pdftab).tabs('getSelected');
				xtab.css({overflow:'hidden'});
				xtab.attr('xindex',n); //自定义属性，记录附件序号，防止重复预览
				xtab.attr('xfilename',file);  //自定义属性记录文件名
				xtab.attr('xfiletitle',title);
			}else{  //原来页已经存在
				tabno=flag;
				$('#'+pdftab).tabs('select',flag);
			}
			tabno++;
			if (fileext=='mp3' || fileext=='wav'){  //mp3播放器
				if (flag==0){
					var str='<audio id="mydoc'+tabno+'" src="'+file+'" controls="controls" autoplay="autoplay" preload="auto"\n'; 
					str+='style="position:absolute; top:60px; left:40px; width:600px;">\n'; 
					str+='</audio>';	
					xtab.append($(str));
					xtab.attr('xchild','mydoc'+tabno);  //记录容器内控件名称
					xtab.attr('xchildtype','audio');
				}	
				var audio1=document.getElementById('mydoc'+tabno);
				audio1.currentTime=0;
				var posbegin=$('#'+pdftab).attr('xposbegin');
				if (posbegin!=undefined && posbegin>0) audio1.currentTime=posbegin; 
				/*
				if (isPlaying(audio1)){
					audio1.pause();
				}else{
					audio1.play();
				}
				*/
			}else if (fileext=='mp4' || fileext=='avi'){  //视频播放器
				if (flag==0){
					var str='<video id="mydoc'+tabno+'" src="'+file+'" controls="controls" autoplay="autoplay" preload="auto"\n';
					str+="type='video/"+fileext+"; codecs=\"avc1.42E01E, mp4a.40.2\"'\n";
					str+='style="position:absolute; top:60px; left:40px; height:100%; width:100%;">\n'; 
					str+='</video>';	
					xtab.append($(str));
					//$('#mydoc'+tabno).media({width:'100%',autoplay: true});
					xtab.attr('xchild','mydoc'+tabno);  //记录容器内控件名称
					xtab.attr('xchildtype','video');
				}	
				var video1=document.getElementById('mydoc'+tabno);
				video1.currentTime=0;
				var posbegin=$('#'+pdftab).attr('xposbegin');
				if (posbegin!=undefined && posbegin>0) video1.currentTime=posbegin; 
				/*
				if (isPlaying(audio1)){
					audio1.pause();
				}else{
					audio1.play();
				}
				*/
			}else if ((';jpg;jpeg;gif;tif;tiff;png;').indexOf(';'+fileext+';')>=0){
				if (flag==0){
					document.getElementById("myimagebar").style.display="";  //显示工具条，只有图片时才显示
					var h=xtab.height();
					var w=xtab.width()-60;
					var hw=myResizeImage('mydoc'+tabno, file, 0, w);
					var str='';
					var xtab = $('#'+pdftab).tabs('getSelected');
					str='<div><object id="mydoc'+tabno+'" data="'+file+'" controls="controls" autoplay="autoplay" preload="auto" width="'+hw.width+'" height="'+hw.height+'"></object></div>';
					xtab.append($(str));
					xtab.css({overflow:'auto'}); //显示滚动条
					xtab.attr('xchild','mydoc'+tabno);  //记录容器内控件名称
					xtab.attr('xchildtype','image');
					$("#mydoc"+tabno).attr('xtype','image');  //原始显示大小比例
					$("#mydoc"+tabno).attr('xrotate',0);  //原始旋转角度为0
					$("#mydoc"+tabno).attr('xratio',1);  //原始显示大小比例
					//$("#mydoc"+tabno).attr('xwidth', w);  //在myResizeImage已经设置
					//$("#mydoc"+tabno).attr('xheight', 0);  //在myResizeImage已经设置
					$("#mydoc"+tabno).bind('mousewheel',function(e){
						deltay=e.originalEvent.deltaY;
						if (deltay<0) var ratio=1.1;
						else if (deltay>0) var ratio=0.9;
						else var ratio=1;
						myZoomObject('mydoc'+tabno,ratio);						
					});
					//document.getElementById("refresh").onclick = function(){
						//alert("刷新");
					//}					
					/*
					if ($('#myImageMenu').length==0){
						myMenuItem('myImageMenu','下载/myimagedownload/downloadIcon;-;旋转/myimagerotate/rotateIcon;-;放大/myimagezoomin/zoominIcon;-;缩小/myimagezoomout/zoomoutIcon','');
						//下载/myimagedownload/downloadIcon;-;旋转/myimagerotate/rotateIcon;-;放大/myimagezoomin/zoominIcon;-;缩小/myimagezoomout/zoomoutIcon
						$("#myimagerotate1").click(function(e){
							var id=$('#myImageMenu').attr('xchild');
							myRotate(id,90);  //每次转90度			
						});
						$("#myimagezoomin1").click(function(e){
							var id=$('#myImageMenu').attr('xchild');
							myZoomObject('mydoc'+tabno,1.1);  //每次放大10%			
						});
						$("#myimagezoomout1").click(function(e){
							var id=$('#myImageMenu').attr('xchild');
							myZoomObject('mydoc'+tabno,0.9);  //每次缩小10%			
						});
					}
					$("#mydoc"+tabno).bind('contextmenu',function(e){
						e.preventDefault();
						//必须记录右键菜单所对应的对象
						$('#myImageMenu').attr('xchild','mydoc'+tabno); 
						$('#myImageMenu').menu('show', {
							left: e.pageX,
							top: e.pageY
						});
					});
					*/
				}
			}else if (fileext=='pdf' || fileext=='swf'){
				var posbegin=$('#'+pdftab).attr('xposbegin');
				var posend=$('#'+pdftab).attr('xposend');
				if (posbegin==undefined) posbegin=0;
				if (posend==undefined) posend=0;
				if (posbegin>1  || posend>0){
					file=mySplitPdf(file, posbegin, posend);
				}
				posbegin=1;
				if ($('#mydoc'+tabno).length>0) $('#mydoc'+tabno).remove();
				//h5 object
				var str='<object id="mydoc'+tabno+'" quality="high" data="'+file+'#';
				if (posbegin>0) str+='page='+posbegin+'&';
				str+='navpanes=0&scrollbar=0&toolbar=0&zoom=100" application/';
				if (fileext=='swf') str+='x-shockwave-flash';
				else if (fileext=='pdf') str+='pdf';
				str+=' width="100%" height="100%" ></object>\n';
				//jquery media. chrome游览器中启用chrome psd viewer，否则只会下载，不能预览
				str='<iframe class="media" id="mydoc'+tabno+'" href="'+file+'#';
				if (posbegin>0) str+='page='+posbegin+'&';
				str+='navpanes=1&scrollbar=1&toolbar=0&zoom=100" ';
				str+='style="position:absolute; overflow:auto;" ';
				str+='></iframe>';
				xtab.append($(str));
				var h=$('#'+pdftab).get(0).offsetHeight;
				$('#mydoc'+tabno).media({width:'100%', height:h-32, autoplay: true});
				xtab.attr('xchild','mydoc'+tabno);  //记录容器内控件名称
				xtab.attr('xchildtype','pdf');	
				xtab.attr('xchildtype',fileext);				
			}	
		}
	}
}

function myDeleteAttachment(n){
	var f1=$('#filediv'+n).attr('xfileosname');
	var f2=f1.substring(0,f1.lastIndexOf('.'))+'.pdf';
	if (("#_deletedfiles").length==0){
		myHiddenFields("_deletedfiles");
		mySetValue('_deletedfiles','');
	}
	var v=myGetValue('_deletedfiles');
	mySetValue('_deletedfiles',v+'	'+f1+'	'+f2); //记录要删除的附件文件，tab键分割
	$('#filediv'+n).remove();
	$("#fileosname"+n).val('');  //设置fileosename为空
}


function mySplitPdf(filename,pagestart,pageend){  //按页码分隔pdf
	var result='';
	$.ajax({
		url: "system//easyui_splitPdfFile.jsp",
		data: { inFile:myToXcode(filename), pageStart:pagestart, pageEnd:pageend }, 
		async: false, method: 'post',						    
		success: function(data) {
			eval("result="+data);
			console.log(result);
		}    
	});
	return result.pdffile;
}

//fffffffffffff???????
function myFileupLoad(id, targetpath, targetname){  //下载多个文件
	if (filetype==undefined) var filetype='';
	//myDirectory('create',targetpath);  //创建目录	
	var data={};
	var btnid=id+'button';
	var winid=id+'window';
	var barid=id+'bar';
	var filename=$("#"+id).val();  //myGetValue(id)  //filefield
	var filetag=$('#'+id).attr('xuploadfiletag');
	var filetype=$('#'+id).attr('xuploadfiletype');	
	var fileext=filename.substring(filename.lastIndexOf(".")+1,255).toLowerCase();//文件扩展名
	if (filetype!='' && (';'+filetype+';').indexOf(';'+fileext+';')<0){
		data={"error":"文件类型错误，上传失败！"};
		var msg=filetype.replaceAll(';',',');  //;为回车符代号
		myMessage('文件扩展名限于：'+msg+'@n文件类型错误，上传失败！','info');
		myClearFileField(id); //清空file选择框,onchange事件失效
		myFileFieldChange(id); //清空file选择框,onchange事件失效
	}else{
		$("#"+winid).window('open');
		$("#"+barid).progressbar('setValue',0);
		//var fileObj = $("#"+id)[0].files[0]; // 获取文件对象
		var fileObj = document.getElementById(id).files[0];
		var form = new FormData();  // FormData 对象
		form.append("file", fileObj);// 文件对象
		var xhr = new XMLHttpRequest(); //XMLHttpRequest 对象
		xhr.open("post", "system//easyui_fileUpLoad.jsp?targetname="+targetname+"&targetpath="+targetpath, true);
		xhr.onload = function () {
			if (xhr.status == 200){
				data = JSON.parse(xhr.responseText);
				$("#"+id).attr('xerror',data.error);  
				if (data.error==''){  //附件上传成功
					$("#"+id).attr('xfilesize',data.filesize);  
					$("#"+id).attr('xfilesizedesc',data.filesizedesc);
					$("#"+id).attr('xfileosname',data.fileosname);  
					$("#"+id).attr('xfilesourcename',data.filesourcename);
					$("#"+id).attr('xtargetfile',data.targetfile);  
					$("#"+id).attr('xtargetpath',data.targetpath);  
					$("#"+id).attr('xfileext',data.fileext);
					$("#"+id).attr('xuploaddate',myLocalTime().datetime);
					$("#"+id).attr('xuploadtime',myLocalTime().datetime);
					$("#"+id).attr('xuploadfiletag', filetag);
					$("#"+id).attr('xuploadfilepath', targetpath);
					$("#"+id).attr('xuploadfiletype', filetype);
					xtarget=$('#'+id).attr('xtarget'); //target非空时显示对应的图片文件
					if (xtarget!=undefined && xtarget!=''){
						f=data.fileosname+'?timestemp='+new Date().getTime();
						$('#'+xtarget).attr('src', f);
						myResizeImage(xtarget, f, $('#'+xtarget).attr('xheight'), $('#'+xtarget).attr('xwidth'));
					}
					//myMessageShow('文件已经上传成功！');
					//$("#"+btnid).linkbutton('disable');
					var file1=data.fileosname;
					var file2=file1.substring(0,file1.lastIndexOf("."))+".pdf";
					var fileext=file1.substring(file1.lastIndexOf(".")+1,255).toLowerCase();//文件扩展名
					//if (fileext=="doc" || fileext=="docx" || fileext=="xls" || fileext=="xlsx" || fileext=="ppt" || fileext=="pptx"){
					if (fileext=="doc" || fileext=="docx" || fileext=="ppt" || fileext=="pptx"){
						$("#"+winid).window('setTitle','正在转换PDF文件...');
						s=myOfficeToPdf(file1,file2);  
					}	
					myMessageShow('文件已经上传成功！');
					$("#"+btnid).linkbutton('disable');
				}else{
					myMessage('文件上传失败！','error');
				}
				myClearFileField(id); //清空file选择框,onchange事件失效
				myFileFieldChange(id); //清空file选择框,onchange事件失效
				myFileEvents(id,'upload');  //执行上传之后的补充动作
			}
			$("#"+winid).window('close');
		};		
		//侦查当前附件上传情况
		xhr.upload.onprogress = function(evt) {
			loaded = evt.loaded;
			tot = evt.total;
			per = Math.floor(100.00 * loaded / tot); //已经上传的百分比
			//$("#bar"+id).css("width", per+"%");
			$("#"+id+"bar").progressbar('setValue', per);
		};		
		xhr.send(form);
	}	
	return data;
}

function myHref(v){
	myhref(v);
}

function myhref(v){
	//myhref(id,parent,label,top,left,height,width,url,style){
	if (v instanceof Array){//判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.top=v[3];
		p.left=v[4];
		p.height=v[5];
		if (v.length>6) p.width=v[6];
		if (v.length>7) p.url=v[7];
		if (v.length>8) p.style=v[8];
	}else{
		var p=v;
	}
	if (p.style!=undefined) p.style=';'+p.style+';';
	else p.style='';
	var target='';
	if (p.url=='') p.url='#';
	if (p.style.indexOf(";blank;")>=0) target='_blank';
	var str='<div id="'+p.id+'_div" style="position:absolute">';
	if (p.style.indexOf(';[')>=0) str+='【';
	str+='<a id="'+p.id+'" href="'+p.url+'" target="'+target+'" >'+p.label+'</a>';
	if (p.style.indexOf('];')>=0) str+='】';
	str+='</div>';
	$("#"+p.parent).append($(str));
	$("#"+p.id+"_div").css(myTextCss(p.parent, p.top, p.left, p.height, p.width));
	$("#"+p.id+"_div").css({"font-size":syslabel.fontsize});
}

//ttttttttree
function myDBTree(pmyTree1){
	//style可能的选项：checkbox;animate;lien;edit;full;menu:
	if (pmyTree1.filtersql==undefined) pmyTree1.filtersql='';
	if (pmyTree1.root==undefined) pmyTree1.root='';
	if (pmyTree1.title==undefined) pmyTree1.title='';
	if (pmyTree1.menu==undefined) pmyTree1.menu='';
	if (pmyTree1.treeclass==undefined) pmyTree1.treeclass='tree';
	if (pmyTree1.iconcls==undefined) pmyTree1.iconcls='';
	if (pmyTree1.top==undefined) pmyTree1.top=0;
	if (pmyTree1.left==undefined) pmyTree1.left=0;
	if (pmyTree1.style==undefined) pmyTree1.style='';
	if (pmyTree1.masterfield==undefined) pmyTree1.masterfield='';
	if (pmyTree1.keyfield==undefined) pmyTree1.keyfield='id';
	pmyTree1.style=';'+pmyTree1.style+';'
	pmyTree1.checkbox='false'; 
	pmyTree1.line='true'; 
	pmyTree1.animate='false'; 	
	pmyTree1.editable='false';
	pmyTree1.filter='false';
	pmyTree1.showstyle='';
	pmyTree1.selectednode=null;
	pmyTree1.selectonclick=false;
	pmyTree1.checkonselect=false;
	if (pmyTree1.style.indexOf(';editable;')>=0) pmyTree1.editable='true';
	if (pmyTree1.style.indexOf(';filter;')>=0) pmyTree1.filter='true';
	if (pmyTree1.style.indexOf(';full;')>=0) pmyTree1.showstyle='full';
	if (pmyTree1.style.indexOf(';checkbox;')>=0) pmyTree1.checkbox='true';
	if (pmyTree1.style.indexOf(';noline;')>=0) pmyTree1.line='false';
	if (pmyTree1.style.indexOf(';animate;')>=0) pmyTree1.animate='true';
	if (pmyTree1.style.indexOf(';selectonclick;')>=0) pmyTree1.selectonclick=true;
	if (pmyTree1.style.indexOf(';checkonselect;')>=0) pmyTree1.checkonselect=true;
	var str='';
	if (pmyTree1.parent=='') pmyTree1.parent='main';
	str+='<div id="'+pmyTree1.id+'" style="overflow:auto; padding:'+pmyTree1.top+'px 0px '+pmyTree1.top+'px '+pmyTree1.left+'px;" class="easyui-tree" data-options="animate:'+pmyTree1.animate+', checkbox:'+pmyTree1.checkbox+', lines:'+pmyTree1.line;
	if (pmyTree1.editable=='true'){
		str+=',onClick: function(node){ $(this).tree(\'beginEdit\',node.target);}';
	}	
	str+='"></div>';
	$("#"+pmyTree1.parent).append($(str));
	var h=$("#"+pmyTree1.parent).height()*1;
	var w=$("#"+pmyTree1.parent).width()*1;
	$("#"+pmyTree1.id).css({height:'100%'});
	$("#"+pmyTree1.id).css({width:'100%'});
	//if (pmyTree1.height>0) $("#"+id).css({ height: pmyTree1.height });
	//else $("#"+pmyTree1.id).css({ height: '100%' });
	//if (pmyTree1.width>0) $("#"+pmyTree1.id).css({width: pmyTree1.width});
	//else $("#"+pmyTree1.id).css({width: '100%'});
	$("#"+pmyTree1.id).attr('xnodeindex',pmyTree1.nodeindex);  //自定义属性，记录基本的sql语句
	$("#"+pmyTree1.id).attr('xtype','tree');  //自定义属性，记录基类型
	$("#"+pmyTree1.id).attr('xparent',pmyTree1.parent);  //自定义属性
	$("#"+pmyTree1.id).attr('xtitle',pmyTree1.title);  //自定义属性
	$("#"+pmyTree1.id).attr('xid',pmyTree1.id);  //自定义属性
	$('#'+pmyTree1.id).tree();
	//调整宽度和设置标题
	if (pmyTree1.title!='') $("#"+pmyTree1.parent).panel({ title:pmyTree1.title });
	if (pmyTree1.width>0){
		xparents=$('#'+pmyTree1.parent).parents().parents('div');
		layoutflag=-1;
		for (i=0; i<xparents.length; i++){
			classname=xparents[i].className.toLowerCase();
			if (classname.indexOf('easyui-layout')>=0){
				layoutflag=1;
				break;
			}
		}
		if (layoutflag==1 && i<xparents.length-1) parentpanel=xparents[i+1].id;
		else parentpanel=pmyTree1.parent;
		$('#'+parentpanel).panel('resize',{ width:pmyTree1.width*1 });
		$('#'+parentpanel).panel('doLayout');  //重新调整其中元素的大小
		//重新调整其中元素的大小，下列语句必须加！
		if (xparents.length>0) $('#'+xparents[xparents.length-1].id).layout('resize');
		else $('#main').layout('resize');
	}
	if (pmyTree1.loaddataflag==undefined || pmyTree1.loaddataflag==1){
		//是否需要在定义时也从数据库中取数据
		pmyTree1=myRefreshTreeData(pmyTree1);
	}
	$("#"+pmyTree1.id).tree('collapseAll');
	$('#'+pmyTree1.id).tree({  //双击展开或收缩结点
		 onDblClick: function(node){
			if ($(this).tree('isLeaf',node.target)){
				 if (pmyTree1.checkbox=='true'){//选择复选框
					 if (node.checkState=='checked') $(this).tree('uncheck', node.target);
					 else $(this).tree('check', node.target);
				 }else{
					 myTreeEvents(pmyTree1.id,'ondblclick',node);
				 }
			}else{ //展开父节点
				if (node.state=='closed') $(this).tree('expand', node.target);
				else $(this).tree('collapse', node.target);
			}
			//myTreeEvents(pmyTree1.id,'ondblclick',node);
		},
		 onSelect: function(node){
		 	pmyTree1.selectednode=node;
		 	if (pmyTree1.checkonselect && pmyTree1.checkbox=='true') $(this).tree('check', node.target);  
			myTreeEvents(pmyTree1.id,'onselect',node);
		},
		filter: function(q, node){  //过滤，按助记码过滤
			var xtext=node.text.toLowerCase();
			var qtext=q.toLowerCase();
			//console.log(myGetMemoCode(xtext));
			var flag1=xtext.indexOf(qtext) >= 0;
			var flag2=myGetMemoCode(xtext).indexOf(qtext) >= 0;  //助记码
			//返回过滤后的第一个节点，以便选中
			if (flag1+flag2 && pmyTree1.selectednode==null) pmyTree1.selectednode=node;
			return flag1+flag2;
		}
	});
	//选中第一个结点
	var item = $('#'+pmyTree1.id).tree('getRoot');
	if (item!=null){
		if (item.children) $("#"+pmyTree1.id).tree('expand', item.target);
		$("#"+pmyTree1.id).tree('select', item.target);
	}
	//var jsondata=JSON.stringify(pmyTree1.data);
	if (pmyTree1.menu!=undefined && pmyTree1.menu!=''){
		$('#'+pmyTree1.id).tree({
			onContextMenu: function(e, node){
				e.preventDefault();
				if (pmyTree1.selectonclick) $('#'+pmyTree1.id).tree('select',node.target);
				$('#'+pmyTree1.menu).menu('show', {
					left: e.pageX,
					top: e.pageY
				});
			}
		});	
	}
	//节点过滤条的设计
	if (pmyTree1.filterpanel!=undefined && pmyTree1.filterpanel!=''){
		if (pmyTree1.label!=undefined) label=pmyTree1.label;
		else label='';
		//添加过滤文本输入框
		myTextField([pmyTree1.filtertextfield, pmyTree1.filterpanel, '', 0, 3, 0, 0, 150]);
		$('#'+pmyTree1.filtertextfield).attr('xfiltertree',pmyTree1.id); //记录过滤是的对象，默认只有一颗树，但也可以为多颗树过滤
		xparents=$('#'+pmyTree1.parent).parents().parents('div');
		layoutflag=-1;
		for (i=0; i<xparents.length; i++){
			classname=xparents[i].className.toLowerCase();
			if (classname.indexOf('easyui-layout')>=0){
				layoutflag=1;
				break;
			}
		}
		if (layoutflag==1 && i<xparents.length-1) panelparent=xparents[i+1].id;
		else panelparent='main';
		$('#'+panelparent).attr('xresizewidth',i)
		//alert($('#'+panelparent).width()+'-----'+panelparent+'----'+i);
		//$('#'+pmyTree1.filtertextfield+'_div').css({ width:$('#'+panelparent).width()-10 });
		//面板拉动resize事件
		$('#'+panelparent).panel({
			onResize:function(w,h){
				delta=$(this).attr('xresizewidth');
				$('#'+pmyTree1.filtertextfield+'_div').css({width:w-17+1*delta});  //修改过滤文本框的宽度
			}
		});
		$('#'+panelparent).panel('resize');  //重新调整其中元素的大小		
		$('#'+panelparent).panel('doLayout');  //重新调整其中元素的大小		
		$('#'+pmyTree1.filtertextfield).textbox({
			buttonIcon:'locateIcon',
			onChange:function(v1){
        		treeid=$(this).attr('xfiltertree'); //要过滤是的对象，默认只有一颗树，但也可以为多颗树过滤
            	console.log('treeid',treeid);
        		if (treeid!=undefined){
        			myFilterTree(treeid, v1);
        		}
			},
            onClickButton: function(e){
            	var id=$(this).context.id; 
        		var treeid=$(this).attr('xfiltertree'); //要过滤是的对象，默认只有一颗树，但也可以为多颗树过滤
        		if (treeid!=undefined){
        			myFilterTree(treeid, myGetValue(id));
        		}
            }
		});
	}
	return pmyTree1;
}

function myRefreshTreeData(pmyTree1){
	var source=myLoadTreeData(pmyTree1);
	//console.log(source);
	pmyTree1.data=JSON.stringify(source);  //转成字符型，否则长度会变
	if (pmyTree1.treeclass!=undefined && pmyTree1.treeclass=='treegrid'){
		if (pmyTree1.root!=undefined && pmyTree1.root!=''){
			var root=$('#'+pmyTree1.id).treegrid('getRoot');
			if (root!=null){
				 $('#'+pmyTree1.id).treegrid('remove',root.target);
			}
			$('#'+pmyTree1.id).treegrid('append',{
				parent:null,
				data: [{id:'*',text:pmyTree1.root,parentnodeid:'',isparentflag:'1',level:'0',ancester:'',sysid:'0'}]
			});			
			var root=$('#'+pmyTree1.id).treegrid('getRoot');
			$('#'+pmyTree1.id).treegrid('append',{
				parent:root.target,
				data: source
			});
		}else{
			$('#'+pmyTree1.id).treegrid({ data: source });
		}		
	}else{
		if (pmyTree1.root!=undefined && pmyTree1.root!=''){
			var root=$('#'+pmyTree1.id).tree('getRoot');
			if (root!=null){
				 $('#'+pmyTree1.id).tree('remove',root.target);
			}
			$('#'+pmyTree1.id).tree('append',{
				parent:null,
				data: [{id:'*',level:'0',text:pmyTree1.root,parentnodeid:'',isparentflag:'1',ancester:''}]
			});
			var root=$('#'+pmyTree1.id).tree('getRoot');
			$('#'+pmyTree1.id).tree('append',{
				parent:root.target,
				data: source
			});
		}else{
			$('#'+pmyTree1.id).tree({ data: source });
		}
	}	
	return (pmyTree1);
}

//加载树结点，分两种模式
function myLoadTreeData(pmyTree1){
	var source=[];
	valuelist=myGetSqlParamValues(pmyTree1.params);
	/*
	//console.log(pmyTree1.params+'----'+myGetValue('pkid'));
	valuelist='';
	if (pmyTree1.params!=undefined){
		paramdim=pmyTree1.params.split(';'); 
		for (i=0; i<paramdim.length; i++){
			if (i>0) valuelist+='	'; //tab
			valuelist+=myGetValue(paramdim[i]);
		}
	}
	*/
	if (pmyTree1.showstyle!='full'){ //逐级展开,子节点的id值为‘*’+父节点值
		$("#"+pmyTree1.id).tree({
			onBeforeExpand: function (node){  //点击展开事件
				var pid=node.id;
				if (pid=='*') pid='';  //根节点展开
				var child_node = $('#'+pmyTree1.id).tree('getChildren', node.target);
				if ((child_node.length==1 && child_node[0].id=='_'+pid)||(child_node[0].id=='#')){ //生成子节点
					//xsql="select * from ("+pmyTree1.sql+") as p where parentnodeid='"+pid+"'";
					filtersql="parentnodeid='"+pid+"'";
					$.ajax({
						url: "system//easyui_getChildNodes.jsp",
						data: { nodeindex:pmyTree1.nodeindex, filtersql:filtersql, style:pmyTree1.showstyle, valuelist:valuelist }, 
						async: false, method: 'post',						    
						success: function(data) {
							source=eval(data);
							$('#'+pmyTree1.id).tree('remove', child_node[0].target); //删除子节点
							$('#'+pmyTree1.id).tree('append', {  //增加数据作为子节点
								parent: node.target,
								data: source 
							});
						}    
					});
				};
				myTreeEvents(pmyTree1.id,'onBeforeExpand',node);
			}
		});		
	}//if 'full'判断结束
	source=[];  
	if (pmyTree1.showstyle=='full'){ //一次性全部获取
		$.ajax({
			url: "system//easyui_getAllTreeNodes.jsp",
			data: { nodeindex:pmyTree1.nodeindex, filtersql:pmyTree1.filtersql, iconcls:pmyTree1.iconcls, valuelist:valuelist }, 
			async: false, method:'post',
			success: function(data) {
				//console.log(data);
				source=eval(data);
			}    
		});
	}else{  
		//分层展开结点
		filtersql="parentnodeid=''";  //第一层
		$.ajax({
			url: "system//easyui_getChildNodes.jsp",
			data: { nodeindex:pmyTree1.nodeindex, filtersql:filtersql, style:pmyTree1.showstyle, valuelist:valuelist }, 
			async: false, method: 'post',						    
			success: function(data) {
				source=eval(data);
			}    
		});
		//$("#"+id).tree('collapseAll');
	}
	return source; 
}	

//树节点过滤
function myFilterTree(id, str){
	var node=$('#'+id).tree('getSelected');
	//pmyTree1.selectednode=null;
	$('#'+id).tree('doFilter', str);
	//var node=pmyTree1.selectednode;
	if (node!=null){
    	cnode=$('#'+id).tree('find', node.id);
    	$('#'+id).tree('select', cnode.target);
	}
	return node;
}	

//加载树结点，分两种模式
function myLoadComboTreeData(id,sql,filtersql,style){
	valuelist=myGetSqlParamValues(pmyTree1.params);
	if ((';'+style+';').indexOf(';full;')<0){ //逐级展开
		$("#"+id).combotree({
			onBeforeExpand: function (node){  //点击展开事件
				var pid=eval("node."+keyfield);
				//var sql=$('#'+id).attr('xsql');
				var xcbtree=$('#'+id).combotree('tree');
				var child_node = xcbtree.tree('getChildren', node.target);
				if (child_node.length==1 && child_node[0].id=='_'+pid){ //生成子节点
					xfiltersql="parentnodeid='"+pid+"'";
					$.ajax({
						url: "system/easyui_getChildNodes.jsp",  //
						data: { selectsql:pmyTree1.sql, filtersql:xfiltersql, style:pmyTree1.showstyle, valuelist:valuelist}, 
						async: false, method: 'post',						    
						success: function(data) {
							var source=eval(data);
							xcbtree.tree('remove', child_node[0].target); //删除子节点
							xcbtree.tree('append', {  //增加数据作为子节点
								parent: node.target,
								data: source 
							});
						}    
					});
				};
			}
		});		
	}//if 'full'判断结束
	
	//var cbtree=$('#'+id).combotree('tree');	
	var source=[];  
	if ((';'+style+';').indexOf(';full;')>=0){ //一次性全部获取
		$.ajax({
			url: "system/easyui_getAllTreeNodes.jsp",
			data: { selectsql:sql, filtersql:filtersql, iconcls:pmyTree1.iconcls, valuelist:valuelist }, 
			async: false, method: 'post',    
			success: function(data) {
				source=eval(data);
				//$('#'+id).tree({ data: source });
			}    
		});
		//$("#"+id).tree('collapseAll');
	}else{  
		//分层展开结点
		xfiltersql="parentnodeid=''";  //第一层
		$.ajax({
			url: "system/easyui_getChildNodes.jsp", //
			data: { selectsql:pmyTree1.sql, filtersql:xfiltersql, style:pmyTree1.showstyle, valuelist:valuelist }, 
			async: false, method: 'post',						    
			success: function(data) {
				source=eval(data);
				//$('#'+id).tree({ data: source });  //加载json数据到树
			}    
		});
		//cbtree.tree('collapseAll');
	}
	return source; 
}	

function myGetAllNodes(pmyTree1){
	var rs=[];
	if (pmyTree1.treeclass=='tree'){
		var roots=$('#'+pmyTree1.id).tree('getRoots');
		var nd;
		var rs=[];
		for (var i=0; i<roots.length; i++){
			rs.push(roots[i]);
			nd=$('#'+pmyTree1.id).tree('getChildren',roots[i].target);
			for (var j=0; j<nd.length; j++){
				rs.push(nd[j]);
			}
		}
	}else{
		var roots=$('#'+pmyTree1.id).treegrid('getRoots');
		var nd;
		var rs=[];
		for (var i=0; i<roots.length; i++){
			rs.push(roots[i]);
			nd=$('#'+pmyTree1.id).treegrid('getChildren',roots[i].id);
			for (var j=0; j<nd.length; j++){
				rs.push(nd[j]);
			}
		}
	}
	return rs;
}

function myDeleteAllNodes(pmyTree1){
	if (pmyTree1.treeclass=='tree'){
		var roots=$('#'+pmyTree1.id).tree('getRoots');
		for (var i=0; i<roots.length; i++){
			$('#'+pmyTree1.id).tree('remove',roots[i].target);
		}
	}else{
		var roots=$('#'+pmyTree1.id).treegrid('getRoots');
		for (var i=0; i<roots.length; i++){
			$('#'+pmyTree1.id).treegrid('remove',roots[0].id);
			//console.log(roots[i].id,roots.length);
		}
	}
}

function myFindTreeNode(treeid,node){ //查找节点的上个兄弟节点、下个兄弟节点和父节点
	var result={};
	tree1=$('#'+treeid);
	result.parentnode=tree1.tree('getParent',node.target);
	result.nextnode=null;
	result.priornode=null;
	if (result.parentnode!=null){
		cnodes=tree1.tree('getData',result.parentnode.target).children;
		var n=-1;
		for (var i=0;i<cnodes.length;i++){
			//console.log(cnodes[i].id,node.id);
			if (cnodes[i].id==node.id){
				n=i;
				break;
			}
		}
		if (n>0) result.priornode=cnodes[n-1];
		if (n<cnodes.length-1 && n>=0) result.nextnode=cnodes[n+1];
	}
	return (result);
}

function myScrolltoNode(tree1,node){  //移动树的光标到node节点
	var scrollHeight=0;
	if (node!=null){
		if (node.xnodeheight==undefined) var nodeheight=22;
		else var nodeheight=node.xnodeheight;
		var h=$('#'+tree1).height();
		var parent=$('#'+tree1).attr('xparent');
		var $targetNode = $(node.target); 
	    var nodeOffsetHeight = $targetNode.offset().top - $('#'+tree1).offset().top;  
		if (nodeOffsetHeight > (h - nodeheight)) {  
			scrollHeight =$('#'+tree1).scrollTop() + nodeOffsetHeight - h+ nodeheight;  
			//console.log(1);
			$('#'+tree1).scrollTop(scrollHeight);
			//if (parent!=undefined && parent!='') $('#'+parent).scrollTop(scrollHeight);
			//$('#'+tree1).tree('scrollTo',node.target);
		}else{
			scrollHeight =$('#'+tree1).scrollTop() + nodeOffsetHeight - h+ nodeheight;
			if (scrollHeight<0) $('#'+tree1).scrollTop(scrollHeight);
			//if (parent!=undefined && parent!='') $('#'+parent).scrollTop(scrollHeight);
			//$('#'+tree1).tree('scrollTo',node.target);
			//console.log(2);
		}
		
	}
	return scrollHeight;
}

//生成fieldset
//function myFieldset(id,parent,title,top,left,height,width){
function myFieldset(p){
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;
	var id=p.id;
	var parent=p.parent;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var title=p.title;
	var style=p.style;
	if (parent=='') parent='main';
	var str='<fieldset id="'+id+'" style="position: absolute; margin:0; padding:0; border:1px solid #B5B8C8;">';  //groove  #990033黑色 
	if (title!='') str+='<legend style="margin:0 10px; padding:0;">'+title+'</legend>';
	str+='</fieldset>';
	$("#"+parent).append($(str));
	if (top>0 && left>0) var css={margin:"0", padding:"0", position:"absolute", top:top+'px', left:left+'px', width:width, height:height, "z-index":2};
	else var css={margin:"0", padding:"0", position:"relative", width:width, height:height, "z-index":2};
	$("#"+id).css(css);
	$("#"+id).css(sys.theme);
	$("#"+id).attr('xtype', 'fieldset');  //自定义属性
	$("#"+id).attr('xparent', parent);  //自定义属性
	$("#"+id).attr('xtitle', title);  //自定义属性
	$("#"+id).attr('xid', id);  //自定义属性
	$("#"+id).attr('xdatatype', '');  //自定义属性，字段数据类型
}

//生成groupbox
function myGroupbox(id,parent,top,left,height,width,border){
	var str='';
	if (border==1) xborder=true;
	else xborder=false;
	str='<div id="'+id+'" style="position:absolute; top:'+top+'px; left:'+left+'px; padding:0px 0;border:'+xborder+' ">';
	str+='</div>';
	if (parent!=''){
		$("#"+parent).append($(str));
		$("#"+id+"").css(myTextCss(parent,top,left,height,width));
		$("#"+id).attr('xparent',parent);  //自定义属性
		$("#"+id).attr('xid',id);  //自定义属性
		$("#"+id).attr('xdatatype','');  //自定义属性，字段数据类型
	}
	return str;
}

//生成splitbutton
function mySplitButton(id,parent,text,top,left,height,width,icon,style,event){
	if (parent=='') parent='main';
	if (width==0) height=sysbutton.width;
	if (height==0) height=sysbutton.height;
	if (style!='') style=';'+style+';';
	var str='';
	if (style!=undefined && style.indexOf(';menu;')>=0) var menuflag=true;
	else var menuflag=false;
	if (style!=undefined && style.indexOf(';btnsep;')>=0){ //按钮分隔符
		str+='<a href="javascript:void(0)" id="'+id+'_sep" class="btn-separator"></a>';
	}
	str+='<a href="javascript:void(0)" id="'+id+'" class="easyui-splitbutton" style="padding:0; margin:0;"></a>';
	$("#"+parent).append($(str));
	$("#"+id).css(myTextCss(parent,top,left,height,width));
	$("#"+id).attr('xparent',parent);  //自定义属性
	$("#"+id).attr('xid',id);  //自定义属性
	if (icon!=''){
		$("#"+id).splitbutton({'iconCls': icon, iconAlign:'left'});
	}
	if (text!=''){
		$("#"+id).splitbutton({'text': text});
	} 
	if (style!=undefined && style.indexOf(';plain;')>=0){
		$("#"+id).splitbutton({'plain':true});
	}
	if (event!=undefined && event!=''){
		$('#'+id).bind('click',function(e){
			eval(event+"(e);");
		});
	}
}	

//生成linkbutton
function myButton(v){
	//myButton(id,parent,text,top,left,height,width,icon,style,event){
	if (v instanceof Array){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.text=v[2];
		p.top=v[3];
		p.left=v[4];
		p.height=v[5];
		p.width=v[6];
		if (v.length>7) p.icon=v[7];
		if (v.length>8) p.style=v[8];
		if (v.length>9) p.event=v[9];
	}else{
		var p=v;
	}
	if (p.parent=='') p.parent='main';
	if (p.width==0) p.width=sysbutton.width;
	if (p.height==0) p.height=sysbutton.height;
	if (p.style!='') p.style=';'+p.style+';';
	var str='';
	if (p.style!=undefined && p.style.indexOf(';menu;')>=0) var menuflag=true;
	else var menuflag=false;
	if (p.style!=undefined && p.style.indexOf(';btnsep;')>=0){ //按钮分隔符
		str+='<a href="javascript:void(0)" id="'+p.id+'_sep" class="btn-separator"></a>';
	}
	if (menuflag) str+='<a href="javascript:void(0)" id="'+p.id+'" class="easyui-menubutton" style="padding:0; margin:0;"></a>';
	else str+='<a href="javascript:void(0)" id="'+p.id+'" class="easyui-linkbutton" style="padding:0; margin:0;"></a>';
	$("#"+p.parent).append($(str));
	$("#"+p.id).css(myTextCss(p.parent, p.top, p.left, p.height, p.width));
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xtype','linkbutton');  //自定义属性
	if (p.icon!=''){
		align='left';
		if (menuflag) $("#"+p.id).menubutton({'iconCls':p.icon, iconAlign:align});
		else $("#"+p.id).linkbutton({'iconCls': p.icon, iconAlign:align});
	}
	if (p.text!=''){
		if (menuflag) $("#"+p.id).menubutton({'text':p.text});
		else $("#"+p.id).linkbutton({'text': p.text});
	} 
	if (p.style!=undefined && p.style.indexOf(';plain;')>=0){
		if (menuflag) $("#"+p.id).menubutton({plain:true});
		else $("#"+p.id).linkbutton({plain:true});
	}else{
		if (menuflag) $("#"+p.id).menubutton({plain:false});
		else $("#"+p.id).linkbutton({plain:false});
	}
	if (p.event!=undefined && event!=''){
		$('#'+p.id).bind('click', function(e){
			eval(p.event+"(e);");
		});
	}
}	

function myToolbar(id,parent,buttons,top,left,height,width,color){
	if (color==undefined || color=='') var color='#E0ECFF';
	if (height==0) xheight=sysbutton.height;
	else xheight=height;
	var str='<div id="'+id+'" class="easyui-panel" style="padding:'+top+'px 6px 1px '+(left+8)+'px; height:'+xheight+'px; position:relative; ';
	if (color!='') str+=' background:'+color+'; ';
	str+=' border-bottom:1px solid #B5B8C8;"></div>';  //只有地边框线
	$("#"+parent).append($(str));
	if (buttons!='') myButtonGroup(id+'_btn',id,buttons,top+4,1,height-2*top-5,width);
}	//

function myButtonGroup(id,parent,buttons,top,left,height,width){
	top=1*top; left=1*left; height=1*height; width=1*width; //数据类型转换
	//分隔线的id为id+'_sep'+k。例如:gridbtn_sep1...
	//height为竖线的高度，top为竖线的位置，按钮位置由toolbar对应的panel的padding设定，这里不设置。
	if (parent=='') parent='main';
	if (width==0) width=65;
	//所有按钮外面添加一个层panel，没有边框。
	var str='<div id="'+id+'" class="easyui-panel" style="margin 0; width:0px; border-width:0px;"></div>'; //background-color:#E0ECFF; 
	$("#"+parent).append($(str));
	$("#"+id).panel();
	if (left>0){
		str='<span style="margin:0px 0px 0px '+left+'px;"></span>';
		$("#"+id).append($(str));
	}
	var tmp=buttons.split(';');
	var k=1;
	for (var i=0; i<tmp.length; i++){
		var fields=tmp[i].split('/');
		var fid='';
		var icon='';
		var text='';
		var menu='';
		var sep='';
		var str='';
		if (fields.length>=1){
			text=fields[0];
			if (text.substring(0,1)=='|' ||text.substring(0,1)=='-'){
				sep='-';
				text=text.substring(1,1000);
			}
			if (fields.length>=2) fid=fields[1];
			if (fields.length>=3) icon=fields[2];
			if (fields.length>=4) menu=fields[3];
			if (text=='-' || text=='|' || fields.length==1){
				str='<span style="margin:0px 0px 0px 0px;"><a id="'+id+'_sep'+k+'" href="javascript:void(0)" class="btn-separator" style="';
				if (height>0) str+='height:"'+height+'px";';
				str+='"></a></span>';
				$("#"+id).append($(str));
				$("#"+id+'_sep'+k).css({position: "absolute", top:(top+4)+"px", height:height+"px"});
				k++;
			}else{
				if (sep!=''){
					str='<span style="width:'+width+'px; margin:0px 0px 0px 0px;"><a id="'+fid+'_sep" href="javascript:void(0)" class="btn-separator" style="';
					if (height>0) str+='height:"'+height+'px";';
					str+='"></a></span>';
					$("#"+id).append($(str));
					$("#"+fid+'_sep').css({position: "absolute", top:(top+4)+"px", height:(height)+"px"});
				}
				if (menu=='') str='<a href="javascript:void(0)" id="'+fid+'" class="easyui-linkbutton" data-options="plain:true';
				else str='<a href="javascript:void(0)" id="'+fid+'" class="easyui-menubutton" data-options="plain:true, menu:\'#'+menu+'\'';
				if (icon!='') str+=',iconCls:\''+icon+'\'';
				//if (height>0) str+=',height:'+height+'px;'; 
				str+='" style="margin:'+(top-1)*1+'px 0px 0px 0px;">'+text+'</a>';
				$("#"+id).append($(str));
				if (menu==''){
					$("#"+fid).linkbutton({width:width});
					$("#"+fid).attr('xtype','linkbutton');
				}else{
					$("#"+fid).menubutton({width:width+20});
					$("#"+fid).attr('xtype','menubutton');
				}
			}
		}
	}
}

//按钮、菜单分隔符
function mySep(id,parent,top,left,height,style){
	if (parent=='') parent='main';
	if (style!='') style=';'+style+';';
	var str='';
	if (style!=undefined && style.indexOf(';menu;')>=0){ //按钮分隔符
		str+='<div id="'+id+'_div"><a href="javascript:void(0)" id="'+id+'_sep" class="menu-sep" ></a></div>';
	}else{
		str+='<div style="margin:2px 0;" id="'+id+'_div"><a href="javascript:void(0)" id="'+id+'_sep" class="btn-separator" style="margin:'+top+'px 0;" ></a></div>';
	}
	$("#"+parent).append($(str));
	$("#"+id+"_div").css(myTextCss(parent,top,left,height,0));
	$("#"+id+"_sep").css({position: "absolute", height: height});;
	//$("#"+id).attr('xparent',parent);  //自定义属性
	//$("#"+id).attr('xid',id);  //自定义属性
}	

//生成表单
//function myForm(id,parent,title,top,left,height,width,style){
function myForm(p){
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;
	var id=p.id;
	var parent=p.parent;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var title=p.title;
	var style=p.style;
	//
	if (parent=='') parent='main';
	//窗体底部空4px,
    if (parent=='main' && (width<=0 || height<=0)){
   		$("#main").removeClass();
		$("#main").addClass('easyui-layout');
		$("#main").panel({'fit':true});
	}
    if (style==undefined) style='';
    var xmargin='';
    if (top!=0){
    	xmargin+='<div style="margin:';
    	xmargin+=top+'px';
    	xmargin+=' 0px 0px 0px;"></div>';
    }
    /*
    if (left!=0){
    	xmargin+='<div style="float:left; width:'+left+'px; display:block; margin:0;">';
    	xmargin+='</div><div style="display:block; float:left">';
    }	
    */
    //console.log(xmargin);
    if ($("#"+id).length==0){
	    if (title=='') str=xmargin+'<div class="easyui-panel" id="'+id+'" style="overflow:auto; position:relative; margin:0; padding:0;';
	    else str=xmargin+'<div class="easyui-panel" id="'+id+'" title="<div style=\'margin:0px 0px 0px 4px; \'>'+title+'" style="overflow:auto; position:relative;  margin:0; padding:0;';
	    //background:#fafafa;
	    var ph=$('#'+parent).height()-2;
		var pw=$('#'+parent).width()-2;
	    if (width>0) str+='width:'+width+'px;';
	    else str+='width: 100%;';
	    if (height>0) str+='height:'+height+'px;';
	    else str+='height: 100%;';
	    //if (left>0) str+='left:'+left+'px;';
	    //if (top>0) str+='top:'+top+'px;';
	    str+='" data-options="iconCls:\'panelIcon\'';
	    //if (height==0 && width==0) str+=',fit:true';
	    if (style.indexOf('close')>=0) str+=',closable:true';
	    if (style.indexOf('collapse')>=0) str+=',collapsible:true';
	    if (style.indexOf('min')>=0) str+=',minimizable:true';
	    if (style.indexOf('min')>=0) str+=',maximizable:true';
	    str+='" >';
	    str+='</div>';
	    $('#'+parent).append($(str));
	    $('#'+id).panel();
    }else{
        if (width>0) $('#'+id).panel({width: width});
        else $('#'+id).panel({width: '100%'});
        if (height>0) $('#'+id).panel({height: height});
        else $('#'+id).panel({height: '100%'});
    }
    if (p.title!='') $('#'+id).panel({title: p.title});
    //console.log(str);
	$("#"+id).attr('xparent',parent);  //自定义属性
	$("#"+id).attr('xid',id);  //自定义属性
	$("#"+id).attr('xtitle',title);  //自定义属性
	$("#"+id).attr('xtype','form');  //自定义属性
}

//生成tabs
//function myTabs(id,parent,items,top,left,height,width,style){
function myTabs(v){
	if (v instanceof Array){
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.items=v[2];
		if (v.length>3) p.top=v[3];
		if (v.length>4) p.left=v[4];
		if (v.length>5) p.height=v[5];
		if (v.length>6) p.width=v[6];
		if (v.length>7) p.style=v[7];
		//myTabs(id,parent,items,top,left,height,width,style)
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;	
	if (p.style==undefined) p.style='';
	else p.style=';'+p.style+';';
	if (p.top==undefined || isNaN(p.top)) p.top=0;
	if (p.left==undefined || isNaN(p.left)) p.left=0;
	if (p.height==undefined || isNaN(p.height)) p.height=0;
	if (p.width==undefined || isNaN(p.width)) p.width=0;
	if (p.parent==undefined || p.parent=='') p.parent='main';
	var xid=id+'Panel';
	if (p.style.indexOf(';close;')>=0) var flag=true;
	else flag=false;
	//-19px经过调试确定，取掉底部空隙,left,top为空隙
	var str='<div id="'+p.id+'" class="easyui-tabs" style="overflow:auto; position:relative; ';
	if (top>0) str+='margin: '+top+'px 0px -19px ';
	else str+='margin: 0px 0px -19px ';
	if (left>0) str+=left+'px; padding:0px 0px 0px 0px;">\n';
	else str+='0px; padding:0px 0px 0px 0px;">\n';
	var tmp=[];
	if (p.items!=undefined && p.items!=''){
		tmp=p.items.split(';');
		for (var i=0; i<tmp.length; i++){
		    str+='<div id="'+id+(i+1)*1+'" title="'+tmp[i]+'" data-options="closable:'+flag+'" style="top:0px; left:0px; position:relative; overflow:auto; border-width:0px;">\n';
			str+="</div>\n";
		}	
	}
	str+='</div>\n';
	$("#"+p.parent).append($(str));
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xtype', 'tabs');  //自定义属性
	$("#"+p.id).tabs();
	//父类日期的高度与宽度,splitter变动时改变
	if (width<=0 && height<=0){
		$("#"+p.id).tabs({fit:true});
	}else{
		if (p.width<=0 && $('#'+p.parent).length>0){
			p.width=$('#'+p.parent).width()-0;
		}	
		if (p.height<=0 && $('#'+p.parent).length>0){
			p.height=$('#'+p.parent).height()-0;
		}	
		$("#"+p.id).tabs({width:p.width, height:p.height});
	}	
	$("#"+p.parent).attr('xtab', p.id);  //自定义属性，记录其中的tab名称
	//更新tab，否则第一页不会显示
	if (tmp.length>0){
		for (var i=1; i<tmp.length; i++){
			$("#"+p.id).tabs('select', i);  //每个都选中一次，解决显示格式问题
		}	
		$("#"+p.id).tabs('select', 0);
		var currTab = $('#'+p.id).tabs('getTab', 0);
		$('#'+p.id).tabs('update', { tab: currTab, options:{} });
	}
}

function myTab(v){
	if (v instanceof Array){
		var p={};
		p.id=v[0];
		p.tabid=v[1];
		p.parent=v[2];
		if (v.length>3) p.title=v[3];
		if (v.length>4) p.top=v[4];
		if (v.length>5) p.left=v[5];
		if (v.length>6) p.height=v[6];
		if (v.length>7) p.width=v[7];
		if (v.length>8) p.style=v[8];
		//myTabs(id,tabid,parent,title,top,left,height,width,style)
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;
	var id=p.id;
	var tabid=p.tabid;
	var parent=p.parent;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var title=p.title;
	var style=p.style;
	if (style==undefined) style='';
	if (top==undefined) top=0;
	if (left==undefined) left=0;
	if (height==undefined) height=-1;
	if (width==undefined) width=-1;
	if (parent==undefined || parent=='') parent='main';
	var xid=id+'Panel';
	if (style.indexOf('close')>=0) var flag=true;
	else flag=false;
	//-19px经过调试确定，取掉底部空隙,left,top为空隙
	var str='<div id="'+tabid+'" class="easyui-tabs" style="overflow: auto; ';
	if (top>0) str+='margin: '+top+'px 0px -19px ';
	else str+='margin: 0px 0px -19px ';
	if (left>0) str+=left+'px; padding:0px 0px 0px 0px;">\n';
	else str+='0px; padding:0px 0px 0px 0px;">\n';
	if (title!=undefined && title!=''){
		str+='<div id="'+id+'" title="'+title+'" data-options="fit:true, closable:'+flag+'" style="top:0px; left:0px; position:relative; overflow:auto; border-width:0px;"></div>\n';
	}
	str+='</div>\n';
	$("#"+parent).append($(str));
	$("#"+tabid).tabs();
	//父类容器的高度与宽度,splitter变动时改变
	if (width<=0 && height<=0){
		$("#"+tabid).tabs({fit:true});
	}else{
		if (width==0 && $('#'+parent).length>0){
			width=$('#'+parent).width()-0;
		}	
		if (height==0 && $('#'+parent).length>0){
			height=$('#'+parent).height()-2;
		}	
		$("#"+tabid).tabs({width: width, height: height});
	}	
	$("#"+tabid).tabs({fit:true});
	$("#"+parent).attr('xtab', tabid);  //自定义属性，记录其中的tab名称
	$("#"+tabid).attr('xparent', parent);  //自定义属性
	$("#"+tabid).attr('xid', id);  //自定义属性
	$("#"+tabid).attr('xtabid', tabid);  //自定义属性
	$("#"+tabid).attr('xtype', 'tabs');  //自定义属性
	$("#"+tabid).attr('xheight', height);  //自定义属性
	$("#"+tabid).attr('xwidth', width);  //自定义属性
	if (title!=undefined && title!=''){
		$("#"+id).panel({width: width, height: height});
		$("#"+id).attr('xheight', height);  //自定义属性
		$("#"+id).attr('xwidth', width);  //自定义属性
	}
	//更新tab，否则第一页不会显示
	$("#"+tabid).tabs('select',0);
	var currTab = $('#'+tabid).tabs('getTab', 0);
	$('#'+tabid).tabs('update', { tab: currTab, options:{} });
}

//生成表单+tabs
//function myTabForm(id,parent,title,tabs,top,left,height,width,style){
function myTabForm(){
	tabs=p.tabs;
	//生成表单myTabForm-主窗体, myTab1,2...
	var id=p.id;
	var xid=p.id+'Form';
	p.id=xid;
	myForm(p);
	p.top=0; p.left=0; p.height=0; p.width=0; 
	p.id=id; 
	p.parent=xid;
	myTabs(p);
}

//生成菜单按钮
function myMenuButton(id, parent, title, top, left, height, width, menuitem){
	var str='<a href="javascript:void(0)" id="'+id+'" class="easyui-menubutton" data-options="plain:true, menu:\'#'+menuitem+'\'" style="';
	if (width>0) str+='width:'+width+'px';
	if (height>0) str+='height:'+height+'px';
	if (top>0 && left>0) str+='position:absolute; top:'+top+'px; left:'+left+"px;";
	str+='">'+title+'</a>';
	$("#"+parent).append($(str));
	$("#"+id).attr('xtype','menubutton');
	$("#"+id).menubutton();	
}

//定义菜单并绑定到对象，如表单
function myMenu(id,items,bindobj){
	myMenuItem(id,items);
	var tmp=bindobj.split(';');
	if (tmp.length>0){
		var str='';
		for (var i=0;i<tmp.length;i++){
			if (i>0) str+=',';
			str+='#'+tmp[i];
		}
	}
}

//定义菜单，但不绑定。如果没有主菜单，则生成一个id
function myMenuItem(id,items){
	//items---add/新增/addIcon;edit/修改
	var str='';
	if ($("#"+id).length==0){
		str='<div id="'+id+'" xtype="menu" class="easyui-menu" data-options="" style="width:auto"></div>';
		$("#main").append($(str));
	}
	$("#"+id).menu();  //不能缺
	var k=1;
	str='';
	var tmp=items.split(';');
	for (var i=1;i<=tmp.length;i++){
		var mn=tmp[i-1].split('/');
		if (mn.length==1 && mn[0]=='-'){  //-为分割线
			$("#"+id).menu('appendItem',{
				id:id+'_sep'+k,
				separator:true  //class: 'menu-sep'
			});
			k++;
		}else if (mn.length==2){
			$("#"+id).menu('appendItem',{
				xtype:"menuitem", 
				text:mn[0],
				id:mn[1]
			});
			$("#"+mn[1]).attr('xtype','menuitem');
			$("#"+mn[1]).attr('xparent',id);
		}else if (mn.length==3){
			$("#"+id).menu('appendItem',{
				xtype:"menuitem",
				text:mn[0],
				id:mn[1],
				iconCls:mn[2]
			});
			$("#"+mn[1]).attr('xtype','menuitem');
			$("#"+mn[1]).attr('xparent',id);
		}
	}		  
}

function myGetTitle(id){
	var title='';
	if ($('#'+id).length>0){
		var classname=$('#'+id).attr('class')+'';
		var type=$('#'+id).attr('xtype')+'';
		if (type=='tabs'){
			var tab=$('#'+id).tabs('getSelected');
			var index=$('#'+id).tabs('getTabIndex',tab);
			title=$('#'+id+' .tabs-title')[index].innerHTML;
		}
	}
	return title;	
	
}

function myWinTitle(win,title){
	$("#"+win).window('setTitle','<div style=\'margin:0px 0px 0px 4px; \'>'+title+'</div>');
}

//生成窗体modal
function myWindow(v){
	//myWindow(id,title,top,left,height,width,buttons,style){
	//CancelBtn,CloseBtn,OkBtn,SaveBtn
	if ((v instanceof Array)){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.title=v[1];
		p.top=v[2];
		p.left=v[3];
		p.height=v[4];
		p.width=v[5];
		p.buttons=v[6];
		if (v.length>6) p.style=v[7];
		else p.style='';
	}else{
		p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;	
	if (p.style==undefined) p.style='';
	p.style=';'+p.style+';';
	var xid=p.id+'Form'; 
	var str='<div id="'+p.id+'" class="easyui-window" title="<div style=\'margin:0px 0px 0px 4px; \'>'+p.title+'" data-options="iconCls:\'panelIcon\'" ';
	str+='style="';
	//是否隐藏滚动条
	if (p.style.indexOf(';scrollbar;')>=0) str+='overflow:auto;';
	else str+='overflow:hidden;';
	str+='position:relative; "></div>';  //background:#fafafa;
	$("#main").append($(str));	
	if (p.width<=0) p.width=500;
	if (p.height<=0) p.height=400;
	var xstyle='({width:'+p.width+', height:'+p.height;
	if (p.style==undefined || p.style=='') p.style='close';
	if (p.buttons==undefined) p.buttons='';
	if (p.style.indexOf(';resize;')>=0)	xstyle+=' ,resizable: true';
	else xstyle+=' ,resizable: false';
	if (p.style.indexOf(';drag;')>=0) xstyle+=' ,draggable: true';
	else xstyle+=' ,draggable: false';
	if (p.style.indexOf(';close;')>=0) xstyle+=' ,closable:true';
	else xstyle+=' ,closable:false';
	if (p.style.indexOf(';collapse;')>=0) xstyle+=' ,collapsible:true';
	else xstyle+=' ,collapsible:false';
	if (p.style.indexOf(';max;')>=0) xstyle+=' ,maximizable:true';
	else xstyle+=' ,maximizable:false';
	if (p.style.indexOf(';min;')>=0) xstyle+=' ,minimizable:true';
	else xstyle+=' ,minimizable:false';
	if (p.style.indexOf(';modal;')>=0) xstyle+=' ,modal:true';
	else xstyle+=' ,modal:false';
	xstyle+='})';
	if (p.top>0 && p.left>0) $("#"+p.id).window({left:p.left, top:p.top});
	$("#"+p.id).window( eval(xstyle) );
	$("#"+p.id).attr('xtype','window');
	$("#"+p.id).window('close'); //初始状态先关闭
	if (p.buttons!=undefined && p.buttons!=''){
		p.buttons=';'+p.buttons+';'
		var btntop=p.height-74;
		var btnleft=p.width-sysbutton.width-30;
		if (p.buttons.indexOf(';cancel;')>=0){
			myButton([p.id+"CancelBtn", id, "取消", btntop, btnleft, sysbutton.height, sysbutton.width]);
			btnleft=btnleft-sysbutton.width-1;
		}
		if (p.buttons.indexOf(';close;')>=0){
			myButton([p.id+"CloseBtn", p.id, "关闭", btntop, btnleft, sysbutton.height, sysbutton.width]);
			btnleft=btnleft-sysbutton.width;
			$("#"+p.id+"CancelBtn").on('click', function () {
				$("#"+p.id).window('close');		
			});
		}
		if (p.buttons.indexOf(';save;')>=0){
			myButton([p.id+"SaveBtn",p.id, "保存", btntop, btnleft, sysbutton.height, sysbutton.width]);
			btnleft=btnleft-sysbutton.width;
		}
		if (p.buttons.indexOf(';ok;')>=0){
			myButton([p.id+"OkBtn", p.id ,"确定", btntop, btnleft, sysbutton.height, sysbutton.width]);
			btnleft=btnleft-sysbutton.width;
		}
	}
}

function myFilterBar(pmyGrid1, p){
	p.labelwidth=1*p.labelwidth; p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;
	pmyGrid1.filterbar.filterbtn=p.id+'btn';
	pmyGrid1.filterbar.filterfield=p.id;
	myTextField(p);
	myButton([pmyGrid1.filterbar.filterbtn, p.parent, '过滤', p.top, 1*p.left+1*p.width+1*p.labelwidth+10, 24, 72, 'icon-search']);  //95
	mySep(p.id+'sep1', p.parent, p.top-1, 1*p.left-15, p.height-3,'');
	mySep(p.id+'sep2', p.parent, p.top-1, 1*p.left+1*p.width+1*p.labelwidth+10+72+10, p.height-3,'');
	//定义filtertext
	$('#'+pmyGrid1.filterbar.filterfield).textbox({
		buttonIcon:'icon-filter',
        onClickButton: function(e){
        	$('#'+pmyGrid1.id+'FilterWin').window('open');
		}
	});
	$('#'+pmyGrid1.filterbar.filterfield).textbox('textbox').bind('keydown',function(e){
		if (e.which==13){ //回车键
			fnLoadGridData('filterbar'); //主程序必须有该函数  
		}
	}); 
	$('#'+pmyGrid1.filterbar.filterbtn).click(function(e){
		fnLoadGridData('filterbar'); //主程序必须有该函数
	});
	return pmyGrid1;
}
function myFilterWindow(pmyGrid1){
	var id=pmyGrid1.id+'FilterWin';
	myWindow([id,'数据过滤',0,0,230,450,'','close;modal;drag']);
	pmyGrid1.filterwin.filterbtnok=pmyGrid1.id+'FilterOk';
	pmyGrid1.filterwin.filterbtnclose=pmyGrid1.id+'FilterClose';
	pmyGrid1.filterwin.sortfield=pmyGrid1.id+'sortfield';
	pmyGrid1.filterwin.sortstyle=pmyGrid1.id+'sortstyle';
	pmyGrid1.filterwin.filterfield=pmyGrid1.id+'filterfield';
	pmyGrid1.filterwin.filterstyle=pmyGrid1.id+'filterstyle';
	pmyGrid1.filterwin.filtertext=pmyGrid1.id+'filtertext';
	myComboField([pmyGrid1.filterwin.sortfield, id, '排序方向:', 64, 20, 28, 0, 228, '默认;'+pmyGrid1.filteritems,'','autodrop']);
	myComboField([pmyGrid1.filterwin.sortstyle, id, '', 0, 20, 321, 0, 80,'升序;降序','','autodrop']);
	myComboField([pmyGrid1.filterwin.filterfield, id, '关键字:', 64, 64, 28, 0, 228, pmyGrid1.filteritems, pmyGrid1.filteritems,'checkbox']);  //默认全选
	myComboField([pmyGrid1.filterwin.filterstyle, id, '',0, 64, 321, 0, 80,'模糊;精确;不包含;不等于;大于等于;小于等于;前端匹配;后端匹配','模糊','autodrop']);
	myTextField([pmyGrid1.filterwin.filtertext, id, '查找文本:', 64, 108, 28, 0, 309,'']);
	myButton([pmyGrid1.filterwin.filterbtnok, id, '确定', 152, 240, 24, 72]);  //95
	myButton([pmyGrid1.filterwin.filterbtnclose, id, '取消', 152, 314, 24, 72]);  //95
	$('#'+id).window('close');
	$('#'+pmyGrid1.filterwin.filterbtnok).click(function(e){
		fnLoadGridData('filterwin'); //主程序必须有该函数		
		$('#'+id).window('close');
	});
	$('#'+pmyGrid1.filterwin.filterbtnclose).click(function(e){
		$('#'+id).window('close');
	});
	return pmyGrid1;
}

function myGridfilter(pmyGrid1, action){
	var xstyle='';		
	var filtersql='';
	var sortsql='';
	if (action=='filterbar'){  //toolbar中快速过滤
		var xfiltertext=myGetValue(pmyGrid1.filterbar.filterfield);
		var xsortfield='';
		var xsortstyle='';
		var xfilterfield='';
		var xfilterstyle='';
	}else{  //通过窗体过滤
		var xfiltertext=myGetValue(pmyGrid1.filterwin.filtertext);
		var xsortfield=$('#'+pmyGrid1.filterwin.sortfield).combobox('getText');
		var xsortstyle=myGetValue(pmyGrid1.filterwin.sortstyle);
		var xfilterfield=$('#'+pmyGrid1.filterwin.filterfield).combobox('getText');
		var xfilterstyle=myGetValue(pmyGrid1.filterwin.filterstyle);
	}
	if (xsortstyle=='降序') xsortstyle='desc';
	else xsortstyle='asc';
	if (xsortfield==undefined || xsortfield=='默认') sortsql='';
	//alert(xsortfield+'--'+xsortstyle+'---'+xfilterfield+'---'+xfilterstyle);
	//生成其他查询条件
	if (xfilterstyle=='前端匹配') s=" like '"+xfiltertext+"%'\"";
	else if (xfilterstyle=='前端匹配') s=" like '%"+xfiltertext+"'";
	else if (xfilterstyle=='不包含') s=" like '%"+xfiltertext+"%'";
	else if (xfilterstyle=='精确') s="='"+xfiltertext+"'";
	else if (xfilterstyle=='不等于') s="='"+xfiltertext+"'";
	else if (xfilterstyle=='大于等于') s=">='"+xfiltertext+"'";
	else if (xfilterstyle=='小于等于') s="<='"+xfiltertext+"'";
	else if (xfilterstyle=='小于等于') s="<='"+xfiltertext+"'";
	else s=" like '%"+xfiltertext+"%'";
	if (xfiltertext!=''){
		var f=';'+xfilterfield+';';
		//xfilterfield为空时全部列都选上
		for (var i=0; i<pmyGrid1.filtercolumns.length; i++){
			var field=pmyGrid1.filtercolumns[i].field;
			if (xfilterfield=='' || f.indexOf(';'+pmyGrid1.filtercolumns[i].title+';')>=0){
				if (filtersql!='') filtersql+=' or ';
				filtersql+='{	'+field+'	}'+s; //虚拟列名tab键分隔
			}
		}
	}
	for (var i=0; i<pmyGrid1.sortcolumns.length; i++){
		var field=pmyGrid1.sortcolumns[i].field;
		if (xsortstyle!='' && xsortfield==pmyGrid1.sortcolumns[i].title){
			sortsql='{	'+field+'	}';  //虚拟列名tab键分隔
			break;
		}
	}
	if (sortsql!='') sortsql=sortsql+' '+xsortstyle;
	if (filtersql!=''){
		if (xfilterstyle=='不包含' || xfilterstyle=='不等于') filtersql=" not("+filtersql+")";
		else filtersql="("+filtersql+")";
	}
	pmyGrid1.filtersql=filtersql;
	pmyGrid1.sortsql=sortsql;
	return pmyGrid1;
}

/*
function myGridColumns(pmyGrid1){
	//[#230%n@r]资源名称/resourcename;
	//n/f数值型numberbox，e数值型numberspinner，d日期型,c字符型，图像,g-图形
	//#宽度 @对齐 %类型 ^可编辑 
	if (pmyGrid1.fieldset==undefined) var fieldset='';
	else var fieldset=pmyGrid1.fieldset;
	if (pmyGrid1.editable==undefined) pmyGrid1.editable=0;
	var xcolumns=[];
	for (var i=0;i<=255;i++){
		xcolumns[i]={};
		xcolumns[i].name='';
		xcolumns[i].title='';
		xcolumns[i].align='';
		xcolumns[i].type='c';
		xcolumns[i].length='100';
		xcolumns[i].dec='0';
		xcolumns[i].fixed=0;
		xcolumns[i].edit=0;  //是否可以编辑，默认不可以编辑
	}
	var result=[];
	pmyGrid1.columnset='';
	if (fieldset=='') var xfields=[];
	else var xfields=fieldset.split(';');
	for (var i=0;i<xfields.length;i++){
		var s=xfields[i].toLowerCase();
		var p1=s.indexOf('[');
		var p2=s.indexOf(']');
		if (p1>=0 && p2>p1){
			var ss=s.substring(p1+1,p2);
			//列是否可以编辑？
			var x0=ss.indexOf('^');  //可以编辑列
			if (x0>=0){
				xcolumns[i].edit=1;
				pmyGrid1.editable=1;
				ss=ss.replace('^','');  //删除该描述
			}
			var x1=ss.indexOf('@');  //对齐1
			if (x1>=0){
				xcolumns[i].align=ss.substr(x1+1,1);
				ss=ss.replace('@'+xcolumns[i].align,'');  //删除该描述
			}
			var x2=ss.indexOf('%'); //数据类型2
			if (x2>=0){
				xcolumns[i].type=ss.substr(x2+1,1);
				ss=ss.replace('%'+xcolumns[i].type,'');  //删除该描述
			}
			var x3=ss.indexOf('#'); //宽度3
			var s1='';
			var s2='';
			if (x3>=0)	s1=ss.substring(x3+1,255);
			else s1=ss;
			var x4=s1.indexOf(',');
			if (x4<0){
				xcolumns[i].length=s1;
			}else{
				xcolumns[i].length=s1.substring(0,x4);
				xcolumns[i].dec=s1.substr(x4+1,2);
			}
			s=s.substring(p2+1,255);
		}
		var x1=s.indexOf('/');
		if (x1>0){
			xcolumns[i].title=s.substring(0,x1);		
			xcolumns[i].name=s.substring(x1+1);		
		}else{
			xcolumns[i].title=s;		
			xcolumns[i].name=s;		
		}
		if (xcolumns[i].align=='' && xcolumns[i].type=='d') xcolumns[i].align='c'; 
		if (xcolumns[i].align=='' && xcolumns[i].type=='n') xcolumns[i].align='r'; 
		if (xcolumns[i].align=='' && xcolumns[i].type=='f') xcolumns[i].align='r'; 
		if (xcolumns[i].align=='' && xcolumns[i].type=='e') xcolumns[i].align='r'; //spinner 
		if (xcolumns[i].align=='c') xcolumns[i].align='center';
		else if (xcolumns[i].align=='r') xcolumns[i].align='right';
		else xcolumns[i].align='left';
		var str="{type:'"+xcolumns[i].type+"',edit:"+xcolumns[i].edit+",";
		if ((xcolumns[i].type=='n' || xcolumns[i].type=='f' || xcolumns[i].type=='e')){  //数值型有小数点
			str+="title:xcolumns[i].title, field:xcolumns[i].name, sortable:false, width:xcolumns[i].length, halign:'center', align: xcolumns[i].align, ";
			if (xcolumns[i].edit==1){
				if (xcolumns[i].type=='e') str+="editor:'numberspinner',";
				else str+="editor:'numberbox',";
			}
			str+="formatter:function(value){\n";
			 //非零打印
			str+="if (value!=undefined) value=(1.0*value).toFixed("+xcolumns[i].dec+");\n";
			str+="else value='0';\n";
			if (xcolumns[i].type=='n' || xcolumns[i].type=='e') str+="if (value==undefined || value=='' || 1*value==0) value='&nbsp;';\n";
			str+="return '<a href=\"javascript:void(0)\" style=\"padding:0 0px; font-size:'+(pmyGrid1.fontsize-1)+'px; color:#000000;\" >";
			str+="<div>' + value+'</div></a>';}}\n";
			//str+="<div align=\"right\">' + value+'</div></a>';}}\n";
			//<a href=\"#\">
			//console.log(str);
		}else if (xcolumns[i].type=='d'){  //日期时间型
			str+="title: xcolumns[i].title, field:xcolumns[i].name, sortable:false, width:xcolumns[i].length, halign:'center', align: xcolumns[i].align, ";
			if (xcolumns[i].edit==1) str+="editor:'datebox',";
			str+="formatter: function(value){\n";
  			str+="if (value=='' || value==undefined) value='&nbsp;';";
			str+="return '<a href=\"javascript:void(0)\" style=\"padding:0 0px; font-size:'+(pmyGrid1.fontsize-1)+'px; color:#000000;\" >";
			str+="<div>' + value+'</div></a>';}}\n";
			//<a href=\"#\">
		}else if (xcolumns[i].type=='i'){  //image类型，fieldname非空时显示图表，默认大小16px,小数位数为设置大小
			var h=xcolumns[i].dec;
			if (h<6) h=16;
			str+="title: xcolumns[i].title, field:xcolumns[i].name, sortable:false, width:xcolumns[i].length, halign:'center', align: xcolumns[i].align, formatter: function(value){\n";
  			str+="if (value=='' || value==undefined) var xvalue='&nbsp;';\n";
			str+="else{\n"; 
			str+="var f='system/images/'+value;\n";
			str+="var xvalue='<a href=\"javascript:void(0)\"><img border=\"0\" style=\"height:'+h+'px; width:'+h+'px; border:1;\" src=\"'+f+'\" /></a>';\n";
			str+="}\n";
			//str+="return '<a href=\"javascript:void(0)\"><img border=\"0\" style=\"height:'+h+'px; width:'+h+'px; border:1;\" src=\"'+f+'\" /></a>';}}\n";
			str+="return xvalue;\n";
			str+="}}"
		}else if (xcolumns[i].type=='g'){  //根据扩展名显示图片24位，.title指定默认图片的后缀
			//field:'sysdownload'
			str+="title:'', field:'sysfiletype', sortable:false, width:xcolumns[i].length, halign:'center', align:'center', formatter:function(value,row,index){\n";
  			str+="var v1=row."+xcolumns[i].name+";\n";  //根据该列的值确定图标的名称
  			str+="var v2='"+xcolumns[i].title+".png';\n";
  			str+="if (v1.lastIndexOf('.pdf')>0) v2='pdf24.png';\n";
  			str+="else if (v1.lastIndexOf('.swf')>0) v2='swf24.png';\n";
  			str+="else if (v1.lastIndexOf('.doc')>0) v2='word24.png';\n";
  			str+="else if (v1.lastIndexOf('.docx')>0) v2='word24.png';\n";
  			str+="else if (v1.lastIndexOf('.xls')>0) v2='excel24.png';\n";
  			str+="else if (v1.lastIndexOf('.xlsx')>0) v2='excel24.png';\n";
  			str+="else if (v1.lastIndexOf('.ppt')>0) v2='ppt24.png';\n";
  			str+="else if (v1.lastIndexOf('.pptx')>0) v2='ppt24.png';\n";
  			str+="else if (v1.lastIndexOf('.rar')>0) v2='rar24.png';\n";
  			str+="else if (v1.lastIndexOf('.zip')>0) v2='zip24.png';\n";
  			str+="else if (v1.lastIndexOf('.mp3')>0) v2='audio24.png';\n";
  			str+="else if (v1.lastIndexOf('.wav')>0) v2='audio24.png';\n";
  			str+="else if (v1.lastIndexOf('.png')>0) v2='pct24.png';\n";
  			str+="else if (v1.lastIndexOf('.gif')>0) v2='pct24.png';\n";
  			str+="else if (v1.lastIndexOf('.jpg')>0) v2='pct24.png';\n";
			str+="v2='system/images/'+v2;\n";
			str+="return '<a href=\"javascript:void(0)\"><img border=\"0\" style=\"height:20px; width:20px; border:0;\" src=\"'+v2+'\" /></a>';}}\n";
		}else{
			str+="title: xcolumns[i].title, field:xcolumns[i].name, nowrap:false, sortable:false, width:xcolumns[i].length, halign:'center', align: xcolumns[i].align, ";
			if (xcolumns[i].edit==1) str+="editor:'textbox',";
			str+="formatter: function(value){";
  			str+="if (value=='' || value==undefined) value='&nbsp;';";
			str+="return '<a href=\"javascript:void(0)\" style=\"padding:0 0px; font-size:'+(pmyGrid1.fontsize-0)+'px; color:#000000;\" ><div class=\"textdiv\">'+ value+'</div></a>';";
			str+="}}\n";
			//console.log(str);
  		}
  		eval("var s="+str+";");  //str to json
		result.push(s);
	} //for
	pmyGrid1.columnset=result;
	return pmyGrid1; //result; 
}
*/

function myLoadGridData(pmyGrid1, pageNumber){
	var myGrid1=pmyGrid1.id;
	//三种方法同时刷新页和行号才有效
	if (pageNumber<=0){  //为0时刷新当前列
		var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
		pageNumber=opts.pageNumber;
	}
	pageNumber=Math.max(1,pageNumber);
	var pager =$("#"+pmyGrid1.id).datagrid('getPager');
	pager.pagination('refresh',{  // 改变选项，并刷新分页栏信息
		pageNumber: pageNumber
	});
	var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
	opts.pageNumber=pageNumber;
	var pageSize=opts.pageSize;
	if (pageSize!=undefined) pageSize=pmyGrid1.pagesize;
	var opts = $("#"+pmyGrid1.id).datagrid('options');
	opts.pageNumber=pageNumber;
	opts.pageSize=pageSize;
	var reloadflag=0;  //重新加载，显示前一页
	pmyGrid1=myGetGridData(pmyGrid1, pageNumber, pageSize);
	//根据总行数改变行号的列宽度，改css
	var rowcount=$("#"+pmyGrid1.id).datagrid('getData').total+'';  //转换为字符型
	var width=(rowcount.length*6+8);
	if (width<25) width=25;
	var w=width+'px';
	$('.datagrid-header-rownumber,.datagrid-cell-rownumber').css({"width":w});
	$("#"+pmyGrid1.id).datagrid('resize');  //必须写
	pmyGrid1.rownumberwidth=w;  //其他控件也会影响列宽，如treegrid
	pmyGrid1.sysrowno=-1;
	$('#'+pmyGrid1.id).attr('sysrowno', -1);
	if (rowcount>0){
		var rows=$("#"+pmyGrid1.id).datagrid('getRows');    // get current page rows
		pmyGrid1.pagenumber=pageNumber;
		pmyGrid1.pagecount=parseInt((rowcount-1)/pmyGrid1.pagesize)+1;
		if (pmyGrid1.rowindex==undefined || pmyGrid1.rowindex<0) pmyGrid1.rowindex=0;
		if (pageNumber>pmyGrid1.pagecount && pmyGrid1.pagecount>0){
			//本页行数不够，跳到上一页。例如删除本页第一行记录后
			pageNumber--;	
			pmyGrid1.rowindex=pmyGrid1.pagesize-1;
			xmaxindex=pmyGrid1.pagesize-1;
			pmyGrid1=myGetGridData(pmyGrid1,pageNumber,pageSize);//加载上页数据
		}else if (pageNumber==pmyGrid1.pagecount){
			xmaxindex=(rowcount-1) % pmyGrid1.pagesize;
		}else{	
			xmaxindex=pmyGrid1.pagesize-1;
		}	
		//console.log(xmaxindex);
		pmyGrid1.rowindex=Math.min(pmyGrid1.rowindex, xmaxindex);
		$("#"+pmyGrid1.id).datagrid('selectRow', pmyGrid1.rowindex); //选中某行
		//pmyGrid1.record=rows[pmyGrid1.rowindex];
	}else{
		//pmyGrid1.record=null;
		pmyGrid1.pagenumber=0;
		pmyGrid1.pagecount=-1;
		pmyGrid1.rowindex=-1;
	}
	$("#"+pmyGrid1.id).attr("rowindex", pmyGrid1.rowindex);
	$("#"+pmyGrid1.id).attr("rowcount", rowcount);
	pmyGrid1.rowcount=rowcount;
	//分页下拉框数据源处理
	pmyGrid1.pagingcombosource=[];
	s='[';
	for (var i=1;i<=pmyGrid1.pagecount;i++){
		if (i>1) s+=',';
		s+="{'"+pmyGrid1.gridpagingcombo+"':'"+i+"/"+pmyGrid1.pagecount+"','index':'"+i+"'}";
	}
	s+=']';
	pmyGrid1.pagingcombosource=eval(s);
	//console.log(pmyGrid1.pagingcombosource);
	if ($('#'+pmyGrid1.gridpagingcombo).length>0){
		$('#'+pmyGrid1.gridpagingcombo).combobox({data:pmyGrid1.pagingcombosource});
		if (pmyGrid1.pagingcombosource.length>0){
			s=pmyGrid1.pagenumber+'/'+pmyGrid1.pagecount;
			//mySetValue(pmyGrid1.gridpagingcombo,s);  //设置下拉框的页码选项
		}
	}
	//加载事件
	myGridEvents(pmyGrid1.id,'onload');
	return pmyGrid1;
}

function myGetGridData(pmyGrid1,pageNumber,pageSize){
	var source=[];
	var rowcount = $("#"+pmyGrid1.id).datagrid('getData').total;
	var totalpage=parseInt((rowcount-1)/pageSize)+1;
	var rows=$("#"+pmyGrid1.id).datagrid('getRows');
	if (pageNumber>totalpage) pageNumber=1;
	//将参数值传递到后台，替换{sys.userid}{rname}等变量
	var valuelist=myGetSqlParamValues(pmyGrid1.params);
	//console.log(pmyGrid1.params);
	//alert(valuelist);
	$.ajax({     
		type: "Post",     
		url: "system/easyui_getGridData.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {
			nodeindex: pmyGrid1.nodeindex,  //对应的节点序号，找到sql语句
			wheresql: (pmyGrid1.wheresql),
			filtersql: (pmyGrid1.filtersql),  //过滤条件
			sortsql: (pmyGrid1.sortsql),  //排序关键字，包含desc,asc或多个关键字
			keyvalue: pmyGrid1.keyvalue,  //当前记录值，定位到这页
			valuelist:valuelist,
			limit: pageSize, //每页行数
			start: (pageNumber-1)*pageSize  //第几页
		}, 
		async: false, method: 'post',    
		success: function(data) {
			eval("source="+data+";");
			//console.log('s',source.rowindex);
			if (source.pageno>0) pmyGrid1.pageno=source.pageno;
			if (source.rowindex>=0)	pmyGrid1.rowindex=source.rowindex;
			if (pmyGrid1.pageno<=0) pmyGrid1.pageno=1;
			pmyGrid1.rowno=-1;  //重设置为0，光标所在的行
			/*
			var pager =$("#"+pmyGrid1.id).datagrid('getPager');
			pager.pagination('refresh',{  // 改变选项，并刷新分页栏信息
				pageNumber: pmyGrid1.pageno
			});
			var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
			opts.pageNumber=pmyGrid1.pageno
			*/
			//执行加载行号
			var opts = $("#"+pmyGrid1.id).datagrid('options');
			opts.pageNumber=pmyGrid1.pageno;
			$("#"+pmyGrid1.id).datagrid("reload");  //放在loaddata之前，触发onBeforeLoad事件
			$("#"+pmyGrid1.id).datagrid("loadData", source );  //必须用loaddata
		}
	});
	return pmyGrid1;
}
	
function myGridPaging(pmyGrid1){
	var myGrid1=pmyGrid1.id;
	$("#"+pmyGrid1.id).datagrid({ 
		pagination: true,	
		pageSize: pmyGrid1.pagesize
	});
	//var opts = $("#"+pmyGrid1.id).datagrid('options');
	var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
	//opts.pageNumber=1;
	//opts.pageSize=pmyGrid1.pagesize;	
	//定义分页栏模式
	var pg = $("#"+pmyGrid1.id).datagrid("getPager");  
	pg.pagination({  
		pageList: [10,20,30,40,50,100,200,300,400,500],
		showPageList: false,  //是否显示设置每页显示行数的下拉框
		beforePageText: '第', //页数文本框前显示的汉字  
		afterPageText: '页    共 {pages} 页', 
		displayMsg: '当前显示{from}～{to}行，共{total}行',
		onRefresh:function(pageNumber,pageSize){
			if (pmyGrid1.rowindex>=0) $("#"+pmyGrid1.id).datagrid('endEdit',pmyGrid1.rowindex);
			pmyGrid1.rowindex=0;  
			myLoadGridData(pmyGrid1, pageNumber);  
			myGridEvents(pmyGrid1.id,'onRefresh');
		},  
		onChangePageSize:function(pageSize){  
			if (pmyGrid1.rowindex>=0) $("#"+pmyGrid1.id).datagrid('endEdit',pmyGrid1.rowindex);
			var opts = $("#"+pmyGrid1.id).datagrid('options');
			//var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
			opts.pageSize=pageSize;	
			pmyGrid1.rowindex=0;			
			myLoadGridData(pmyGrid1, 1);  
			myGridEvents(pmyGrid1.id,'onChangePageSize');
		},  
		onSelectPage:function(pageNumber,pageSize){
			if (pmyGrid1.rowindex>=0) $("#"+pmyGrid1.id).datagrid('endEdit',pmyGrid1.rowindex);
			var opts = $("#"+pmyGrid1.id).datagrid('options');
			//var opts =$("#"+pmyGrid1.id).datagrid('getPager').data("pagination").options; 
			opts.pageNumber=pageNumber;
			opts.pageSize=pageSize;
			pmyGrid1.rowindex=0;
			myLoadGridData(pmyGrid1, pageNumber);
			myGridEvents(pmyGrid1.id, 'onSelectPage');						  
		}  
	});
}

//gggggggggrid
function myDBGrid(pmyGrid1){
	pmyGrid1.rowindex=0;
	pmyGrid1.rowno=-1;
	pmyGrid1.checkonclick=0;  //单击不改变checkbox状态
	pmyGrid1.singleselect=1;  //单选行
	pmyGrid1.filterfieldset='';
	pmyGrid1.staticsql="";
	pmyGrid1.keyvalue="";
	pmyGrid1.activesql=pmyGrid1.staticsql;
	pmyGrid1.sortway='asc';
	pmyGrid1.collapsible=false;
	pmyGrid1.filterwin={};  //网格数据过滤的窗体
	pmyGrid1.filterbar={};  //网格数据过滤的工具条
	//默认值设置
	if (pmyGrid1.summeryfields==undefined) pmyGrid1.summeryfields='';
	if (pmyGrid1.fontsize==undefined) pmyGrid1.fontsize=syslabel.fontsize;
	if (pmyGrid1.pagesize==undefined) pmyGrid1.pagesize=20;
	if (pmyGrid1.rownumber==undefined) pmyGrid1.rownumber=true;
	if (pmyGrid1.menu==undefined) pmyGrid1.menu="";
	if (pmyGrid1.height==undefined) pmyGrid1.height=0;
	if (pmyGrid1.width==undefined) pmyGrid1.width=0;
	if (pmyGrid1.top==undefined) pmyGrid1.top=-1;
	if (pmyGrid1.left==undefined) pmyGrid1.left=-1;
	if (pmyGrid1.toolbar==undefined) pmyGrid1.toolbar='';
	if (pmyGrid1.sortfield==undefined || pmyGrid1.sortfield=='') pmyGrid1.sortfield=pmyGrid1.keyfield;
	if (pmyGrid1.checkonclick==undefined) pmyGrid1.checkonclick=1; //单击是否改变checkbox状态
	if (pmyGrid1.checkbox==undefined) pmyGrid1.checkbox='multiple';
	if (pmyGrid1.title==undefined) pmyGrid1.title='';
	if (pmyGrid1.masterfield==undefined) pmyGrid1.masterfield='';	
	//构造控件
	var str='';
	if (pmyGrid1.top>0 || pmyGrid1.left>0){
		str+='<div id="'+pmyGrid1.id+'_div" style="position:absolute;';
		if (pmyGrid1.top>0) str+=" top:"+pmyGrid1.top+"px;";
		if (pmyGrid1.left>0) str+=" left:"+pmyGrid1.left+"px;";
		str+='">';
	} 
	str+='<div id="'+pmyGrid1.id+'" class="easyui-datagrid" data-options="';
	if (pmyGrid1.toolbar!=undefined && pmyGrid1.toolbar!='') str+='toolbar:'+pmyGrid1.toolbar+'';
	str+='" style="position:absolute;" ></div>';
	if (pmyGrid1.top>0 || pmyGrid1.left>0){
		str+='</div>';
	} 
	$("#"+pmyGrid1.parent).append($(str));
	//设置属性
	if (pmyGrid1.width<=0) pmyGrid1.width='100%';
	if (pmyGrid1.height<=0) pmyGrid1.height='100%';
	pmyGrid1.rowcount=0;
	pmyGrid1.columns=[];
	pmyGrid1.checkboxcolumn=[];
	if (pmyGrid1.checkbox!=''){
		pmyGrid1.checkboxcolumn.push({type:"cb", field:"sys_checkedflag", width: 20, checkbox: true, align:"center"});
	}
	pmyGrid1.rowindex=-1;
	if (pmyGrid1.striped==undefined || pmyGrid1.striped=='') pmyGrid1.striped=false;
	else pmyGrid1.striped=true; 
	if (pmyGrid1.checkbox=='single') var selectoncheck=true;
	else var selectoncheck=false;
	if (pmyGrid1.fixedcolumns.length>0) pmyGrid1.fixedcolumns=pmyGrid1.checkboxcolumn.concat(pmyGrid1.fixedcolumns);
	else pmyGrid1.fixedcolumns=pmyGrid1.checkboxcolumn;
	//计算过滤列
	pmyGrid1.filtercolumns=[];
	str=''
	for (i=0; i<pmyGrid1.fixedcolumns.length; i++){
		if (pmyGrid1.fixedcolumns[i].filter!=undefined && pmyGrid1.fixedcolumns[i].filter){
			pmyGrid1.filtercolumns.push(pmyGrid1.fixedcolumns[i]);
			if (str!='') str+=';';
			str+=pmyGrid1.fixedcolumns[i].title;
		}
	}
	for (i=0; i<pmyGrid1.scrollcolumns.length; i++){
		if (pmyGrid1.scrollcolumns[i].filter!=undefined && pmyGrid1.scrollcolumns[i].filter){
			pmyGrid1.filtercolumns.push(pmyGrid1.scrollcolumns[i]);
			if (str!='') str+=';';
			str+=pmyGrid1.scrollcolumns[i].title;
		}
	}
	pmyGrid1.filteritems=str;  //过滤列下拉框选项
	//属性设置	
	$("#"+pmyGrid1.id).datagrid({
		title: '&nbsp;'+pmyGrid1.title,
		width: pmyGrid1.width,
		height: pmyGrid1.height,
		iconCls: "panelIcon",
		nowrap: true, //false,
		autoRowHeight: false, //true,
		//sortName: pmyGrid1.keyfield,
		remoteSort:false,
		sortOrder: 'asc', 		
		pagePosition: 'bottom',  //top,both
		selectOnCheck: selectoncheck, //true,
		checkOnSelect: selectoncheck, //true,
		//pageNumber: 1,
		//pagination: true,
		//pageSize: pmyGrid1.pagesize	,	
		frozenColumns: [pmyGrid1.fixedcolumns],
		columns: [pmyGrid1.scrollcolumns],
		striped: pmyGrid1.striped
	});
	if (pmyGrid1.menu!=undefined && pmyGrid1.menu!=''){
		$("#"+pmyGrid1.id).datagrid({
			onRowContextMenu: function(e,index,record){
				e.preventDefault(); //阻止浏览器捕获右键事件  
				var xmenu=$(this).attr('xcontextmenu');  //自定义属性
				var xcheckbox=$(this).attr('xcheckbox');
				var xid=$(this).attr('xid');
				if (xcheckbox=='single') $(this).datagrid("selectRow", index); //根据索引选中该行  
				$('#'+xmenu).menu('show', {   //显示右键菜单  
					left: e.pageX, //在鼠标点击处显示菜单  
					top: e.pageY  
				});
				myGridEvents(xid, 'onRowContextMenu');
			}
		});
	}else{
		$("#"+pmyGrid1.id).datagrid({
			onRowContextMenu: function(e,index,record){
				e.preventDefault(); //阻止浏览器捕获右键事件  
				var xmenu=$(this).attr('xcontextmenu');  //自定义属性
				var xcheckbox=$(this).attr('xcheckbox');
				var xid=$(this).attr('xid');
				if (xcheckbox=='single') $(this).datagrid("selectRow", index); //根据索引选中该行  
				myGridEvents(xid, 'onRowContextMenu');
			}
		});		
	}
	if (pmyGrid1.title==''){
		$("#"+pmyGrid1.id).datagrid({noheader: true});
	}
	if (pmyGrid1.rownumber){
		$("#"+pmyGrid1.id).datagrid({rownumbers:true});	
	}
	if (pmyGrid1.collapsible){
		$("#"+pmyGrid1.id).datagrid({collapsible:true});	
	}
	if (pmyGrid1.checkbox=='single'){
		$("#"+pmyGrid1.id).datagrid({singleSelect:true});
	}else if (pmyGrid1.checkbox=='multiple'){
		$("#"+pmyGrid1.id).datagrid({singleSelect:false});
	}
	if (pmyGrid1.sortablefields!=undefined && pmyGrid1.sortablefields!=''){
		var cols=$("#"+pmyGrid1.id).datagrid('options').columns[0];
		//$("#"+pmyGrid1.id).datagrid('options').columns[0][0].align="right";
		//$("#"+pmyGrid1.id).datagrid('options').columns[0][0].sortable=true;
		//$("#"+pmyGrid1.id).datagrid();  //修改之后paging和loadgriddata
	}
	//自定义属性
	$("#"+pmyGrid1.id).attr('xcontextmenu',pmyGrid1.menu); 
	$("#"+pmyGrid1.id).attr('xcheckbox',pmyGrid1.checkbox);
	$("#"+pmyGrid1.id).attr('xid', pmyGrid1.id);
	$("#"+pmyGrid1.id).attr('xcheckonclick', pmyGrid1.checkonclick);
	$("#"+pmyGrid1.id).attr('xsingleselect', pmyGrid1.singleselect);
	$("#"+pmyGrid1.id).datagrid({
		onDblClickRow:function(index,row){
			var xid=$(this).attr('xid');
			myGridEvents(xid, 'onDblClickRow');
		},
		onSelect:function(index,row){
			var xid=$(this).attr('xid');
			$(this).attr('rowindex', index);
			//pmyGrid1.record=row;
			//pmyGrid1.rowindex=index;
			myGridEvents(xid, 'onSelect');
		},
		onClickRow:function(index,row){
			var xid=$(this).attr('xid');
			var xcheckonclick=$(this).attr('xcheckonclick');
			var xsingleselect=$(this).attr('xsingleselect');
			var xrowindex=$(this).attr('rowindex');  //old rowindex value
			//pmyGrid1.record=row;
			//pmyGrid1.rowindex=index;
			if (xcheckonclick==0){
				//单击不改变checkbox状态
				//if (myIsRowChecked(pmyGrid1)) $(this).datagrid('uncheckRow',pmyGrid1.rowindex);
				//else $(this).datagrid('checkRow',pmyGrid1.rowindex);
				//$(this).datagrid('uncheckRow',pmyGrid1.rowindex);
				//$(this).datagrid('unselectRow',pmyGrid1.rowindex);
			}
			if (xsingleselect==1){
				var rows=$("#"+xid).datagrid("getRows");
				for (var i=0;i<rows.length;i++){
					if (xrowindex!=i) $(this).datagrid('unselectRow', i);
				}
				$(this).datagrid("selectRow", xrowindex);
			}
			$(this).attr("rowindex", index);			
			myGridEvents(pmyGrid1.id,"onClickRow");
		},
		onClickCell:function(index, field, value){
			var columnset1=$(this).datagrid("options").columns[0]; //
			var columnset2=$(this).datagrid("options").frozenColumns[0];
			pmyGrid1.celltype='';
			for (i=0; i<columnset2.length && pmyGrid1.celltype==''; i++){
				if (columnset2[i].field==field) pmyGrid1.celltype=columnset2[i].type;
			}	
			for (i=0; i<columnset1.length && pmyGrid1.celltype==''; i++){
				if (columnset1[i].field==field) pmyGrid1.celltype=columnset1[i].type;
			}	
			//console.log(columnset1);
			//console.log(columnset2);
			//console.log(i,pmyGrid1.celltype);
			var xid=$(this).attr('xid');
			$(this).attr("rowindex", index);
			$(this).attr("cellfield", field);
			$(this).attr("cellvalue", value);
			pmyGrid1.rowindex=index;
			pmyGrid1.cellfield=field;
			pmyGrid1.cellvalue=value;
			//var rows=$("#"+xid).datagrid("getRows");    // get current page rows
			//pmyGrid1.record=rows[pmyGrid1.rowindex];
			myGridEvents(xid, "onClickCell");
		}		
	});	
	if (pmyGrid1.pagesize>0){
		myGridPaging(pmyGrid1);  //定义分页栏模式
	}
	pmyGrid1.lastrowno=-1;  //上条记录的行号
	return pmyGrid1;
}

function myIsRowChecked(pmyGrid1){
	var flag=false;
	var grid=$("#"+pmyGrid1.id);
	var rows=grid.datagrid("getChecked"); //getChecked
	var rowindex=grid.attr('rowindex');
	for (var i=0; i<rows.length; i++){
		if (rowindex==rows[i].sysrowno){
			flag=true;
			break;
		}
	}
	return flag;
}

//ttttttttreegrid
function myTreeGrid(pmyGrid1){
	if (pmyGrid1.treeclass==undefined) pmyGrid1.treeclass='treegrid';
	var str='';
	var xcheckbox='false';
	var xanimate='false';
	var xline='false';
	var xedit='false';
	if (pmyGrid1.checkbox) xcheckbox='true'; 
	if (pmyGrid1.line) xline='true'; 
	if (pmyGrid1.animate) xanimate='true'; 
	if (pmyGrid1.editable) xedit='true';
	str+='<div id="'+pmyGrid1.id+'" style="position:absolute; overflow:auto;';
	if (pmyGrid1.top>0) str+=" top:"+pmyGrid1.top+"px;";
	if (pmyGrid1.left>0) str+=" left:"+pmyGrid1.left+"px;";
	str+='" class="easyui-treegrid" data-options="fit:true, animate:'+xanimate+', checkbox:'+xcheckbox+', lines:'+xline;
	if (pmyGrid1.toolbar!=undefined && pmyGrid1.toolbar!='') str+='toolbar:'+pmyGrid1.toolbar+'';
	str+='"></div>';
	//console.log(str);
	if (pmyGrid1.summeryfields==undefined) pmyGrid1.summeryfields='';
	if (pmyGrid1.fontsize==undefined) pmyGrid1.fontsize=syslabel.fontsize;
	var str='';
	if (pmyGrid1.top>0 || pmyGrid1.left>0){
		str+='<div id="'+pmyGrid1.id+'_div" style="position:absolute;';
		if (pmyGrid1.top>0) str+=" top:"+pmyGrid1.top+"px;";
		if (pmyGrid1.left>0) str+=" left:"+pmyGrid1.left+"px;";
		str+='">';
	} 
	str+='<div id="'+pmyGrid1.id+'" class="easyui-treegrid" data-options="';
	if (pmyGrid1.toolbar!=undefined && pmyGrid1.toolbar!='') str+='toolbar:'+pmyGrid1.toolbar+'';
	str+='" style="position:absolute;" ></div>';
	if (pmyGrid1.top>0 || pmyGrid1.left>0){
		str+='</div>';
	} 
	$("#"+pmyGrid1.parent).append($(str));
	if (pmyGrid1.sortfield==undefined || pmyGrid1.sortfield=='') pmyGrid1.sortfield=pmyGrid1.keyfield;
	if (pmyGrid1.checkonclick==undefined) pmyGrid1.checkonclick=1; //单击是否改变checkbox状态
	pmyGrid1.rowcount=0;
	pmyGrid1.columns=[];
	pmyGrid1.scrollcolumns=[];
	pmyGrid1.fixedcolumns=[];
	pmyGrid1.checkboxcolumn=[];
	//提取列名
	pmyGrid1.fieldset=pmyGrid1.datafields;
	pmyGrid1=myGridColumns(pmyGrid1);
	pmyGrid1.scrollcolumns=pmyGrid1.columnset;
	//提取固定列列名
	pmyGrid1.fieldset=pmyGrid1.fixedfields;
	pmyGrid1=myGridColumns(pmyGrid1);
	pmyGrid1.fixedcolumns=(pmyGrid1.fixedcolumns).concat(pmyGrid1.columnset);	
	//合成列定义
	pmyGrid1.columns=(pmyGrid1.fixedcolumns).concat(pmyGrid1.scrollcolumns);
	if (pmyGrid1.checkbox!=''){
		pmyGrid1.checkboxcolumn.push({type:"cb", field:"sys_checkedflag", width: 20, checkbox: true, align:"center"});
	}
	if (pmyGrid1.fixedfields!='') pmyGrid1.fixedcolumns=pmyGrid1.checkboxcolumn.concat(pmyGrid1.fixedcolumns)
	else pmyGrid1.fixedcolumns=pmyGrid1.checkboxcolumn;
	if (pmyGrid1.width<=0) pmyGrid1.width='100%';
	if (pmyGrid1.height<=0) pmyGrid1.height='100%';
	var myGrid1=pmyGrid1.id;
	//确定排序列与过滤列
	var tmp='';  ////从网格中提取列标题作为下拉框选项
	for (var i=0;i<pmyGrid1.columns.length;i++){
		if (pmyGrid1.columns[i].title!=''){
			if (tmp!='') tmp+=';';
			tmp+=pmyGrid1.columns[i].title+'/'+pmyGrid1.columns[i].field;
		}
	}
	if (pmyGrid1.filterfieldset=='') pmyGrid1.filterfieldset=tmp;
	if (pmyGrid1.sortfieldset=='') pmyGrid1.sortfieldset=tmp;
	pmyGrid1.fieldset=pmyGrid1.filterfieldset;
	pmyGrid1=myGridColumns(pmyGrid1);
	pmyGrid1.filterfields=pmyGrid1.columnset;
	pmyGrid1.fieldset=pmyGrid1.sortfieldset;
	pmyGrid1=myGridColumns(pmyGrid1);
	pmyGrid1.sortfields=pmyGrid1.columnset;
	var tmp1='';
	var tmp2='';
	for (var i=0;i<pmyGrid1.filterfields.length;i++){
		if (tmp1!='') tmp1+=';';
		tmp1+=pmyGrid1.filterfields[i].title;
	}	
	for (var i=0;i<pmyGrid1.sortfields.length;i++){
		if (tmp2!='') tmp2+=';';
		tmp2+=pmyGrid1.sortfields[i].title;
	}	
	pmyGrid1.filterfielditems=tmp1;
	pmyGrid1.sortfielditems=tmp2;
	//属性设置	
	pmyGrid1.rowindex=-1;
	if (pmyGrid1.striped==undefined || pmyGrid1.striped=='') pmyGrid1.striped=false;
	else pmyGrid1.striped=true; 
	if (pmyGrid1.checkbox=='single') var selectoncheck=true;
	else var selectoncheck=false;	
	
	//设置单元格对齐
	$("#"+pmyGrid1.id).treegrid({
		title: '&nbsp;'+pmyGrid1.title,
		width: pmyGrid1.width,
		height: pmyGrid1.height,
		iconCls: "panelIcon",
		nowrap: true, //false,
		autoRowHeight: false, //true,
		//sortName: pmyGrid1.keyfield,
		remoteSort:false,
		sortOrder: 'asc', 		
		selectOnCheck: selectoncheck, //true,
		checkOnSelect: selectoncheck, //true,
		striped: pmyGrid1.striped,
		treeField: pmyGrid1.treefield,
        idField: 'id',
		frozenColumns: [pmyGrid1.fixedcolumns],
		columns: [pmyGrid1.scrollcolumns]
	});
	$("#"+pmyGrid1.id).attr('xcontextmenu',pmyGrid1.menu); //自定义属性
	$("#"+pmyGrid1.id).attr('xcheckbox',pmyGrid1.checkbox); //自定义属性
	if (pmyGrid1.menu!=undefined && pmyGrid1.menu!=''){
		$("#"+pmyGrid1.id).treegrid({
			onRowContextMenu: function(e,index,record){
				e.preventDefault(); //阻止浏览器捕获右键事件  
				var xmenu=$(this).attr('xcontextmenu');  //自定义属性
				var xcheckbox=$(this).attr('xcheckbox');
				if (xcheckbox=='single') $(this).treegrid("selectRow", index); //根据索引选中该行  
				$('#'+xmenu).menu('show', {   //显示右键菜单  
					left: e.pageX, //在鼠标点击处显示菜单  
					top: e.pageY  
				});
				myTreeEvents(pmyGrid1.id,'onRowContextMenu');
			}
		});
	}
	if (pmyGrid1.title==''){
		$("#"+pmyGrid1.id).treegrid({noheader: true});
	}
	if (pmyGrid1.rownumber){
		$("#"+pmyGrid1.id).treegrid({rownumbers:true});	
	}
	if (pmyGrid1.collapsible){
		$("#"+pmyGrid1.id).treegrid({collapsible:true});	
	}
	if (pmyGrid1.checkbox=='single'){
		$("#"+pmyGrid1.id).treegrid({singleSelect:true});
	}else if (pmyGrid1.checkbox=='multiple'){
		$("#"+pmyGrid1.id).treegrid({singleSelect:false});
	}
	if (pmyGrid1.sortablefields!=undefined && pmyGrid1.sortablefields!=''){
		var cols=$("#"+pmyGrid1.id).treegrid('options').columns[0];
	}
	//从数据库中提取数据，与tree程序相同，数据刷新页用相同程序
	pmyGrid1=myRefreshTreeData(pmyGrid1);		//取数据
	/*
	var root=$("#"+pmyGrid1.id).treegrid('getRoot');
	var rowcount=root.total+'';  //转换为字符型
	var width=(rowcount.length*6+8);
	if (width<25) width=25;
	var w=width+'px';
	$('.datagrid-header-rownumber,.datagrid-cell-rownumber').css({"width":w});
	$("#"+pmyGrid1.id).treegrid('resize');  //必须写
	*/

	$("#"+pmyGrid1.id).treegrid({
		xonBeforeEdit:function(index,row){	
			var ed = $(this).datagrid('getEditor', {
				index: index,
				field: 'productid'
			});
			row.productname = $(ed.target).combobox('getText');
		},
		onDblClickRow: function(node){
			if (node.state=='closed') $(this).treegrid('expand', node.id);
			else $(this).treegrid('collapse', node.id);
			myTreeEvents(pmyGrid1.id,'ondblclick',node);
			
		},
		 onSelect: function(node){
			 if (pmyGrid1.editable==1){  //对于可编辑的行，换行时取消原来行的编辑状态
				if (node!=null && node.id!='*'){ 
					var editingId;
					if (editingId != undefined){
						$('#'+pmyGrid1.id).treegrid('select', editingId);
						return;
					}
					if (node){
						editingId = node.id;
						$('#'+pmyGrid1.id).treegrid('beginEdit', editingId);
						if (pmyGrid1.selectednode!=null && pmyGrid1.selectednode.id!=node.id){
							$('#'+pmyGrid1.id).treegrid('endEdit', pmyGrid1.selectednode.id);
						}
						$("input:text").click(function(){
							$(this).select();  //聚焦选中全部字符 
						});
						//设置单元格对齐
						for (var i=0;i<pmyGrid1.columns.length;i++){
							if (pmyGrid1.columns[i].edit==1 && (pmyGrid1.columns[i].type=='n' || pmyGrid1.columns[i].type=='f' || pmyGrid1.columns[i].type=='e' || pmyGrid1.columns[i].align=='right')){
								var ed=$('#'+pmyGrid1.id).treegrid('getEditor', {
									index: node.id,
									field: pmyGrid1.columns[i].field
								});
								if (ed){//对齐
									if (pmyGrid1.columns[i].type=='n' || pmyGrid1.columns[i].type=='f'){	
										$(ed.target).numberbox('textbox').css('text-align','right');  //右对齐
									}else if (pmyGrid1.columns[i].type=='e'){
										eval('v1=pmyGrid1.'+ed.field+'.min');
										eval('v2=pmyGrid1.'+ed.field+'.max');
										if (v1!=undefined || v2!=undefined){
											if (v1!=undefined) $(ed.target).numberspinner({min:v1});
											if (v2!=undefined) $(ed.target).numberspinner({max:v2});
											$(ed.target).numberspinner({value:eval("node."+ed.field)});
										}
										$(ed.target).numberspinner('textbox').css('text-align','right');  //右对齐
									}else{
										$(ed.target).textbox('textbox').css('text-align','right');  //右对齐
									}
								}
							}	
						}
					}
				}
			}	
			pmyGrid1.selectednode=node;
			myTreeEvents(pmyGrid1.id,'onselect',node);
		},
		filter: function(q, node){  //过滤，按助记码过滤
			var xtext=node.text.toLowerCase();
			var qtext=q.toLowerCase();
			var flag1=xtext.indexOf(qtext) >= 0;
			var flag2=myGetMemoCode(xtext).indexOf(qtext) >= 0;
			return flag1+flag2;
		}		
	});	
	
	if (pmyGrid1.menu!=undefined && pmyGrid1.menu!=''){
		$('#'+pmyGrid1.id).treegrid({
			onContextMenu: function(e, node){
				e.preventDefault();
				$('#'+pmyGrid1.id).treegrid('select',node.id);
				$('#'+pmyGrid1.menu).menu('show', {
					left: e.pageX,
					top: e.pageY
				});
			}
		});	
	}
	
	return pmyGrid1;
}
//------------------------------eeevents---------------------
function myCheckBoxChange(id,items){
	//讲选中值保存到id_hiddenfield控件中
	var str='';
	var tmp=items.split(';');
	for (var i=1;i<=tmp.length;i++){
		if (i==1 &&tmp.length==1) var itemid=id;
		else var itemid=id+i;
		if ($('#'+itemid).is(':checked')) str+=';'+tmp[i-1];
	}
	$('#'+id).val(str.substr(1));
}

//ccccccccccc
function myGetComboData(id, filtersql){  //从后台获取数据直接给客户端
	if ($("#"+id).length==0) return;
	var index=$("#"+id).attr("xnodeindex");
	var params=$("#"+id).attr("xparams");
	if (filtersql==undefined) filtersql='';
	valuelist=myGetSqlParamValues(params);
	$.ajax({     
		type: "Post",     
		url: "system/easyui_getComboData.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: { nodeindex:index, filtersql:filtersql, valuelist:valuelist }, 
		async: false, method: 'post',    
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source      
			var source=eval(data);
			$("#"+id).combobox({data: source});
			/*
			var items = $('#'+id).combobox('getData');
			if (items.length<=12) $('#'+id).combobox({panelHeight: 'auto'});
			else $('#'+id).combobox({panelHeight: 12*(syslabel.fontsize+8)});
			if (items.length > 0) {
				$("#"+id).combobox('select', eval("items[0]."+id));
			}
			*/
			if (source.length<=12) $('#'+id).combobox({panelHeight: 'auto'});
			else $('#'+id).combobox({panelHeight: 12*(syslabel.fontsize+8)});
			if (source.length>0){
				//console.log(id,source[0]);
				fid=$("#"+id).attr('xfield');
				//$("#"+id).combobox('select', eval("source[0]."+id));  //会触发select事件，出错
				$("#"+id).combobox('setValue', eval("source[0]."+fid));
			}			
		}  
	}); 
}

function myGetAllComboData(pservice){
	//讲所有combofield的数据进行加载
	for (var i=0; i<pservice.dbcombofield.length; i++){
		if (pservice.dbcombofield[i].masterfield==undefined || pservice.dbcombofield[i].masterfield==''){
			myGetComboData(pservice.dbcombofield[i].id, pservice.dbcombofield[i].filtersql);
		}
	}
}

function mySetComboxByIndex(id,index){  //设置combobox选项
	if ($('#'+id).length>0){
		var items = $('#'+id).combobox('getData');
		if (items.length > 0 && index<items.length) {
			$("#"+id).combobox('setValue', eval("items[index]."+id));
		}
	}
}

function mySelectComboByIndex(id,index){  //设置combobox选项
	if ($('#'+id).length>0){
		var items = $('#'+id).combobox('getData');
		if (items.length > 0 && index<items.length) {
			$("#"+id).combobox('select', eval("items[index]."+id));
		}
	}
}

function mySetTreeNodeByIndex(id,index){  //设置combobox选项
	//选中第n个结点
	var item = $('#'+id).tree('getRoot');
	if (item.children) $("#"+id).tree('expand', item.target);
	$("#"+id).tree('select', item.target);
	//$("#"+id).tree('select', index);
	//$("#"+id).tree('find', value);
}

//将数据库查询结果或树节点值赋值到表单控件中
function mySetFormValues(fieldset,source){
	//将符合Json格式的行或节点值复制到表单fieldset中
	var xfields=[];
	var k=0;
	if (fieldset==undefined || fieldset==''){
		$.each(source, function(id, value) {  //取json中每个列及其值
			xfields[k]=id; k++;
		});
	}else{
		xfields=fieldset.split(';');
	}
	if (source!=null){
		for (var k=0; k<xfields.length; k++){
			var cmp=$('#'+xfields[k]);
			//取控件的xfield值，即控件id对应的虚拟列名,然后从source中取对应列的值，放到扩建中
			if (cmp.length>0 && cmp.attr('xfield')!=undefined){
				var field=cmp.attr('xfield');
				var value=eval("source."+field);
				//console.log(k, xfields[k],field,value);
				//如果数据查询结果中存在这个列，就赋值到控件
				if (value!=undefined) mySetValue(xfields[k], value);
				//if (xfields[k]=='rf1') console.log('f',myGetValue(xfields[k]), xfields[k],field);
				//上传文件类型处理
				if (cmp.length>0 && cmp.attr('xtype')=='file' && source.filesourcename!=undefined){ //将数据库中附件文件信息赋值到file控件中
					cmp.attr('xfilesourcename',source.filesourcename);
					cmp.attr('xfileosname',source.fileosname);
					cmp.attr('xfilesize',source.filesize);
					cmp.attr('xfilesizedesc',source.filesizedesc);
					cmp.attr('xuploaddate',source.uploaddate);
					cmp.attr('xuploadtime',source.uploadtime);
					cmp.attr('xdownloadtimes',source.downloadtimes);
				}
			}	
		}
	}else{
		for (var k=0;k<xfields.length;k++){
			mySetValue(xfields[k],'');
			var cmp=$('#'+xfields[k]);
			if (cmp.length>0 && cmp.attr('xtype')=='file'){
				cmp.attr('xfilesourcename','');  
				cmp.attr('xfileosname','');  
				cmp.attr('xfilesize',0);  
				cmp.attr('xfilesizedesc','');  
				cmp.attr('xuploaddate','');
				cmp.attr('xuploadtime','');
				cmp.attr('xdownloadtimes','0');				
			}
		}
	}
}

function mySetReadonly(c, flag){  //对函数定义的控件（包括xid自定义属性的）只读
	//c为空时，对所有xid属性非空的控件设置只读
	var xfields=[];
	if (c!='') xfields=c.split(';');
	else{
		var k=0;
		$('input, select, textarea').each(function(index){  
			var input = $(this);
			if (input.attr('id')!=undefined && input.attr('xid')!=undefined && input.attr('xid')!=''){
				xfields[k]=input.attr('id');
				k++;
			}	
		});	
	}	
	var type='';
	var id='';
	var value='';
	var hidden='';
	var pid='';  //checkbox的大组名称
	for (k=0;k<xfields.length;k++){
		//var input = $(this);
		var input=$("#"+xfields[k]);
		id=input.attr('id');
		type=input.attr('xtype');
		hidden=input.attr('hidden');
		//只有原来是可编辑的列才可以设置其状态，本来就只读的列，不能改成可编辑
		if (id!=undefined && hidden!='hidden' && input.attr('xreadonly')==0){
			if (type=='text') $("#"+id).textbox('readonly',flag);
			else if (type=='textarea') $("#"+id).attr('readonly',flag);
			else if (type=='combo') $("#"+id).combobox('readonly',flag);
			else if (type=='checkbox') $("#"+id).attr('disabled',flag);
			else if (type=='keditor'){
				if (flag) var str="window."+id+".readonly(true);";
				else var str="window."+id+".readonly(false);";
				eval(str);
			}else $("#"+id).attr('readonly',flag);
			if (flag) $("#"+id).attr('xreadonly', 1);
			else $("#"+id).attr('xreadonly', 0);
		}
   	}
}

function myShowInputField(c, flag){  //隐藏或显示一个控件，本科他的外层和label
	var xfields=c.split(';');
	for (var k=0; k<xfields.length; k++){
		if (xfields[k]!='' && $('#'+xfields[k]).length>0){
			var cmp1=$('#'+xfields[k]+'_div');
			var cmp2=$('#label'+xfields[k]);  //提示符
			var cmp3=$('#xlabel'+xfields[k]);  //强制输入的提示符
			if (flag){
				if (cmp1.length>0) cmp1.show();
				if (cmp2.length>0) cmp2.show();
				if (cmp3.length>0) cmp3.show();
			}else{	
				if (cmp1.length>0) cmp1.hide();
				if (cmp2.length>0) cmp2.hide();
				if (cmp3.length>0) cmp3.hide();
			}
		}
	}	
}

function myShowPanel(c, flag){  //隐藏或显示panel
	var xfields=c.split(';');
	for (var k=0; k<xfields.length; k++){
		if (xfields[k]!='' && $('#'+xfields[k]).length>0){
			var input=$('#'+xfields[k]);
			if (flag) input.panel('open');
			else input.panel('close');
		}
	}	
}

function myShowButton(c, flag){  //隐藏或显示控件
	var xfields=c.split(';');
	for (var k=0;k<xfields.length;k++){
		var input=$("#"+xfields[k]);
		if (xfields[k]!='' && input.length>0){
			if (flag) input.show();
			else input.hide();
		}
		var input1=$("#"+xfields[k]+"_sep");
		if (xfields[k]!='' && input1.length>0){
			if (flag) input1.css({"border-left":'1px solid LightGrey'});
			else input1.css({"border-left":'0px'});
		}
	}	
}

function mySetEnabled(c,flag){  //对函数定义的控件（包括xid自定义属性的）只读
	var xfields=c.split(';');
	for (var k=0;k<xfields.length;k++){
		var input=$("#"+xfields[k]);
		if (input.length>0){
			type=input.attr('xtype');
			if (type=='linkbutton'){
				if (flag) input.linkbutton('enable');
				else{
					input.linkbutton('disable');
				} 
			}else if (type='menuitem'){
				var parent=$("#"+input.attr('xparent'));
				if (flag){
					parent.menu('enableItem',$("#"+xfields[k]));
				}else{
					parent.menu('disableItem',$("#"+xfields[k]));
				}
			}
		}
   	}
}

function myClearForm(fieldset){  //重置表单	
	var xfields=[];
	var i=0;
	if (fieldset==undefined || fieldset==''){
		$('input, select, textarea').each(function(index){  
			var input = $(this);
			id=input.attr('id');
			xfields[i]=id;
			i++;
		});
	}else{
		xfields=fieldset.split(';');
	}
	for (var i=0;i<xfields.length;i++){
		if (xfields[i]!=''){
			input=$('#'+xfields[i]);
			if (input.length>0 && input.attr('xvalue')==undefined) mySetValue(xfields[i],'');
			else mySetValue(xfields[i], input.attr('xvalue')); //按初值设置
		}
   	}
}

function mySetRecordValuebyForm(record,fieldset){  //将表单数据赋值到记录或树节点中
	var xfields=[];
	if (fieldset==undefined || fieldset==''){
		k=0;
		$.each(record, function(id,value){
			xfields[k]=id; k++;
		});
	}else{
		xfields=fieldset.split(';');
	}
	for (var k=0;k<xfields.length;k++){
		eval('record.'+xfields[k]+'="'+myGetValue(xfields[k])+'";');
	}	
	return (record);
}

function mySetRecordValuebyJson(record,source){  //将表单数据赋值到记录或树节点中
	$.each(source, function(id,value){
		eval('record.'+id+'="'+value+'";');
	});
	return (record);
}

function myGenJsonData(json,fieldset){  //根据表单值生成一个json格式数据
	//获取json中包含的列或fieldset的列，生成json格式数据
	var xfields=[];
	if (fieldset==undefined || fieldset==''){
		k=0;
		$.each(json, function(id,value){
			xfields[k]=id; k++;
		});
	}else{
		xfields=fieldset.split(';');
	}
	var result='{';
	for (var k=0;k<xfields.length;k++){
		if (k>0) result+=',';
		result+='"'+xfields[k]+'":"'+myGetValue(xfields[k])+'"';
	}
	result+='}';
	return (result);
}

function mySqlFromRecord(fieldset,record){
	var sql={};
	var sql1="";
	var sql2="";
	//当record为空时，根据表单生成
	if (fieldset!='' && record){
		for (var i=0; i<fieldset.length; i++){
			var field=fieldset[i].field;
			var type=fieldset[i].type;
			var value=eval('record.'+field);
			if (value==undefined) value='';
			var value=myToSqlValue(value);
			if (type=='n' && (value=='' || isNaN(value))) value='0';  //数值型数据
			if (i>0){
				sql1+=','  
				sql2+=','
			}
			if (type=='m'){
				if (value==''){
					sql1+="''";
					sql2+=field+"=''";
				}else{
					sql1+="replace('"+value+"',char(10),'')";  //memofield
					sql2+=field+"=replace('"+value+"',char(10),'')";  //memofield
				}
			}else{
				if (value=='@sysdate'){
					sql1+="getdate()";
					sql2+=field+"=getdate()";
				}else{
					sql1+="'"+value+"'";
					sql2+=field+"='"+value+"'";
				}
			}
		}
		sql1+='';
	}
	sql.insertsql=sql1;
	sql.updatesql=sql2;
   	return(sql);	
}

function myInsertSqlFromRecord(record,tablename){
	var fieldset='';
	$.ajax({     
		type: "Post",     
		url: "system//easyui_getEditableFields.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {	tablename: myToXcode(tablename)	}, 
		async: false, method: 'post',    
		success: function(data) {   
			eval("fieldset="+data+";");
		}     
	});
	var sql='';
	if (fieldset!='' && record){
		var insertsql1="insert into "+tablename+"(";
		var insertsql2="values(";
		for (var i=0; i<fieldset.length; i++){
			var field=fieldset[i].field;
			var type=fieldset[i].type;
			var value=eval('record.'+field);
			if (value==undefined) value='';
			var value=myToSqlValue(value);
			if (type=='n' && (value=='' || isNaN(value))) value='0';  //数值型数据
			if (i>0){
				insertsql1+=','  
				insertsql2+=','
			}
			insertsql1+=field;
			if (type=='m'){
				if (value=='') insertsql2+="''";
				else insertsql2+="replace('"+value+"',char(10),'')";  //memofield
			}else{
				if (value=='@sysdate') insertsql2+="getdate()";
				else insertsql2+="'"+value+"'";
			}
		}
		sql+=insertsql1+') '+insertsql2+')';
	}	
	console.log(sql);
   	return(sql);	
}

function myInsertRowbyForm(pmyTable){  //获取一个表中可编辑的列名
	result=[];
	jdata=myGetSqlDatabyForm(pmyTable);
	$.ajax({     
		type: "Post",     
		url: "system//easyui_runUpdateSql.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {
			dataset: jdata,
			nodeindex: pmyTable.nodeindex,
			action: 'insert'			
		}, 
		async: false, method: 'post',    
		success: function(data) {   
			eval("result="+data+";");
		}     
	});
   	return(result);
}

function myUpdateRowbyForm(pmyTable){  //获取一个表中可编辑的列名
	result=[];
	jdata=myGetSqlDatabyForm(pmyTable);
	//console.log('updatesql', jdata);
	$.ajax({     
		type: "Post",     
		url: "system//easyui_runUpdateSql.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {
			dataset: jdata,
			nodeindex: pmyTable.nodeindex,
			action: 'update'			
		}, 
		async: false, method: 'post',    
		success: function(data) {   
			eval("result="+data+";");
		},     
		failure: function(data) {   
			console.log('error',data)
		}     
	});
   	return(result);
}

function myGetSqlDatabyForm(pmyTable){
	//获取一个表中可编辑的列名(虚拟列)，从其对于的控件id中获取表单中的值，组成一个json格式的值，传到服务器端
	var result={};  //执行sql语句之后返回结果
	var fieldset=pmyTable.fields;  //数据库中虚拟列名集合
	var jdata='[';
	var j=0;
	for (var i=0; i<fieldset.length; i++){ //处理每一个列
		var field=fieldset[i].field;  //数据库中虚拟列名称
		var id=fieldset[i].id;  //控件的id
		//找到控件，有xsaveflag的需要保存
		if (id!=undefined && id!='' && $('#'+id).length>0 && $('#'+id).attr('xsaveflag')!=0){
			if ($('#'+id).attr('xsaveflag')==undefined) $('#'+id).attr('xsaveflag',1); 
			var type=fieldset[i].type;
			var value=myToSqlValue(myGetValue(id));
			if (type=='n' && (value=='' || isNaN(value))) value='0';  //数值型数据
			if (j>0) jdata+=',';
			//后台处理type='m'问题;
			jdata+='{"type":"'+fieldset[i].type+'", "readonly":"'+fieldset[i].readonly+'","field":"'+field+'","value":"'+value+'"}';  //后台处理type='m'问题;
			/*
			if (type=='m'){
				if (value=='') jdata+='""';
				else jdata+="\"replace('"+value+"',char(10),'')\"";  //memofield
			}else{
				if (value=='@sysdate') jdata+="\"getdate()\"";
				else jdata+='"'+value+'"';
			}
			*/
			j++;
		}
	}
	jdata+=']';
	//console.log(jdata);
	/*
	//[{"n1_field2":"131","c0_field3":"管理信息系统试题库（双语）","c0_}]
	$.ajax({     
		type: "Post",     
		url: "system//easyui_runUpdateSql.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {
			dataset: jdata,
			nodeindex: pmyTable.nodeindex,
			action: action			
		}, 
		async: false, method: 'post',    
		success: function(data) {   
			eval("result="+data+";");
		}     
	});
   	return(result);
   	*/
	return jdata;
};	

//生成update语句
function myGenUpdateSql(pmyTable){  //获取一个表中可编辑的列名
	var fieldset=pmyTable.fields;
	sql="update "+tablename+" set ";
	sql="";
	for (var i=0; i<fieldset.length; i++){
		var field=fieldset[i].field;
		if (fieldset[i].readonly==0 && $('#'+field).length>0){
			if (sql!='') sql+=','  
			value=myToSqlValue(myGetValue(field));
			type=fieldset[i].type;
			if (type=='n' && (value=='' || isNaN(value))) value='0';  //数值型数据
			if (type=='m'){
				if (value=='') sql+=field+"=''";
				else sql+=field+"=replace('"+value+"',char(10),'')";
			}else{
				if (value=='@sysdate') sql+=field+"=getdate()";
				else sql+=field+"='"+value+"'";
			}
		}
		sql="update "+tablename+" set "+sql+" where "+keyfield+"='"+myToSqlValue(myGetValue(keyfield))+"'";
	}
	//console.log(sql);
   	return(sql);
};	

///dddddddddddddiv
function myKeyDownEvent(c){   //kkkkkkkkkeydown
 	var pfield=[];
 	var k=0;
 	var ptype=''; 
 	var pid='';
 	var phidden='';
 	if (c!=undefined && c!='') pfield=c.split(';');
 	else{
 	 	//$('input, select, textarea').each(function(index){  
		$('input').each(function(index){
			pfield[k]=$(this).attr('id');
			k++;
		});
	}
 	var focusedfield='';
	for (k=0; k<pfield.length; k++){
		if (pfield[k]!=undefined && pfield[k]!='' && $("#"+pfield[k]).length>0){
			var pinput = $("#"+pfield[k]);
			ptype=pinput.attr('type');
			if (ptype==undefined) ptype=pinput.attr('xtype');
			phidden=pinput.attr('hidden');
			//if (pfield[k]!=undefined && pinput!=undefined && phidden!='hidden' && ptype!='checkbox' && ptype!='textarea' && ptype!='file' && ptype!='button' ){
			if (pinput!=undefined && phidden!='hidden' && sys.keyeventcmp.indexOf(';'+ptype+';')>=0){
				if (pinput.attr('xreadonly')==undefined) pinput.attr('xreadonly', 1);
				myBindKeyDownEvent(pfield[k]);
				pinput.attr('xkeydown', 1);  //记录需要键盘操作控制的列
				if (focusedfield=='' && pinput.attr('xreadonly')==1){
					myFocus(pfield[k]);
					focusedfield=pfield[k];
				}
			}
		}
 	}  //for k
} 	
 	
function myBindKeyDownEvent(id){   //kkkkkkkkkeydown
	var type=$('#'+id).attr('type');
	if (type==undefined) type=$('#'+id).attr('xtype');
	var cmp=$('#'+id);
	if (cmp.length>0 && type!='checkbox' && type!='textarea' && type!='button' && type!='file'){
		$('#'+id).textbox('textbox').bind('keydown',function(e){
			var key=e.which;
			//e.preventDefault();  //不能加，否则只读
			var xcmp=[];
			var xtype=[];
			var i=0;
			if (key==13 || key==40 || key==38){ //  || key==35 || key==36){  //38--up  40--down
				var xno=-1;
				//$('input, select, textarea').each(function(index){  
				$('input').each(function(index){  
					var input = $(this);
					var field=input.attr('id');
					var hidden=input.attr('hidden');
					var flag=input.attr('xkeydown');  //是否需要键盘控制
					var type=input.attr('type');
					if (type==undefined) type=input.attr('xtype');
					if (field!=undefined && flag!=undefined && flag==1 && hidden!='hidden'){
						if (id==field) xno=i;
						xcmp[i]=field;
						xtype[i]=type;
						i++;
					}
				});
				if (xno<xcmp.length && xno>=0){
					var n=0;
					if (key==13 || key==40 ){  //向下
						if (xno<=i) n=xno+1;
						else n=i;
					}else if (key==38 ){   //向上
						if (xno>0) n=xno-1;
						else n=0;
					} 
					var xnewcmp=xcmp[n];
					var xtype=xtype[n];
					//$('#'+xnewcmp).next().find('input').focus();
					if (xtype=='textarea') $("#"+xnewcmp).focus();
					else $("#"+xnewcmp).next("span").find("input").focus();
				}
			}
		});
	}
}	

function myDisableCmp(items,flag){
	var tmp=items.split(';')
	for (var i=0; i<tmp.length; i++){
		var cmp=$("#"+tmp[i]);
		if (cmp.length>0){
			var xclass=cmp.attr('class');
			if (xclass.indexOf('linkbutton')>=0){ 
				//cmp.prop('disabled', flag);
				if (flag) cmp.linkbutton('disable');
				else cmp.linkbutton('enable');
			}else if (xclass.indexOf('menubutton')>=0 || xclass.indexOf('menu-item')>=0){
				if (flag) cmp.menubutton({'disabled':true, hasDownArrow: false});
				else cmp.menubutton({'disabled':false, hasDownArrow: false});			
			}else{  // if (xclass.indexOf('file')>=0)
				document.getElementById(tmp[i]).disabled=flag; //禁止HTML控件按钮
			}
		}
	}
}

function myFocus(fieldset){
	//聚焦到第一个非只读的列
	if (fieldset=='') return;
	fielddim=fieldset.split(';');
	for (var i=0; i<fielddim.length; i++){
		var cmp=$("#"+fielddim[i]);
		//console.log(cmp.attr('readonly'),cmp.attr('xreadonly'),cmp,fielddim[i]);
		if (cmp.length>0 && cmp.attr('xreset')!=0 && (cmp.attr('xreadonly')==0 || cmp.attr('xreadonly')==undefined)){
			var xtype=cmp.attr('type');
			if (xtype==undefined) xtype=cmp.attr('xtype');
			if (xtype=='textarea') cmp.focus();
			else cmp.next("span").find("input").focus();
			break;
		}
	}	
}

function mySelectOnFocus(){
	$('input').on('focus', function() {
		var $this = $(this)
		.one('mouseup.mouseupSelect', function() {
			$this.select();
			return false;
		})
		.one('mousedown', function() {
			// compensate for untriggered 'mouseup' caused by focus via tab
			$this.off('mouseup.mouseupSelect');
		})
		.select();
	});
}

//调用后台excel转换程序
function myExportExcelReport(pmyReport1){
	//?问号方式传递无法向后台传递带%的字符
	pmyReport1.headercells=pmyReport1.headercells.replace(eval("/"+"%"+"/g"),"％");
	pmyReport1.footercells=pmyReport1.footercells.replace(eval("/"+"%"+"/g"),"％");
	var filename="";
	$.ajax({
		url:'system//easyui_toExcelFile.jsp?headercells='+pmyReport1.headercells+'&footercells='+pmyReport1.footercells,
		data:{  
			template:pmyReport1.template, 
			selectsql:myToXcode(pmyReport1.sql),
			fields:pmyReport1.fields,
			headerrange:pmyReport1.headerrange, 
			regionrange:pmyReport1.regionrange
		},									
		//method: 'POST',
		async:false, method: 'post',
   		success:function(data){
   			eval("var result="+data);
    		filename=result[0].filename;
		}	
	});
	//var xsourcefilename=filename;
	var url='system//easyui_fileDownLoad.jsp?source='+filename+'&target='+pmyReport1.targetfilename;
	window.location.href=url;
	return(url);
}

//生成uniqueidentifier newid()
function myGenNewID(tablename){
	
	
}

function myGetIPAddress(){  //获取IP地址
	var source=[];
	$.ajax({     
		url: "system/easyui_getIPAddress.jsp",     
		async: false, method: 'post', 
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source
			eval("source="+data); 
		}     
	});
	return source;
}
	
function myGetSqlParamValues(params){
	var valuelist='';  //参数值，之间用tab间分隔
	if (params!=undefined){
		var paramdim=params.split(';');
		for (var j=0; j<paramdim.length; j++){
			if (j>0) valuelist+='	';  //tab
			valuelist+=myGetValue(paramdim[j]);  //sys.系统变量已在函数中处理
		}
	}					
	return valuelist;
}

function myRunSqlFunction(func, valuelist){  //调用用户定义表值函数
	var source=[];
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runSqlFunction.jsp",
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {sqlfunction:func, paramvalues:myGetSqlParamValues(params)}, 
		async: false, method: 'post',    
		success: function(data) {     
			eval("source="+data+";"); //source=eval(data); 
		}     
	});
	return source;
}

function myRunSqlProcedure(proc, valuelist){  //调用存储过程
	//params表示存储过程的输入参数，不包括输出参数
	var source=[];
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runSqlProcedure.jsp",
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: { sqlprocedure:proc, paramvalues:valuelist}, 
		async: false, method: 'post',    
		success: function(data) {     
			eval("source="+data+";"); 	//source=eval(data); 
		},
		failure:function(data){
			console.log(data, error);
		}
	});
	return source; //return (jQuery.parseJSON(source)); 
}

function myRunSqlByXmlNode(nodeindex, valuelist){  //单行结果集
	source=[];
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runSqlByXmlNode.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {nodeindex:nodeindex, paramvalues:valuelist}, 
		async: false, method: 'post',    
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source
			eval("source="+data+";");	//source=eval(data); 
		}     
	});
	return source;
	//return (jQuery.parseJSON(source)); 
}

function myRunEvents(pservice, action){
	//需要考虑多个查询语句的合并
	var results=[];
	var errormsg=[];
	var errorid='';
	var checkflag=0;
	for (var i=0; i<pservice.eventset.length; i++){
		//处理一个事件
		node=pservice.eventset[i];
		nodetype=node.nodetype;
		if (node.event!=undefined && node.event==action){
			event=node.event.toLowerCase();
			if (nodetype=='action' || nodetype=='js' ){  //动作、事件标签，不含sql语句，在前台执行，可以带前台变量
				results=[{'error':'', 'fieldid':''}];
				if (node.function!=undefined){  //处理函数
					//执行userfunctions中指定的函数，通常返回一个sys.系统变量
					str=myReplaceXmlParams(node.function);
					//console.log(str);
					if (str.params!='') eval(str.stmt);
					s=eval(str.text);  //调用函数，有没有变量？
				}
				if (node.text!=undefined){  //直接执行语句，可以用sys.变量
					//str=mySetXmlParams(node.text);
					str=myReplaceXmlParams(node.text);
					if (str.params!='') eval(str.stmt);
					if (str.text!=undefined) eval(str.text);
				}
			}else if (nodetype=='sql'){ //数据库标签
				//console.log('sqlvlist---'+valuelist+'---'+node.params);
				var valuelist=myGetSqlParamValues(node.params);
				if (node.text!=undefined) records=myRunSqlByXmlNode(node.nodeindex, valuelist);
				else if (node.fucntion!=undefined) records=myRunSqlFunction(node.function, valuelist);
				else if (node.procedure!=undefined) records=myRunSqlProcedure(node.procedure, valuelist);
				if (records.length>0 && node.check!=undefined && node.check!=''){
					checkflag=1;
					//数据验证,输出验证结果
					vrule=node.check; //.toLowerCase();
					//将records中的json每个列的值取出来，例如rowcount,error的值，放到变量中_rowcount,_error
					$.each(records[0], function(id, value) {  //取json中每个列及其值
						eval("_"+id+"='"+value+"'");  //变量赋值
					});
					flag=eval(vrule);  //验证规则，xml文件规则的变量需要以下划线_开头
					if (flag){  //只能在查询结果为空时，才数据验证合格
						errormsg.push(mySetXmlParams(node.message).text);  //message可以带变量e.g {email}
						if (node.focus!=undefined && errorid=='') errorid=node.focus;   //出错后聚焦到某个列
					}
				}else{  //数据验证正确后，在数据保存之前触发
					results=records;
				}
			} //if nodetype=sql	
		}// if sql,sqlfunction,sqlprocedure
	} //for
	if (checkflag==1){  //按数据验证格式进行结果输出error财务信息，fieldid聚焦的列
		if (errormsg.length==0) results=[{'error':'', 'fieldid':''}];
		else results=[{'error':errormsg, 'fieldid':errorid}];
	}
	return results;
}

function myRunSelectCases(casetype, params){  //多行结果集
	if (params==undefined) params='';
	source=[];
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runSelectCases.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {casetype:casetype, params:params}, 
		async: false, method: 'post',    
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source
			//xdata=data.replaceAll(String.fromCharCode(10),'');
			eval("source="+data+";"); 	//source=eval(data); 
		}     
	});
	return source;  // (jQuery.parseJSON(source)); 
}

function myOfficeToPdf(sourcefile,targetfile){
	//alert(sourcefile+'----'+targetfile);
	var file1=myToXcode(sourcefile);
	var file2=myToXcode(targetfile);
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_office2pdf.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {sourcefile:file1, targetfile:file2}, 
		async: false, method: 'post',   
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source      
			result=''+data.trim();
		}     
	});
	return (result); 
}

function mySetXmlVarValue(s){
	
}

function myDoFiles(action,filename,filetitle,targetfile){
	var filename=myToXcode(filename);
	var filetitle=myToXcode(filetitle);
	var targetfile=myToXcode(targetfile);
	var result='';
	$.ajax({     
		type: "Post",     
		url: "system/easyui_doFiles.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {action:action,filename:filename, filetitle:filetitle, targetfile:targetfile}, 
		async: false, method: 'post',   
		success: function(data) {     
			result=''+data.trim();
		}     
	});
	return (result); 
}

//function mySendEmail(sender,password,email,subject,content,filename,filedesc){
function mySendEmail(sender,email,subject,content,filename,filedesc){
	var s1=myToXcode(sender);
	var s2=myToXcode(email);
	var s3=myToXcode(subject);
	var s4=myToXcode(content);
	var ss1='';
	var ss2='';
	var tmp1=filename.split('	');  //tab
	var tmp2=filedesc.split('	');  //tab
	for (var i=0; i<tmp1.length; i++){
		if (i>0){
			ss1+='	';
			ss2+='	';
		}
		ss1+=myToXcode(tmp1[i]);
		ss2+=myToXcode(tmp2[i]);
	}
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_sendemail.jsp",     
		//contentType: "application/json; charset=utf-8",     
		//dataType: "json", 
		data: {sender: s1, receiver: s2, subject: s3, content: s4, filename:ss1, filedesc:ss2}, 
		async: false, method: 'post',   
		success: function(data) {     
			//返回的数据用data获取内容,直接复制到客户端数组source      
			result=''+data.trim();
		}     
	});
	return (result); 
}

function myDownLoadZipFiles(zipfile,fileurl,filename){
	var fileNameZip = encodeURI(encodeURI(zipfile));		//打包的文件名
	var fileUrlList = encodeURI(encodeURI(fileurl));		//路径文件，以 | 隔开
	var fileNameList = encodeURI(encodeURI(filename));		//各个子文件的文件名，以 | 隔开
	window.location.href = "system/easyui_zipFiles.jsp?fileName=" + fileNameZip + "&fileUrlList=" + fileUrlList + "&fileNameList=" + fileNameList;
}

function myGetCmpPos(objectId){
	o = document.getElementById(objectId);
	oTop = o.offsetTop;
	while(o.offsetParent!=null)	{  
		oParent = o.offsetParent 
		oTop += oParent.offsetTop  // Add parent top position
		o = oParent
	}
	return oTop
}

function myRotate(id,degree){
	var n=$("#"+id).attr('xrotate')*1+degree*1;
	if (n>360) n=n-360;
	$("#"+id).rotate(n);
	$("#"+id).attr('xrotate',n);
}

function mySelectFromTable(tableindex, fieldlist, valuelist){
	results=[];
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runSelectFromTable.jsp",     
		data: {table:tableindex, fieldlist:fieldlist, valuelist:valuelist}, 
		async: false, method: 'post',    
		success: function(data) {
			eval("results="+data);  //不能写成result=eval(data);
		}     
	});
	return result;	
}

function myRunDeleteSql(table, filtersql, keyvalue){
	result={}; 
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runDeleteSql.jsp",     
		data: {table:table, keyvalue:keyvalue, filtersql:filtersql}, 
		async: false, method: 'post',    
		success: function(data) {
			//result={"error":" ","identity":"5"};
			eval("result="+data);  //不能写成result=eval(data);
		}     
	});
	return result;	
}


//eeeeeeeeeeeeeeeeend
function myFormValueSet(fieldset){
	var result='';
	var tmp=[];
	if (fieldset==undefined || fieldset==''){
		k=0;
		$('input, select, textarea').each(function(index){  
			var input = $(this);
			if (input.attr('id')!=undefined && input.attr('xid')!=undefined && input.attr('xid')!=''){
				tmp[k]=input.attr('id');
				k++;
			}
		});	
	}else{
		//将表格或树节点值赋值到表单
		tmp=fieldset.split(';');
	}	
	for (var i=0; i<tmp.length; i++){
		var field=tmp[i];
		var type=$('#'+field).attr('xdatatype');
		var value=myToSqlValue(myGetValue(field));
		if (i>0) result+=',';
		result+='"'+field+'":';
		if (type=='n' && (value=='' || isNaN(value))) value='0';  //数值型数据
		else if (type=='mxxxx'){
			if (value=='') result+='""';
			else result+='"replace(\''+value+'\',char(10),\'\')"';  //memofield
		}else if (value=='@sysdate'){
			result+='"getdate()"';
		}else{
			result+='"'+value+'"';
		}
	}	
	//console.log(result);
	return '[{'+result+'}]';
}

function myRunUpdateSql(nodeindex, data, action){
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runUpdateSql.jsp",
		data: {
			nodeindex: nodeindex,  //对应表的所有信息
			dataset: data,
			action: action			
		}, 
		async: false, method: 'post',    
		success: function(data) {
			eval('result='+data);
		}
	});
	return result;
}	

function myGetValuebyId(id){
	var input=$("#"+id);
	var field=input.attr('xfield');	
}

//-------------------------------------------------------//
//vvvvvvvvvvv
function myGetValue(id){	
	var value='';
	var input=$("#"+id);
	if (id!='' & id.substr(0,4)=='sys.'){ //系统变量,直接返回值
		if (id=='sys.datetime') value='getdate()';
		else if (id=='sys.timestamp') value=myLocalTime().timestamp; //年月日+时间标签		
		else if (id=='sys.dateid') value=myLocalTime().dateid; //年月日		
		else if (id=='sys.timeid') value=myLocalTime().timeid; //时间秒单位		
		else value=eval(id);
	}else if (input.length>0){
		var type=input.attr('type');
		if (type==undefined || type=='') type=input.attr('xtype');
		var hidden=input.attr('hidden');
		var parent=input.attr('xparent');
		var datatype=input.attr('xdatatype');
		if (datatype==undefined) datatype='';
		var flag=1;
		//if ($("#"+parent)!=undefined){
		 //	if ($("#"+parent).attr('type')!=undefined && $("#"+parent).attr('type')=='window') flag=0;
		//}   
		if (hidden=='hidden'){
			if (input.attr('xfixedvalueflag')==1){  //固定值
				value=input.attr('xfixedvalue');
			}else{
				value=input.val();
			}
		}else if (type=='text' && hidden!='hidden'){ //textbox
			value=input.textbox('getValue');
			if (datatype=='n' && (value=='' || isNaN(value))) value='0';
		}else if (type=='combo' || type=='combobox'){
			if (input.attr('xcheckbox')=='true') value=input.combobox('getValues');
			else value=input.combobox('getValue');
		}else if (type=='checkbox'){  //单个checkbox
			if (input.is(':checked')) value=1;
			else value=0;
		}else if (type=='radio'){  //radio
			value=$("input[id='"+id+"']:checked").val() ;
		}else if (type=='checkboxgroup'){  //checkbox组合
			var count=input.attr('xitemcount');
			var value='';
			for (var i=0;i<count;i++){
				if (i==1 && count==1) var itemid=id;
				else var itemid=id+(i+1);
				if ($('#'+itemid).is(':checked')) value+=';'+$('#'+itemid).attr('xtext');
			}
			value=value.substr(1);
		}else if (type=='label' || type=='labelfield'){ 
			value=input.html();
		}else if (type=='keditor'){
			//str="var editor_"+id+"=KindEditor.create('textarea[id=\""+id+"\"]');";
			str="value=window."+id+".html()";
			eval(str);			
			//value=value.replaceAll(String.fromCharCode(10),'');
		}else if (type=='image'){ //图形
			value=input.attr('src');
		}else if (type=='file' || type=='filefield' ){ //文件上传
			value=input.attr('xfileosname');  
		}else{
			value=input.val();			
		}			
	}
	value=''+value;
	//console.log(id,value);
	if (value!=undefined && value!='' && value.indexOf('{')>=0){
		//处理value中是否包含{ }变量问题
		var str=myReplaceXmlParams(value);
		console.log(id, value, str);
		if (str.params!=''){
			eval(str.stmt);
			var s=eval(str.text);  //调用函数，有没有变量？
			if (s!=undefined) value=s;
		}
	}
	if (value=='') value=' ';
	//alert(id+'---'+value);
	return trim(''+value);
}

function mySetValue(id, value){	 //sssssssssssetvalue
	var input = $("#"+id);
	if (input.length>0){
		value=value+"";  //转换类型
		if (value!='') value=value.replaceAll("<br>","\n");  //将<br>替换为回车,必须写，包括keditor
		var type=input.attr('type');
		if (type==undefined || type=='') var type=input.attr('xtype');
		var datatype=input.attr('xdatatype');
		if (datatype==undefined) datatype='';
		var hidden=input.attr('hidden');
		var parent=input.attr('xparent');
		if (hidden=='hidden'){
			//fixedvalue存在时，该控件的值
			if (input.attr('xfixedvalueflag')==1) input.val(input.attr('xfixedvalue'));
			else input.val(value);	
		}else if (type=='text' && hidden!='hidden'){
			if (datatype=='n' && (value=='' || isNaN(value))) value='0';
			input.textbox('setValue', value);
		}else if (type=='combobox' || type=='combo'){ //cccccccccccccccheckbox
			if (input.attr('xreset')==0) return; 
			//console.log(id,input.attr('xcheckbox'),input.attr('xismasterfield'));
			if (input.attr('xcheckbox')=='true'){  //带复选框
				//console.log(id,input.attr('xcheckbox'));
				jsondata=input.combobox('getData');
				opts=input.combobox('options');
				//console.log(jsondata,value);
				var values=','+value+',';
				$.each(jsondata, function(xid, xvalue) {  //取json中每个列及其值
					s=','+eval('xvalue.'+opts.valueField)+',';
					if (values.indexOf(s)>=0){  //value中存在这个选项时，选中选项
						//console.log(id+'_checkbox'+xvalue.sysrowno);
						input.combobox('select',eval('xvalue.'+opts.valueField));
						//$('#'+id+'_checkbox'+xvalue.sysrowno).prop("checked", true);
					}else{
						input.combobox('unselect',eval('xvalue.'+opts.valueField));
						//$('#'+id+'_checkbox'+xvalue.sysrowno).prop("checked", false);
					}
				});
				//console.log(opts.textField+'---'+opts.valueField+'---'+value);
			}else{  //nocheckbox
				if (input.attr('xismasterfield')=='true'){
					input.combobox('select',value); //触发其他联动下拉框的赋值事件
				}else{
					input.combobox('setValue',value);
				}
			}
		}else if (type=='checkbox'){  //单个checkbox
			var checked=true;
			if (value==0) checked=false;
			$("#"+id).prop("checked", checked);
		}else if (type=='radio'){  //多个无线按钮radio
			$("input[id='"+id+"'][value='"+value+"']").attr("checked",true); 
		}else if (type=='checkboxgroup'){  //checkbox组
			var count=input.attr('xitemcount');
			for (var i=0;i<count;i++){
				var checked=false;
				var item=$("#"+id+(i+1));
				if ((';'+value+';').indexOf(';'+item.attr('xtext')+';')>=0) var checked=true;
				else var checked=false;
				item.prop("checked",checked);
			}	
		}else if (type=='label' || type=='labelfield'){ 
			//赋值时重新计算字符串所占用的宽度像素
			if (input.attr('xwidth')<=0){
				w=myGetWidthOfText(value,syslabel.fontsize,syslabel.fontname)+10;
				input.css({width:w});  //设置字符宽度
			}
			var style=';'+input.attr('xstyle')+';';
			if (style.indexOf(';u;')>=0 && value!=''){
				value=value+'&nbsp;';
			}
			input.html(value);
		}else if (type=='file'){ 
			input.attr('xfilesourcename','');  
			input.attr('xfileosname','');  
			input.attr('xtargetfile','');  
			input.attr('xfilesize',0);  
			input.attr('xfilesizedesc','');  
			input.attr('xtargetpath','');  
			input.attr('xfileext','');
		}else if (type=='keditor'){  //kindeditor
			//value=replace92(value,'\\\\');  //使用函数替换强\替换成\\
			//value=myReplace(value,"'","\'");  //字体等中的单引号
			//str="window."+id+".html('"+value+"');"  //换行出现问题，不能用这种方法
			//value=value.replaceAll(String.fromCharCode(10),'');
			str="window."+id+".html(value);"
			eval(str);
		}else if (type=='image'){ //图形
			input.attr('src',value);
			input.attr('xfileosname', value);  //自定义属性，文件路径
			myResizeImage(id, value, input.attr('xheight'),input.attr('xwidth'));
		}else{
			input.val(value);			
		}			
	}
}

function mySetXmlDefaults(p){
	if (p.top==undefined) p.top=-1;
	if (p.left==undefined) p.left=-1;
	if (p.height==undefined) p.height=0;
	if (p.width==undefined) p.width=0;
	if (p.labelwidth==undefined) p.labelwidth=0;
	if (p.value==undefined) p.value='';
	if (p.style==undefined) p.style='';
	if (p.label==undefined) p.label='';
	if (p.parent==undefined) p.parent='';
	if (p.nodeindex==undefined) p.nodeindex=-1;
	if (p.max==undefined) p.max='';
	if (p.min==undefined) p.min='';
	if (p.dec==undefined) p.dec=0;
	if (p.increment==undefined) p.increment=1;
	return p;
}

function myInputField(p){
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	if (p.parent=='') p.parent='main';
	if (p.height==0) p.height=systext.height;
	if (p.value==undefined) p.value='';
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		if (p.label=='') p.labelwidth=0;
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}	
	var str='<div id="'+p.id+'_div" style="margin:0; padding:0;" ><input ';
	if (p.value!=undefined && p.value!=''){  //设置初值
		str+=' value="'+p.value+'"';
	}
	str+=' class="easyui-'+p.classtype+'" type="text"';
	str+=' id="'+p.id+'" style="padding:0px 6px 0px 6px;" /></div>';
	$("#"+p.parent).append($(str));
	//console.log(str);
	$("#"+p.id+'_div').css(myTextCss(p.parent, p.top, p.left+p.labelwidth, p.height, p.width));
	$("#"+p.id).css({height:"100%", width:"100%"});
	var xdatatype='c';
	//使用控件
	if (p.classtype=='textbox'){
		$("#"+p.id).textbox({height:'100%'});
		xdatatype='c';
	}else if (p.classtype=='datebox'){
		$("#"+p.id).datebox();
		xdatatype='d';
	}else if (p.classtype=='numberbox'){
		$("#"+p.id).numberbox({height:p.height});
		xdatatype='n';
	}else if (p.classtype=='numberspinner'){
		$("#"+p.id).numberspinner({height:12});
		xdatatype='n';
	}else if (p.classtype=='searchbox'){
		$("#"+p.id).searchbox();
		xdatatype='c';
	}else if (p.classtype=='timespinner'){
		$("#"+p.id).timespinner();
		xdatatype='t';
	}	
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xdatatype', p.xdatatype);  //自定义属性，文本型数据
	$("#"+p.id).attr('xreadonly', 0);  //自定义属性，只读状态
	$("#"+p.id).attr('xsaveflag', 1);  //自定义属性，默认需要保存数据到数据库
	$("#"+p.id).attr('xtype', p.classtype);  //自定义属性，控件类型
	$("#"+p.id).attr('xstyle', p.style);  //自定义属性，对应的style,数据验证时可以用到
	$("#"+p.id).attr('xnodeindex', p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xvalue', p.value);  //自定义属性，期初值
	$("#"+p.id).attr('xreset', 1);  //可以使用setValue改变其值
	if (p.style!=undefined) p=myFieldStyle(p.id, p.style);
	return p;
	//$('#'+id).textbox('textbox').bind('keydown',function(e){
		//myKeyDownEvent(id);
	//});
}

function myLabelField(v){
	if (v instanceof Array){//判断p是否是数组
		var p={};
		p.id=v[0];
		p.field=v[1];
		p.parent=v[2];
		p.label=v[3];
		p.labelwidth=v[4];
		p.top=v[5];
		p.left=v[6];
		p.height=v[7];
		p.width=v[8];
		if (v.length>9) p.style=v[9];
	}else{
		var p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	if (p.style==undefined) var style='';
	else var style=';'+p.style+';';
	if (p.parent=='') p.parent='main';
	if (p.height==undefined || p.height<=0) p.height=systext.height;
	//if (p.width==undefined || p.width<=0) p.width=200;
	if (p.width==undefined || p.width<=0) p.width=-1;
	//p.width=myGetWidthOfText(p.label,syslabel.fontsize,syslabel.fontname)+10;
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}
	var str='<div class="textdiv" id="'+p.id+'" style="';
	if (style.indexOf(';u;')>=0) str+='text-decoration:underline; ';
	str+='overflow:hidden; margin:0; padding:0;"></div>';
	if (style.indexOf(';b;')>=0){
		str='<b>'+str+'</b>';
	} 
	if (style.indexOf(';i;')>=0){
		str='<i>'+str+'</i>';
	} 
	$('#'+p.parent).append($(str));
	$('#'+p.id).css(myTextCss(p.parent, (p.top+4)*1, p.left+p.labelwidth, p.height, p.width));
	if (p.width>0) $("#"+p.id).css({width:p.width});
	else $("#"+p.id).css({width:100});
	$('#'+p.id).attr('xparent',p.parent);  //自定义属性
	$('#'+p.id).attr('xtype','labelfield');  //自定义属性
	$('#'+p.id).attr('xid',p.id);  //自定义属性
	$('#'+p.id).attr('xdatatype','c');  //自定义属性，文本型数据
	$('#'+p.id).attr('xreadonly', 1);  //默认状态只读
	$('#'+p.id).attr('xsaveflag', 0);  //默认状态不保存该列值到数据库
	$('#'+p.id).attr('xstyle', p.style);  //自定义属性，字体排版，在setvalue中用到
	$('#'+p.id).attr('xlabel', p.label);
	$('#'+p.id).attr('xwidth', p.width);
	$("#"+p.id).attr('xvalue', p.value);  //自定义属性，期初值
	if ((';'+p.style+';').indexOf(';save;')>=0) $('#'+p.id).attr('xsaveflag', 1);
}


function mySearchField(p){
	p.classtype='searchbox';
	p.style='searchfield';
	p=myInputField(p);
}

function myTextField(v){
	if (v instanceof Array){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.labelwidth=v[3];
		p.top=v[4];
		p.left=v[5];
		p.height=v[6];
		p.width=v[7];
		if (v.length>8) p.value=v[8];
		if (v.length>9) p.style=v[9];
		//(id,parent,label,labelwidth,top,left,height,width,value,style)
	}else{
		var p=v;
	}
	p.classtype='textbox';
	p=myInputField(p);
}

//定义date控件
function myDateField(p){
	p.classtype='datebox';
	p=myInputField(p);
}

//定义spinnerfield控件
function mySpinnerField(p){
	p.classtype='numberspinner';
	p=myInputField(p);
	//$("#"+p.id).numberspinner({height:p.height, width:p.width});
	if (p.height==0) p.height=systext.height;
	$("#"+p.id).numberspinner({height:p.height}); //必须重新设置高度
	if (p.min!=undefined && !isNaN(p.min) && p.min!='') $("#"+p.id).numberspinner({min:p.min});
	if (p.max!=undefined && !isNaN(p.max) && p.max!='') $("#"+p.id).numberspinner({max:p.max});
	if (p.increment!=undefined && !isNaN(p.increment) && p.increment!=''){
		if (p.increment<1) precision=2;
		else precision=0;
		$("#"+p.id).numberspinner({increment:1*p.increment, precision:precision});
	}
	$("#"+p.id).numberspinner('textbox').css('text-align','right');  //右对齐
}

//定义decimal控件
function myNumberField(p){
	//if (p.height==0) p.height=systext.height;
	p.classtype='numberbox';
	p=myInputField(p);
	if (p.min!=undefined && !isNaN(p.min)) $("#"+p.id).numberbox({min:p.min});
	if (p.max!=undefined && !isNaN(p.max)) $("#"+p.id).numberbox({max:p.max});
	if (p.dec!=undefined && !isNaN(p.dec)) $("#"+p.id).numberbox({precision:p.dec});
	//$("#"+p.id).numberbox({height:p.height});  //必须重新设置高度
	$("#"+p.id).numberbox('textbox').css('text-align','right');  //右对齐
}

function myNumericField(p){
	myNumberField(p);
}
//定义date控件
function myTimeField(p){
	p.classtype='timespinner';
	p=myInputField(p);
}
//textarea
function myMemoField(p){
	myTextareaField(p);
}

//function myTextareaField(id,parent,label,labelwidth,top,left,height,width,value,style){
function myTextareaField(p){
	//p=mySetXmlDefaults(p);
	/*
	var id=p.id;
	var parent=p.parent;
	var label=p.label;
	var labelwidth=1*p.labelwidth;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var value=p.value;
	var style=p.style;
	*/
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	if (p.parent=='') p.parent='main';
	if (p.height==0) p.height=systext.height;
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}
	var str='<div id="'+p.id+'_div"><textarea ';
	if (p.value!=undefined && p.value!=''){  //设置初值
		str+=' value="'+p.value+'"';
	}
	str+=' id="'+p.id+'" style="resize:none; padding:5px 5px 0px 5px;" ></textarea></div>';
	$("#"+p.parent).append($(str));
	$("#"+p.id+"_div").css(myTextCss(p.parent, p.top, p.left+p.labelwidth, p.height, p.width));
	$("#"+p.id).css({ height: p.height, width: p.width });
	$("#"+p.id).attr('xtype','textarea');  //修改控件类别，系统不会自己加入，在赋值函数中使用到。
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xdatatype','c');  //自定义属性，字段数据类型
	$("#"+p.id).attr('xnodeindex',p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xvalue', p.value);  //自定义属性，期初值
	if (p.value!=undefined && p.value!=''){  //设置初值
		$("#"+p.id).val(p.value);
	}
	myFieldStyle(id,style);
}

function myEditorField(p){
	//p=mySetXmlDefaults(p);
	/*
	var id=p.id;
	var parent=p.parent;
	var label=p.label;
	var labelwidth=1*p.labelwidth;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var value=p.value;
	 */
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	p.style=';'+p.style+';';
	if (p.parent=='') p.parent='main';
	if (p.style.indexOf(';hide;')>0){
		p.parent='main';
		p.top=-1; p.left=8; p.height=10; p.width=10;
		p.style=';hide;readonly;autoheight;';
		p.value='';
		p.label='';
		p.labelwidth=-1;
	}
	if (p.height==0) p.height=systext.height;
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		if (p.label=='') p.labelwidth=0;
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}
	var str='<div id="'+p.id+'_div"><textarea ';
	if (p.value!=undefined && p.value!=''){  //设置初值
		str+=' value="'+p.value+'"';
	}
	str+='spellcheck="false" id="'+p.id+'" style="resize:none;';
	if (p.height>0) str+='height:'+p.height+'px;';
	if (p.width>0) str+='width:'+p.width+'px;';
	str+='padding:5px 5px 0px 5px;" ></textarea></div>';
	$("#"+p.parent).append($(str));
	if (p.top>0 || p.left>0){
		$("#"+p.id+"_div").css(myTextCss(p.parent, p.top, p.left+p.labelwidth, p.height, p.width));
	}
	$("#"+p.id).attr('xtype', 'keditor');  //修改控件类别，系统不会自己加入，在赋值函数中使用到。
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xdatatype','m');  //自定义属性，字段数据类型
	$("#"+p.id).attr('xreadonly', 0);  //自定义属性，只读状态
	$("#"+p.id).attr('xsaveflag', 1);  //自定义属性，保存到数据库
	$("#"+p.id).attr('xnodeindex',p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xvalue', p.value);  //自定义属性，期初值
	var resizeflag=0;
	var pastetype=-1;
	//var toolbar0="'|','formatblock','fontname','fontsize','|','bold','italic','underline','strikethrough','forecolor', 'hilitecolor','|','justifyleft','justifycenter','justifyright','insertorderedlist','insertunorderedlist','subscript','superscript','lineheight','removeformat','|','image','flash','media','|','table','link','advtable','|','preview','fullscreen','|'";
	//var toolbar1="'|','formatblock','fontname','fontsize','|','bold','italic','underline','strikethrough','forecolor', 'hilitecolor','|','justifyleft','justifycenter','justifyright','insertorderedlist','insertunorderedlist','subscript','superscript','lineheight','removeformat','|','image','flash','media','|','table','emoticons','link','advtable','undo','redo','cut','copy','paste','selectall','|','preview','fullscreen','|'";
	//不添加图像、图片上传功能
	var toolbar0="'|','formatblock','fontname','fontsize','|','bold','italic','underline','strikethrough','forecolor', 'hilitecolor','|','justifyleft','justifycenter','justifyright','insertorderedlist','insertunorderedlist','subscript','superscript','lineheight','removeformat','|','table','link','advtable','|','preview','fullscreen','|'";
	var toolbar1="'|','formatblock','fontname','fontsize','|','bold','italic','underline','strikethrough','forecolor', 'hilitecolor','|','justifyleft','justifycenter','justifyright','insertorderedlist','insertunorderedlist','subscript','superscript','lineheight','removeformat','|','table','emoticons','link','advtable','undo','redo','cut','copy','paste','selectall','|','preview','fullscreen','|'";
	var toolbar="";  //simpletoolbar,previewbar,toolbar,fulltoolbar
	if (p.style.indexOf(";nopaste;")>=0) pastetype=0;	
	if (p.style.indexOf(";resize;")>=0) resizeflag=1;
	if (p.style.indexOf(";readonly;")>=0 && p.style.indexOf(";save;")<0){
		toolbar="''";
		$("#"+p.id).attr('xreadonly', 1);  //自定义属性，只读状态
		$("#"+p.id).attr('xsaveflag', 0);  //只读时不保存导数据库
	}
	if (p.style.indexOf(";toolbar;")>=0) toolbar=toolbar0;
	if (p.style.indexOf(";toolbar1;")>=0) toolbar=toolbar1;
	str="window."+p.id+"=KindEditor.create('textarea[id=\""+p.id+"\"]',{\n"+
	"allowFileManager: false,\n"+
	"newlineTag : 'br',\n"+ 
	"resizeType: "+resizeflag+",\n";
	if (p.style.indexOf(";readonly;")>=0){
		str+="readonlyMode: true,\n";
	}else{
		str+="readonlyMode: false,\n";
	}
	if (pastetype!=-1) str+="pasteType:"+pastetype+",\n";
	//"filterMode: false,\n"+
	str+="minWidth: 500, \n"+
	"minHeight: 100, \n"+
	//"loadStyleMode: true, \n"+
	"allowPreviewEmoticons: false\n";
	if (toolbar!='') str+=",items:[\n"+toolbar+"]\n";
	if (p.style.indexOf(";autoheight;")>=0){
		str+=",autoHeightMode : true,\n"+
		"afterCreate : function() {\n"+
		"	this.loadPlugin('autoheight');\n"+
		"}\n";
	}
	str+="});"; 
	eval(str);
	if (p.style.indexOf(";hide;")>=0){
		$("#"+p.id).prev().hide();  //隐藏控件，用于转换数据到html
	}
	if (p.value!=undefined && p.value!=''){  //设置初值
		mySetValue(p.id, p.value);
	}
}

//定义数组checkbox   cccccccheck
function myCheckBoxField(p){
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	//p=mySetXmlDefaults(p);
	/*
	var id=p.id;
	var parent=p.parent;
	var label=p.label;
	var labelwidth=1*p.labelwidth;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var text=p.items;
	var style=p.style;
	var checked=p.checked;
	*/
	//cols为列数，rowheight为行高,items=[c70]aaaa;[u80]bbbbbb;[80]ccccc   u-unchecked  ,c--checked
	//增加一个value值控件，名称为id+'_value'
	if (p.style!=undefined && p.style!='') p.style=';'+p.style+';';
	else p.style='';
	if (p.parent=='') p.parent='main';
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, 0, 0);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, 0, 0);
	}
	var str='<div id="'+p.id+'_div"><input type="checkbox" id="'+p.id+'" /><div style="margin:-17px 0px 0px '+(p.left*0+20)+'px;">'+p.items+'</div></div>';  //value为自定义属性
	$("#"+p.parent).append($(str));
	//console.log(str);
	if (p.top>0 && p.left>0){
		$("#"+p.id+"_div").css(myTextCss(p.parent, p.top, p.left+p.labelwidth, 0, 0));
	}
	$("#"+p.id).prop('checked', p.checked);  //设置初值选中状态
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xtype', 'checkbox');  //自定义属性
	$("#"+p.id).attr('xdatatype', 'c');  //自定义属性，字段数据类型
	$("#"+p.id).attr("xtext", p.items);  //自定义属性设置文本值，子项标题
	$("#"+p.id).attr('xnodeindex',p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xvalue', p.checked);  //自定义属性，期初值
	return (str);
}

//定义数组combo
function myComboField(v){
	flag=(v instanceof Array);  //判断p是否是数组
	if (flag){
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.labelwidth=v[3];
		p.top=v[4];
		p.left=v[5];
		p.height=v[6];
		p.width=v[7];
		p.items=v[8];
		if (v.length>9) p.textfield=v[9];
		if (v.length>10) p.value=v[10];
		if (v.length>11) p.style=v[11];
		//myComboField(['sortfield','toolbar1','选择排序:',60,0,14,0,110,'默认;tt;nn','','autodrop']);
	}else{
		var p=v;
	}
	//p=mySetXmlDefaults(p);
	p.labelwidth=1*p.labelwidth; p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width;
	if (p.style!=undefined && p.style!='' ) p.style=';'+p.style+';';
	else p.style='';
	if (p.height==0) p.height=systext.height;
	if (p.parent=='') p.parent='main';
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}	
	var tmp=[];
	var str='var '+p.id+'source=[';
	if (p.items!=undefined && p.items!=''){
		tmp=p.items.split(';');
		for (var i=0; i<tmp.length; i++){
			if (i>0) str+=',';
			str+='{"'+p.id+'":"'+tmp[i]+'","sysid":"'+i+'"}';
		}
	}
	str+='];';
	eval(str);
	str='<div style="margin:0;" id="'+p.id+'_div" ><input ';
	if (p.value!=undefined && p.value!=''){  //设置初值
		str+=' value="'+p.value+'"';
	}
	str+=' class="easyui-combobox" id="'+p.id+'" style="padding:0px 6px 0px 6px;" /></div>';
	$("#"+p.parent).append($(str));
	$("#"+p.id+'_div').css(myTextCss(p.parent, p.top, p.left+p.labelwidth, p.height, p.width));
	$("#"+p.id).css({width: p.width, height: p.height});
	if (p.textfield==undefined) p.textfield=p.id;
	//alert(p.textfield);
	$('#'+p.id).combobox({
		data: eval(p.id+'source'),
		valueField: p.id,
		textField: p.textfield,
		formatter: function(row){
			return '<div align="left" style="padding:2px 0px 0px 4px;">' + eval('row.'+p.id)+'</div>';
		}
	});	
	$("#"+p.id).attr('xreadonly', 0);  //自定义属性，只读状态
	$("#"+p.id).attr('xsaveflag', 1);  //自定义属性，保存数据导数据库
	if (p.style.indexOf(';readonly;')>=0) $('#'+p.id).combobox({'readonly':true, 'xreadonly':1});
	if (p.style.indexOf(';editable;')>=0) $('#'+p.id).combobox({'editable':true});
	else $('#'+p.id).combobox({'editable': false});
	if (p.style.indexOf(';autodrop;')>=0) $('#'+p.id).combobox({'editable': false});
	if (p.style.indexOf(';selectonly;')>=0) $('#'+p.id).combobox({'editable': false});
	if (tmp.length<13) $('#'+p.id).combobox({panelHeight:'auto'});
	else $('#'+p.id).combobox({panelHeight: 12*(syslabel.fontsize+8)});
	if (p.style.indexOf(';noreset;')>=0) $('#'+p.id).attr('xreset', 0);
	else $('#'+p.id).attr('xreset', 1);  //自定义属性，可以setValue 
	$('#'+p.id).attr('xtype', 'combo');  //自定义属性
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xdatatype', 'c');  //自定义属性，字段数据类型
	$("#"+p.id).attr('xnodeindex', p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xvalue', p.value);  //自定义属性，期初值
	$("#"+p.id).attr('xstyle', p.style);  //自定义属性
	//事件
	$('#'+p.id).combobox({
		onSelect: function(record) {  //选中事件
			var id=$(this).attr('xid');
			if (record) {
				$(this).attr('xrecord',JSON.stringify(record));  //自定义属性，记录当前选中的选项记录
				$(this).attr('xindex', record.sysrowno-1);  //自定义属性，记录当前选中的选项记录				
			}else{
				$(this).attr('xrecord','{}');  //自定义属性，记录当前选中的选项记录
				$(this).attr('xindex',-1);  //自定义属性，记录当前选中的选项记录				
			}
			if ($(this).attr('xstyle').indexOf(';fnselect;')>=0) fnonSelectCombo(id, record);
			$(this).next("span").find("input").focus();
		}
	});
	//事件定义放在最后
	//复选事件
	if (p.style.indexOf(';checkbox;')>=0){
		$("#"+p.id).combobox({
			formatter: function(row){
				var xid=$(this).attr('xid');
				var s ='<input type="checkbox" class="combobox-checkbox">'+eval("row."+xid);
				return s;
			},
			multiple:true,
			editable: false,
			separator:';',
			onLoadSuccess:function(){
				var opts = $(this).combobox('options');
				var target = this;
				var values = $(target).combobox('getValues');
				$.map(values, function(value){
					var el = opts.finder.getEl(target, value);
					el.find('input.combobox-checkbox')._propAttr('checked', true);
				})
			},
			onSelect:function(row){
				var opts = $(this).combobox('options');
				var el = opts.finder.getEl(this, row[opts.valueField]);
				el.find('input.combobox-checkbox')._propAttr('checked', true);
			},
			onUnselect:function(row){
				var opts = $(this).combobox('options');
				var el = opts.finder.getEl(this, row[opts.valueField]);
				el.find('input.combobox-checkbox')._propAttr('checked', false);
			}
		});		
	} //if
	
	if (p.style.indexOf(';filter;')>=0){  //助记码过滤
		$("#"+p.id).combobox({
			editable:true,
	    	filter: function(q, row){
	       		var opts = $(this).combobox('options');
	       		q=q.toLowerCase();
	       		//var flag=row[opts.textField].indexOf(q) >= 0;
	          	var ss1=row[opts.textField].toLowerCase();
	       		var ss2=myGetMemoCode(ss1);
		   		var flag=0;
	       		var str=q.split(' ');
	       		for (var i=0;i<str.length;i++){
	       			if (str[i]!='') flag+=ss1.indexOf(str[i])>= 0;
	       			if (str[i]!='') flag+=ss2.indexOf(str[i])>= 0;
	       		}
	       		var str=q.split(';');
	       		for (var i=0;i<str.length;i++){
	       			if (str[i]!='') flag+=ss1.indexOf(str[i])>= 0;
	       			if (str[i]!='') flag+=ss2.indexOf(str[i])>= 0;
	       		}
	       		return flag;
	    	}
		});	
	}
	if (tmp.length>0 && (p.value==undefined || p.value=='')){  //设置初值
		//设置初值选中第一行
		$('#'+p.id).combobox('select',eval(p.id+'source[0].'+p.id));
	}		
}

function myDBComboField(v){
	flag=(v instanceof Array);  //判断p是否是数组
	if (flag){
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.labelwidth=v[3];
		p.top=v[4];
		p.left=v[5];
		p.height=v[6];
		p.width=v[7];
		p.sql=v[8];
		if (v.length>9) p.textfield=v[9];
		if (v.length>10) p.masterfield=v[10];
		if (v.length>11) p.style=v[11];
		//mydbComboField(id,parent,label,labelwidth,top,left,height,width,sql,textfield,masterfield,style)
	}else{
		var p=v;
	}	
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换	
	//p=mySetXmlDefaults(p);
	if (p.style!=undefined && p.style!='' ) p.style=';'+p.style+';';
	else p.style='';
	if (p.filtersql==undefined) p.filtersql='';
	if (p.textfield==undefined) p.textfield=p.id;
	if (p.masterfield==undefined) p.masterfield='';
	var mid='';  //master控件  masterfield="province(provinceid)"为例
	var mfield='';  //master控件对应的值列  
	var index1=p.masterfield.indexOf("(");
	var index2=p.masterfield.indexOf(")");
	if (index1>=0 && index2>index1){
		mid=p.masterfield.substring(0, index1);
		mfield=p.masterfield.substring(index1+1, index2);
	}else{
		mid=p.masterfield;
		mfield=p.masterfield;
	}
	if (mid=='' && mfield!='') mid=mfield;
	if (mid!='' && mfield=='') mfield=mid;
	//masterfield处理结束
	if (p.parent=='') p.parent='main';
	if (p.height==0) p.height=systext.height;
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}	
	//if (textfield=='') textfield=id;
	if (p.textfield=='') p.textfield=p.field;
	var str='<div id="'+p.id+'_div"><input class="easyui-combobox" id="'+p.id+'" data-options="valueField:\''+p.id+'\',textField:\''+p.textfield+'\'"></div>';
	$("#"+p.parent).append($(str));
	$("#"+p.id+"_div").css(myTextCss(p.parent, p.top, p.left+p.labelwidth, 0, p.width));
	$("#"+p.id).css({width:p.width, height:p.height});
	$('#'+p.id).combobox({
		panelHeight: 'auto',
		valueField: p.field, //id,
		textField: p.textfield,
		formatter: function(row){
			return '<div align="left" style="padding:2px 0px 0px 4px;">' + eval('row.'+p.textfield)+'</div>';
		},		
		onSelect: function(record) {  //选中事件
			var xid=$(this).attr('xid');
			if (record) {
				$(this).attr('xrecord',JSON.stringify(record));  //自定义属性，记录当前选中的选项记录
				$(this).attr('xindex', record.sysrowno-1);  //自定义属性，记录当前选中的选项记录				
			}else{
				$(this).attr('xrecord','{}');  //自定义属性，记录当前选中的选项记录
				$(this).attr('xindex',-1);  //自定义属性，记录当前选中的选项记录				
			}
			if ($(this).attr('xstyle').indexOf(';fnselect;')>=0) fnonSelectCombo(xid, record);
			$("#"+p.id).next("span").find("input").focus();
		}
	});
	$("#"+p.id).attr('xreadonly', 0);  //自定义属性，只读状态
	$("#"+p.id).attr('xsaveflag', 1);  //自定义属性，保存数据导数据库
	if (p.style.indexOf(';readonly;')>=0) $('#'+p.id).combobox({'readonly':true, 'xreadonly':1});
	if (p.style.indexOf(';editable;')>=0) $('#'+p.id).combobox({'editable':true});
	else $('#'+p.id).combobox({'editable': false});
	if (p.style.indexOf(';autodrop;')>=0) $('#'+p.id).combobox({'editable': false});
	if (p.style.indexOf(';selectonly;')>=0) $('#'+p.id).combobox({'editable': false});
	if (p.style.indexOf(';noreset;')>=0){
		$('#'+p.id).attr('xreset', 0);  //不能使用setValue改变其值
		$('#'+p.id).combobox({'editable': false});
	}else{
		$('#'+p.id).attr('xreset', 1);  //自定义属性，可以setValue 
	}
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xtype', 'combo');  //自定义属性
	//$("#"+p.id).attr('xmasterfield', mid);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xstyle', p.style);  //自定义属性
	$("#"+p.id).attr('xdatatype', 'c');  //自定义属性，字段数据类型
	$("#"+p.id).attr('xnodeindex', p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xparams', p.params);  //自定义属性，sql语句参数集
	//$("#"+p.id).attr('xismasterfield',false);  //自定义属性
	//定义联动事件cascade
	if (p.masterfield!=undefined && p.masterfield!=''){
		//$("#"+mid).attr('xismasterfield',true);
		$("#"+mid).combobox({
			onSelect: function(record) {  //选中事件
				if (record) {
					$("#"+mid).attr('xrecord', JSON.stringify(record));  //自定义属性，记录当前选中的选项记录
					$("#"+mid).attr('xindex', record.sysrowno-1);  //自定义属性，记录当前选中的选项记录				
					var xvalue=eval("record."+mfield);
					var sql=$("#"+p.id).attr('xsql');
					if (xvalue!='')	xfiltersql=mfield+"='"+xvalue+"'";
					else xfiltersql='';
					$("#"+p.id).combobox('clear');
					//if ($("#"+id).attr('xcheckbox')=='true') $("#"+id).combobox({ checkbox:true });
					myGetComboData(p.id, xfiltersql);
					myBindKeyDownEvent(p.id);	
				}else{
					$("#"+mid).attr('xrecord', '{}');  //自定义属性，记录当前选中的选项记录
					$("#"+mid).attr('xindex', -1);  //自定义属性，记录当前选中的选项记录
				}
				if (p.style.indexOf(';fnselect;')>=0) fnonSelectCombo(mid, record);
				$("#"+mid).next("span").find("input").focus();
				mySelectOnFocus();
			}
		}); // masterfield event
		//keyboard event放在之后，如果之后出现.combobox()则事件无效
	}else{
		//myGetComboData(p.id, p.filtersql);
	}
	//联动事件结束
	if (p.style.indexOf(';filter;')>=0){ //助记码过滤
		$("#"+p.id).combobox({
			editable:true,
    		filter: function(q, row){
        		var opts = $(this).combobox('options');
        		q=q.toLowerCase();
        		//var flag=row[opts.textField].indexOf(q) >= 0;
           		var ss1=row[opts.textField].toLowerCase();
    	   		var ss2=myGetMemoCode(ss1);
	    		var flag=0;
        		var str=q.split(' ');
        		for (var i=0;i<str.length;i++){
        			if (str[i]!='') flag+=ss1.indexOf(str[i])>= 0;
        			if (str[i]!='') flag+=ss2.indexOf(str[i])>= 0;
        		}
        		var str=q.split(';');
        		for (var i=0;i<str.length;i++){
        			if (str[i]!='') flag+=ss1.indexOf(str[i])>= 0;
        			if (str[i]!='') flag+=ss2.indexOf(str[i])>= 0;
        		}
        		return flag;
    		}
		});	
	}
	$("#"+p.id).attr('xsql', p.sql);  //自定义属性，记录基本的sql语句
	$('#'+p.id).attr('xtype', 'combo');  //自定义属性
	if (mid!='') mySelectComboByIndex(mid,0);  //选中主下拉框，使其触发select事件
	else if (p.value==undefined) mySelectComboByIndex(p.id, 0); 
}

//定义image控件iiiimmmmmmmage
function myImageField(v){
	//myImageField(id,parent,label,labelwidth,top,left,height,width,src){
	//p=mySetXmlDefaults(p);
	if ((v instanceof Array)){ //判断p是否是数组
		var p={};
		p.id=v[0];
		p.parent=v[1];
		p.label=v[2];
		p.labelwidth=v[3];
		p.top=v[4];
		p.left=v[5];
		p.height=v[6];
		p.width=v[7];
		p.src=v[8];
	}else{
		p=v;
	}
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换
	if (parent=='') parent='main';
	if (p.labelwidth==0 && p.label!=''){
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left+2, p.height, p.width);
		p.top=p.top+syslabel.fontsize+syslabel.topmargin+2; //换行显示文本
		p.labelwidth=0;
	}else{
		myFieldLabel(p.id, p.parent, p.label, p.labelwidth, p.top, p.left, p.height, p.width);
	}
	var str='<div id="'+p.id+'_div" style="position:absolute; top:'+p.top+'px; left:'+p.left+'px;">';
	str+='<a href="javascript:void(0)"><img src="'+p.src+'" id="'+p.id+'" style="';
	if (p.width>0) str+=' width:'+p.width+'px;';
	if (p.height>0) str+=' height:'+p.height+'px; ';
	str+='padding-left:0px 0px 0px 0px; border:false" /></a></div>';
	$("#"+p.parent).append($(str));
	$("#"+p.id).css(myTextCss(p.parent, p.top, p.left+p.labelwidth, 0, p.width));
	$("#"+p.id).attr('xparent', p.parent);  //自定义属性
	$("#"+p.id).attr('xlabel', p.label);  //自定义属性
	$("#"+p.id).attr('xtype', 'image');  //自定义属性
	$("#"+p.id).attr('xid', p.id);  //自定义属性
	$("#"+p.id).attr('xdatatype', 'c');  //自定义属性，字段数据类型
	$("#"+p.id).attr('xfileosname', p.src);  //自定义属性，文件路径
	$("#"+p.id).attr('xwidth', p.width);  //自定义属性
	$("#"+p.id).attr('xheight', p.height);  //自定义属性
	$("#"+p.id).attr('xnodeindex', p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+p.id).attr('xfield',p.field);  //自定义属性，对应的列名称数组下标
	//图片放大缩小设置
	$("#"+p.id).attr('xrotate', '0');  //原始旋转角度为0
	$("#"+p.id).attr('xratio', '1');  //原始显示大小比例
	$("#"+p.id).attr('style', 'display:block');  //在调整大小之前，先不显示图片	
	if (p.src!='' && p.height>0 && p.width>0) myResizeImage(p.id, p.src, p.height, p.width);
	/*
	$("#"+id).bind('mousewheel',function(e){
		deltay=e.originalEvent.deltaY;
		if (deltay<0) var ratio=1.1;
		else if (deltay>0) var ratio=0.9;
		else var ratio=1;
		//ratio=ratio*($(this).attr('xratio'));
		//$(this).attr('xratio', ratio;
		console.log($(this).attr('xid'));
		myZoomObject($(this).attr('xid'), ratio);						
	});
	*/
}

//定义fileupload控件fffffupload
//function myFileField(id,parent,top,left,height,width,buttonalign){
function myFileField(p){
	//p=mySetXmlDefaults(p);
	p.top=1*p.top; p.left=1*p.left; p.height=1*p.height; p.width=1*p.width; p.labelwidth=1*p.labelwidth; //数据类型转换	
	var id=p.id;
	var parent=p.parent;
	var label=p.label;
	var labelwidth=1*p.labelwidth;
	var top=1*p.top;
	var left=1*p.left;
	var height=1*p.height;
	var width=1*p.width;
	var buttonalign=p.buttonalign;
	var style=p.style;
	//
	if (buttonalign==undefined) buttonalign='';
	//上传按钮名称：id+'button'; 进度条id+'bar'
	var btnid=id+'button';
	var barid=id+'bar';
	var winid=id+'window';
	var attachmentid='attachment_'+id;
	var attachmentdiv='attachmentdiv_'+id;
	var str='';
	if (width==0) width=300;
	if (parent=='') parent='main';
	if (height==0) height=systext.height;
	var btnleft=left+4;
	var btntop=top+height+4;
	var xtop=top;
	var xleft=left;
	var filetop=top+height+4;
	var fileleft=left+80;
	var filewidth=width-left-76;
	if (buttonalign=='right'){
		width=width-75;
		var btnleft=left+width+9;
		var btntop=top-2;
		fileleft=left;
		filewidth=width-left-16;
	}else if (buttonalign=='left'){
		var btnleft=left;
		var btntop=top-2;
		fileleft=left;
		filewidth=width-left-16;
		left=left+75;
		width=width-75;
	}
	if (p.filetype==undefined) p.filetype='';
	if (p.filepath==undefined && pservice.attachment.filepath!=undefined) p.filepath=pservice.attachment.filepath; 
	if (p.filetag==undefined && pservice.attachment.filetag!=undefined) p.filetag=pservice.attachment.filetag; 
	var str='<input type="file" id="'+id+'" class="file" style="position: absolute; top:'+top+'px; left:'+left+'px; width:'+width+'px; height:'+height+'px; padding-left: 4px;" />\n';
	$("#"+parent).append($(str));
	$("#"+id).css(myTextCss(parent,top,left,0,width));
	//$("#"+id).filebox({multiple: true});
	//定义进度条窗口
	myWindow([winid,'正在上传',0,0,70,320,'','']);
	str="<div class='easyui-progressbar' id='"+barid+"'></div>";
	$("#"+winid).append($(str));
	$("#"+barid).css(myTextCss(winid,4,2,24,300));
	$("#"+barid).progressbar();
	$("#"+winid).window('close');
	if (buttonalign!='none'){ //不显示按钮
		myButton([btnid,parent,'上传',btntop,btnleft,26,68,'uploadIcon']);
		$('#'+btnid).attr('xparent',id);  //记录按钮所对应的控件id
		$('#'+btnid).attr('xid',btnid);  //记录按钮id
		var filename = $("#"+id).val();
		if (filename=='') $("#"+btnid).linkbutton('disable');
		else $("#"+btnid).linkbutton('enable');
		$("#"+id).bind('change',function(v){
			var filename = $("#"+id).val();
			if (filename=='') $("#"+btnid).linkbutton('disable');
			else $("#"+btnid).linkbutton('enable');
		});
		$("#"+btnid).bind('click',function(e){
			//myFileEvents(id,'click');
		});

		//点击小按钮开始上传附件
		$('#'+btnid).click(function(e){//id+'button' 
			id=$(this).attr('xid');
			pid=$(this).attr('xparent');  //上传文件控件的id
			filetag=$('#'+pid).attr('xuploadfiletag');
			filepath=$('#'+pid).attr('xuploadfilepath');
			filetype=$('#'+pid).attr('xuploadfiletype');
			//var targetname=pservice.table[pservice.table.length-1].name+'_'+sys.userid+'_'+myLocalTime('timeid'); //后面加时间
			//处理filetag中的变量{},变量值与其他后台程序和myrunevents不同，不用单引号包含
			while (true){
				x1=filetag.indexOf('{');
				x2=filetag.indexOf('}', x1);
				if (x1>=0 && x2>1){
					tmp=filetag.substring(x1+1,x2).trim();
					if (tmp!='') tmp=myGetValue(tmp);
					filetag=filetag.substring(0,x1)+tmp+filetag.substring(x2+1);
				}else{
					break;
				}
			}
			//alert(filetag);
			//var targetname=filetag+'_'+myLocalTime('timeid'); //后面加时间,前面加表名，用nodeindex虚拟化
			var targetname=filetag; //+'_'+myLocalTime().timestamp; //timeid写在xml文件中
			var file=$('#'+pid).val(); //不用myGetValue(pid); 
			if (file!=''){
				myFileupLoad(pid, filepath, targetname); //无限制文件类型上传
			}	
		});
	}
	//添加显示附件的div---attachmentid
	if ($('#'+attachmentid).length>0) $('#'+attachmentid).remove();
	var str='<div id="'+attachmentid+'" style="border:1px; padding:0; margin:0;"></div>';
	$('#'+parent).append($(str));
	$("#"+attachmentid).css(myTextCss(parent,filetop,fileleft,0,filewidth));
	$("#"+id).attr('xparent',parent);  //自定义属性
	$("#"+id).attr('xlabel',label); //label //自定义属性
	$("#"+id).attr('xid',id);  //自定义属性
	$("#"+id).attr('xdatatype','c');  //自定义属性，字段数据类型
	$("#"+id).attr('xtype','file');  //自定义属性
	$("#"+id).attr('xheight', height);  //自定义属性
	$("#"+id).attr('xwidth', width);  //自定义属性
	$("#"+id).attr('xstyle',p.style);  //自定义属性
	$("#"+id).attr('xnodeindex',p.nodeindex);  //自定义属性，对应的列名称数组下标
	$("#"+id).attr('xuploadfiletag',p.filetag);  //上传文件的头标记
	$("#"+id).attr('xuploadfiletype',p.filetype);  //上传文件的类型限制，如只能上传jpg文件
	$("#"+id).attr('xuploadfilepath',p.filepath);  //上传文件存放的默认路径
	$("#"+id).attr('xtarget',p.target);  //需要同步先是的图片控件的id
	$("#"+id).attr('xfilesourcename','');  
	$("#"+id).attr('xfileosname','');  
	$("#"+id).attr('xtargetfile','');  
	$("#"+id).attr('xfilesize',0);  
	$("#"+id).attr('xfilesizedesc','');  
	$("#"+id).attr('xtargetpath','');  
	$("#"+id).attr('xfileext','');
	$("#"+id).attr('xuploaddate','');
	$("#"+id).attr('xuploadtime','');
	$("#"+id).attr('xfiletop',filetop);  
	$("#"+id).attr('xfileleft',fileleft);  
	$("#"+id).attr('xfilewidth',filewidth);  
	$("#"+id).attr('xattachment',attachmentid);  
	$("#"+id).attr('xattachmentdiv',attachmentdiv);  
}

//nnnnnnnnnnnnnew
function myGetAttachmentData(fileid){
	return(myRunSelectCases('attachment', fileid));
}

function myDeleteAttachmentRows(xvaluelist){
	return(myDeleteAttachments(xvaluelist, 'row'));
}

function myDeleteAttachmentFiles(xvaluelist){
	return(myDeleteAttachments(xvaluelist, 'file'));
}

//function myDeleteAttachments(filetaglist, xvaluelist, xtype){
function myDeleteAttachments(xvaluelist, xaction){
	filetaglist='';
	//xtype:row,
	//从数据库中提取所有附件的信息。xnodeindex指定xml节点序号，去对应的attribute属性的值，一般为tablename
	//sql="select * from attachments where filetype='"+pmyTable.name+"' and fileid="+myGetValue(pmyTable.keyfield);
	//type==''删除记录和附件文件，type='row'只删记录,type='file'只删文件
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_attachmentsDelete.jsp",
		//data: { filetaglist:filetaglist, valuelist:xvaluelist, action:xaction },
		data: { valuelist:xvaluelist, action:xaction },
		async: false, method: 'post',    
		success: function(data) {     
			eval("result="+data);
		}
	});	
	return result;
}

function myRunInsertCases( casetype, valuelist){
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_runInsertCases.jsp",
		data: { casetype:casetype, valuelist:valuelist },
		async: false, method: 'post',    
		success: function(data) {     
			eval("result="+data);
		}
	});	
	return result;
}

function myDeleteRows(xnodeindex, xvaluelist){
	//根据valuelist关键字的值，删除表中某几行，不带where语句。表名称根据index值从后台取
	result={};
	$.ajax({     
		type: "Post",     
		url: "system/easyui_deleteRows.jsp",
		data: { nodeindex:xnodeindex, valuelist:xvaluelist },
		async: false, method: 'post',    
		success: function(data) {
			result=eval("result="+data);
			//alert(result.error);
		}
	});	
	return result;
}

function byteLength(val) { //取一个字符串的字节长度，一个汉字算2个字节
    var len = 0;
    for (var i = 0; i < val.length; i++) {
         var a = val.charAt(i);
         if (a.match(/[^\x00-\xff]/ig) != null) len += 2; 
         else  len += 1;
    }
    return len;
}

function byteSubstr(str,start,len) { //取一个字符串的子串，一个汉字算2个字节
    var n = 0;
    var result='';
    for (var i = start; i<str.length && n<len; i++) {
    	var a = str.charAt(i);
         if (a.match(/[^\x00-\xff]/ig)!= null) n+=2;  //汉字
         else n++;
         result+=a;
    }
    return result;
}
//vvvvvvvvalidation
function myInputFieldValidation(fields){
	//处理required非空列、email、url数据格式验证,包括filefield
	result={};
	errormsg=[];
	errorid='';
	for (i=0; i<fields.length; i++){
		var style=';'+fields[i].style+';';
		var label=(fields[i].label).replaceAll(':','').replaceAll('：','');
		if (style.indexOf(';required;')>=0){
			if (myGetValue(fields[i].id)==''){
				errormsg.push(label+"不能为空！");
				if (errorid=='') errorid=fields[i].id;
			}
		}
		if (style.indexOf(';email;')>=0){
			//console.log(i,fields[i]);
			if (!$('#'+fields[i].id).textbox('isValid')){
				errormsg.push('电子邮箱格式错误！');
				if (errorid=='') errorid=fields[i].id;
			}
		}	
		if (style.indexOf(';url;')>=0){
			if (!$('#'+fields[i].id).textbox('isValid')){
				errormsg.push('网址格式错误！');
				if (errorid=='') errorid=fields[i].id;
			}
		}
		//filefield数据验证
		if (fields[i].nodetype=='filefield'){
			if ($('#'+fields[i].id).val()){  //myGetValue(fields[i].id)!=''){
				errormsg.push("请上传文件后再保存数据！");
				if (errorid=='') errorid=fields[i].id;
			}
		}		
	}
	result.error=errormsg;  //返回一行，检查error的值
	result.fieldid=errorid;
	return result;
}

//xxxxxxxxxxxxxml1
function myXmlReader(xmlfile){
	//sysfields="textfield;keyfield;datefield;numberfield;editorfield;combofield;dbcombofield;checkfield;checkboxfield;spinnerfield;searchfield;timefield;filefield;hiddenfield";
	pservice={};
	pservice.xmldata=[];
	t1=myLocalTime().timeid;
	//控件名称标识
	$.ajax({     
		type: "Post",     
		url: "system/easyui_xmlreader.jsp",  
		data:{xmlfile:xmlfile},
		async: false, method: 'post', 
		error: function(err) {     
			console.log(err);
		},
		success: function(data) {    
			pservice.xmldata=eval(data);
			//eval("pservice.xmldata=data");  //原始返回数据
		}
	});
	//console.log(myLocalTime().timeid-t1);
	return pservice;
}

//xxxxxxxxxxxxxxml2
function myXmlNodeValue(node){
	//处理xml文件每个节点
	nodetype=node.nodetype;
	var top=0, left=0, width=0, height=0, labelwidth=-1; 
	var id='', name='', value=''; 
	var dec=0, max='', min='', increment=1;
	var pformid='', ptabid='', pfieldsetid='';
	//var rowheight=34, labelwidth=-1;
	if (node.labelwidth!=undefined && !isNaN(node.labelwidth)) labelwidth=node.labelwidth; 
	else labelwidth=pservice.labelwidth;
	if (nodetype=='tab' || nodetype=='form' || nodetype=='fieldset'){
		if (node.rowheight!=undefined && !isNaN(node.rowheight)){
			pservice.rowheight=1*node.rowheight;
			rowheight=pservice.rowheight;
		}	
		if (node.labelwidth!=undefined && !isNaN(node.labelwidth)){
			pservice.labelwidth=1*node.labelwidth;
		}
	}
	if (node.id==undefined && node.name!=undefined) node.id=node.name; //???
	//处理可能存在的控件起始坐标位置pos
	if (node.pos!=undefined && node.pos!=''){
		//console.log(node.id, node.pos);
		tmp=node.pos.split(',');
		if (tmp.length>0 && tmp[0]!=''){
			 if (isNaN(tmp[0])) tmp[0]=eval(tmp[0]);
			 top=tmp[0];
		}
		if (tmp.length>1 && tmp[1]!=''){
			 if (isNaN(tmp[1])) tmp[1]=eval(tmp[1]);
			 left=tmp[1];
		}
		if (tmp.length>2 && tmp[2]!=''){
			 if (isNaN(tmp[2])) tmp[2]=eval(tmp[2]);
			 labelwidth=tmp[2];
		}
	}
	//处理可能存在的控件宽度高度小数位数
	if (node.size!=undefined && node.size!=''){
		tmp=node.size.split(',');
		if (tmp.length>0 && tmp[0]!=''){
			 if (isNaN(tmp[0])) tmp[0]=eval(tmp[0]);
			 height=tmp[0];
		}
		if (tmp.length>1 && tmp[1]!=''){
			 if (isNaN(tmp[1])) tmp[1]=eval(tmp[1]);
			 width=tmp[1];
		}
		if (tmp.length>2 && tmp[2]!=''){
			 if (isNaN(tmp[2])) tmp[2]=eval(tmp[2]);
			 dec=tmp[2];  //小数位数
		}
	}
	//处理可能存在的控件最大值最小值和步长
	if (node.range!=undefined && node.range!=''){
		tmp=node.range.split(',');
		if (tmp.length>0 && tmp[0]!=''){
			 if (isNaN(tmp[0])) tmp[0]=eval(tmp[0]);
			 min=tmp[0];
		}
		if (tmp.length>1 && tmp[1]!=''){
			 if (isNaN(tmp[1])) tmp[1]=eval(tmp[1]);
			 max=tmp[1];
		}
		if (tmp.length>2 && tmp[2]!=''){
			 if (isNaN(tmp[2])) tmp[2]=eval(tmp[2]);
			 increment=tmp[2];
		}
	}
	if (isNaN(top) && top!='') top=eval(top);
	if (top==undefined || top=='') top=0;
	if (isNaN(height) && height!='') height=eval(height);
	if (height==undefined || height=='') height=0;
	if (isNaN(left) || left=='') top=0;
	if (isNaN(width) || width=='') width=0;
	if (isNaN(labelwidth)|| labelwidth=='') labelwidth=0;
	if (isNaN(min) && min!='') min='';
	if (isNaN(max) && max!='') max='';
	if (isNaN(increment) || increment=='') increment=1;
	//记录本次各个类型的节点值
	//node.parent=parent;
	node.top=1*top;
	node.left=1*left;
	node.height=1*height;
	node.width=1*width;
	node.labelwidth=1*labelwidth;
	node.dec=1*dec;
	node.max=max;
	node.min=min;
	node.increment=increment;
	if (node.top==undefined) node.top=-1;
	if (node.left==undefined) node.left=-1;
	if (node.height==undefined) node.height=0;
	if (node.width==undefined) node.width=0;
	if (node.labelwidth==undefined) node.labelwidth=0;
	if (node.value==undefined) node.value='';
	if (node.style==undefined) node.style='';
	if (node.label==undefined) node.label='';
	if (node.parent==undefined) node.parent='';
	if (node.nodeindex==undefined) node.nodeindex=-1;
	if (node.max==undefined) node.max='';
	if (node.min==undefined) node.min='';
	if (node.dec==undefined) node.dec=0;
	if (node.increment==undefined) node.increment=1;
	if (node.textfield==undefined) node.textfield=''; 
	if (node.masterfield==undefined) node.masterfield='';
	if (node.filtersql==undefined) node.filtersql='';
	if (node.field==undefined) node.field=node.id;  //???是否需要加载这里，还是加载hidden函数定义中
	if (node.style!='') node.style=node.style.toLowerCase();
	if (node.textfield!='') node.textfield=node.textfield.toLowerCase();
	if (node.field!=undefined) node.field=node.field.toLowerCase();
	if (node.masterfield!='') node.masterfield=node.masterfield.toLowerCase();
	node.label=(node.label).trim().replaceAll(' ','&nbsp;');
	return node;
}

//xxxxxxxxxxxxxml3
function mySetXmlNodes(pservice){
	t1=myLocalTime().timeid;
	//设置每个节点的id、父节点id、父节点node、子节点id（分好分隔）
	pservice.defaultid={};
	pservice.defaultid.grid='myGrid';
	pservice.defaultid.tree='myTree';
	pservice.defaultid.form='myForm';
	pservice.defaultid.tab='myTab';
	pservice.defaultid.fieldset='myFieldset';
	pservice.nodeidset={};   //节点名称集合pservice.nodeidset.rf1是否存在，不存在就使用这个名称作为id
	pservice.editforms=[];
	pservice.queryforms=[];
	//pservice.form=[];
	pservice.tree=[];
	pservice.grid=[];
	var n=0;
	for (var i=0; i<pservice.xmldata.length; i++){
		var node=pservice.xmldata[i];
		//node=myXmlNodeValue(node);
		var nodetype=node.nodetype.toLowerCase();
		var varnodeid='pservice.'+nodetype+'_id'; //记录本类别节点，为下次父节点服务
		var varnodeindex='pservice.'+nodetype+'_index'; //记录本类别节点的序号i
		var varpnodeid='pservice.'+node.parentnodetype+'_id';  //上次记录的当前类别父节点的id
		var varpnodeindex='pservice.'+node.parentnodetype+'_index';  //上次记录的当前类别父节点的序号i
		if (node.id==undefined || node.id==''){
			//设置node的id，如果原来为空的话
			vp='pservice.defaultid'+'.'+nodetype;
			if (eval(vp)==undefined) eval(vp+'=nodetype');  //e.g pservice.defaultid.combofield='combofield'
			var k=1;
			while (true){
				node.id=eval(vp)+k;
				v='pservice.nodeidset.'+node.id;
				//利用变量是否存在，判断id值有没有被用过。
				if (eval(v)==undefined){  
					eval(v+'=i');
					break; 	//if ($('#'+node.id).length==0) break;
				}else{
					k++;
				}
			}
		}
		//console.log(i,node.id,nodetype);
		if (nodetype=='service'){ //记录这个页面的标题
			pservice.master=node;  //记录根节点
		}else if (nodetype=='title'){ //记录这个页面的标题
			pservice.pagetitle=node.nodetext;  //pservice.title已被使用
		}else if (nodetype=='form'){
			if (node.target=='edit') pservice.editforms.push(node);
			else pservice.queryforms.push(node);
			//pservice.form.push(node);
		}else if (nodetype=='tab'){ //未处理
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
			if (node.tabid==undefined){
				node.tabid=node.parent+'Tab'  //myForm1Tab.e.g
			}
			//父节点新增一个属性，记录其子节点tabs的id集合
			node.parentnodeindex=eval(varpnodeindex);
			pnode=pservice.xmldata[node.parentnodeindex];
			if (pnode.tabs==undefined || pnode.tabs=='') pnode.tabs=node.tabid;
			//else pnode.tabs+=';'+node.tabid;
			pservice.xmldata[node.parentnodeindex]=pnode;			
		}else if (nodetype=='fieldset'){
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);		
			//父节点新增一个属性，记录其子节点fieldset的id集合
			node.parentnodeindex=eval(varpnodeindex);
			pnode=pservice.xmldata[node.parentnodeindex];
			if (pnode.fieldset==undefined) pnode.fieldset=node.id;
			else pnode.fieldset+=';'+node.id;
			pservice.xmldata[node.parentnodeindex]=pnode;
		}else if (nodetype=='grid' || nodetype=='tree'){
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
			eval('pservice.'+nodetype+'.push(node)');
		}else if (nodetype=='button' || nodetype=='line' || nodetype=='link' ){
			//与数据库列无关的控件
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);		
		}else if (nodetype=='hiddenfield'){  //表单控件
			node.parent='body';
		}else if (nodetype.substr(nodetype.length-5,5)=='field'){  //表单控件
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
		}  //if *field
		//记录父节点的子节点，把子节点记录到父节点的xchildren属性上去。
		eval(varnodeid+"='"+node.id+"'");
		eval(varnodeindex+"="+i);  //序号
		pservice.xmldata[i]=node;
	} //for i=0...next node
	console.log('set',myLocalTime().timeid-t1);
	return pservice;
}

//xxxxxxxxxxxxxml4
function myGenFormFromXmlNodes(pservice){
	pservice.defaultid={};
	pservice.defaultid.grid='myGrid';
	pservice.defaultid.tree='myTree';
	pservice.defaultid.form='myForm';
	pservice.defaultid.tab='myTab';
	pservice.defaultid.fieldset='myFieldset';
	pservice.nodeidset={};   //节点名称集合pservice.nodeidset.rf1是否存在，不存在就使用这个名称作为id
	pservice.filefieldset='';  //存储所有上传文件的控件
	pservice.labelwidth=-1;
	pservice.rowheight=34;
	pservice.filepath='';
	pservice.filetag='';
	pservice.focusfields=[];
	pservice.master={};
	pservice.keydownfields='';
	//pservice.wineditpanel='';
	//pservice.winquerypanel='';
	pservice.editablefieldset=[];
	pservice.eventset=[];
	pservice.editforms=[];
	pservice.queryforms=[];
	pservice.tree=[];
	pservice.grid=[];
	pservice.attachment={}; //附件显示位置
	pservice.attachment.layout!='mainlayout';
	pservice.attachment.id='attachment';
	pservice.attachment.height=180;
	pservice.attachment.tabpanel='myQueryTab';
	pservice.attachment.title='';
	pservice.attachment.position='south';
	rowheight=pservice.rowheight;
	var n=0;
	for (var i=0; i<pservice.xmldata.length; i++){
		node=pservice.xmldata[i];
		//node=myXmlNodeValue(node);
		nodetype=node.nodetype.toLowerCase();
		varcount='pservice.'+nodetype+'_count';
		varnodeid='pservice.'+nodetype+'_id'; //记录本类别节点，为下次父节点服务
		varpnodeid='pservice.'+node.parentnodetype+'_id';  //上次记录的当前类别父节点的id
		if (node.id==undefined || node.id==''){
			//设置node的id，按变量是否存在来判断node.id是否可以用
			vp='pservice.defaultid'+'.'+nodetype;
			if (eval(vp)==undefined) eval(vp+'=nodetype');  //e.g pservice.defaultid.combofield='combofield'
			var k=1;
			while (true){
				node.id=eval(vp)+k;
				v='pservice.nodeidset.'+node.id;
				if (eval(v)==undefined){
					eval(v+'=i');  //pservice.nodeidset.labelfield1=4表明这个对象变量已经存在，以后不能再使用
					break; 	//if ($('#'+node.id).length==0) break;
				}else{
					k++;
				}
			}
		}
		if (nodetype!='service'){ 
			//每个类型的控件设立一个数组去存放，例如pservice.textfield[1]...[n];
			varp="pservice."+nodetype;
			if (eval(varp)==undefined) eval(varp+"=[];");
			n=eval(varp+".length");
			varp="pservice."+nodetype+"["+n+"]";
			if (eval(varp)==undefined) eval(varp+"=node;");
		}
		if (eval(varcount)==undefined) eval(varcount+'=1;'); //控件id自动命名用
		if (nodetype=='service'){ //记录这个页面的标题
			pservice.master=node;  //记录根节点
		}else if (nodetype=='title'){ //记录这个页面的标题
			pservice.pagetitle=node.nodetext;  //pservice.title已被使用
		}else if (nodetype=='form'){
			if ($('#'+node.id).length==0){
				if (node.modal=='window') myWindow(node);				
				else myForm(node);
			} 
			if (node.height>0) $('#'+node.id).panel({height: node.height});
			$('#'+node.id).css({overflow:'auto'});
			$('#'+node.id).attr('xtarget', node.target);  //表单的用途：编辑、查询或其他
			if (node.target=='edit') pservice.editforms.push(node);
			else pservice.queryforms.push(node);
		}else if (nodetype=='tab'){ //未处理
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
			if (node.tabid==undefined){
				node.tabid=node.parent+'Tab'  //myForm1Tab.e.g
			}
			if ($('#'+node.tabid).length==0){ //tabs如果原来不存在的话
				myTab(node);
			}else if ($('#'+node.id).length==0){  //这名称id的选项卡不存在时才创建
				//tabs已存在的话，添加一个sheet
				$('#'+node.tabid).tabs('add',{
					title: (node.title!=undefined)?node.title:'',
					id: node.id, fit: true, closable: false, selected: false
				});
			}
			//记录父节点有没有tab出现过，只记录第一个tab
			if ($('#'+node.parent).attr('xtab')==undefined) $('#'+node.parent).attr('xtab',node.tabid);
			//else $('#'+node.parent).attr('xtab',$('#'+node.parent).attr('xtab')+';'+node.tabid);
			$('#'+node.tabid).tabs({fit:true});
			$('#'+node.tabid).tabs('select', 0);
			$('#'+node.id).css({overflow:'auto', position:'relative'});  //relative必须加
			$('#'+node.tabid).css({overflow:'hidden'});
			//console.log('p', node.id,node.parent,node.title);		
		}else if (nodetype=='fieldset'){
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
			myFieldset(node);
			if ($('#'+node.parent).attr('xfieldset')==undefined) $('#'+node.parent).attr('xfieldset',node.id);
			else $('#'+node.parent).attr('xfieldset',$('#'+node.parent).attr('xfieldset')+';'+node.id);
			//console.log('p', node.id,node.parent);	
		}else if (nodetype=='attachment'){
			if (node.filepath!=undefined) pservice.attachment.filepath=node.filepath; 
			if (node.filetag!=undefined) pservice.attachment.filetag=node.filetag; 
			if (node.tagfield!=undefined) pservice.attachment.tagfield="attachmentfiletype";
			if (node.tabpanel!=undefined && node.tabpanel!='') pservice.attachment.tabpanel=node.tabpanel;
			if (node.height!=undefined && node.height>0) pservice.attachment.height=node.height;
			if (node.id!=undefined) pservice.attachment.panel=node.id;  //改属性
			if (node.parent!=undefined) pservice.attachment.layout=node.parent; //改属性
		}else if (nodetype=='table'){
			pservice.table[n].keyfieldid='';
			pservice.table[n].nodeindex=node.nodeindex;  //xml节点序号
			pservice.table[n].title=node.title;  //数据库中文含义
			pservice.table[n].keyfield=node.keyfield;  //表的主键
			pservice.table[n].keyspec=node.keyspec;  //主键的中文含义
			pservice.table[n].encryptfields=node.encryptfields;  //加密隐藏列，不编辑这些数据
			pservice.table[n].hiddenfields=node.hiddenfields;  //不需要虚拟化加密的隐藏列
			pservice.table[n].formfields=node.keyfield;  //表中所有在表单中出现过的列的集合*field
			pservice.table[n].fields=eval(node.fields);  //所有字段的集合，为虚拟名称的一个数组
			if (node.keydownfields!=undefined) pservice.table[n].keydownfields=node.keydownfields;  //键盘操作列,需要转换为idpservice.table[n].keydownfields
			else pservice.table[n].keydownfields='';
			if (node.attachmenttagfield!=undefined) pservice.table[n].attachmenttagfield=node.attachmenttagfield; 
			else pservice.table[n].attachmenttagfield='attachmentfiletype';
		}else if (nodetype=='sql' || nodetype=='js' || nodetype=='action'){
			//记录事件
			pservice.eventset.push(node);
			varp="pservice."+nodetype;
		}else if (nodetype=='tree' || nodetype=='grid'){
			varp="pservice."+nodetype;
		}else if (nodetype=='button' || nodetype=='line' || nodetype=='link' ){
			//与数据库列无关的控件
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);		
			if (nodetype=='button') myButton(node);
			else if (nodetype=='line') myLine(node);
			else if (nodetype=='link') myLink(node);
		}else if (nodetype.substr(nodetype.length-5,5)=='field'){  //表单控件
			if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
			for (k=0; k<pservice.table.length; k++){
				//console.log('pk='+pservice.table[k].keyfield,node.id,node.field);
				if (node.field==pservice.table[k].keyfield){ //找到主键对应的表单控件id
					pservice.table[k].keyfieldid=node.id;
					break;
				}
			}
			//把所有的列都加到最后一个table的formfields中去，必要时用pservice.formfields替代
			pservice.table[pservice.table.length-1].formfields+=';'+node.id;
			if (nodetype=='textfield'){
				myTextField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='datefield'){
				myDateField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='numberfield'){
				myNumberField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='spinnerfield'){
				mySpinnerField(node);
			}else if (nodetype=='editorfield'){
				myEditorField(node);
			}else if (nodetype=='imagefield'){
				myImageField(node);
			}else if (nodetype=='combofield'){
				myComboField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='dbcombofield'){
				myDBComboField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='checkboxfield'){
				myCheckBoxField(node);
			}else if (nodetype=='timefield'){
				myTimeField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='searchfield'){
				mySearchField(node);
				pservice.table[pservice.table.length-1].keydownfields+=';'+node.id;
			}else if (nodetype=='hiddenfield'){  //隐藏列处理
				//console.log(1,node.id,node.field);
				if (node.id!=undefined && node.field==undefined) node.field=node.id;
				else if (node.field!=undefined && node.id==undefined) node.id=node.field;
				//console.log(2,node.id,node.field);
				myHiddenField(node);				
			}else if (nodetype=='labelfield'){
				myLabelField(node);
			}else if (nodetype=='filefield'){
				myFileField(node);
				if (pservice.filefieldset!='') pservice.filefieldset+=';';
				pservice.filefieldset+=node.id;
			}
			//console.log('x', node);		
			if (nodetype!='labelfield' && nodetype!='label' ){  //可编辑控件，记录其字段名所对应的控件id
				pservice.editablefieldset.push(node); //表单中可编辑的列
				if ((';'+node.style+';').indexOf(';focus;')>=0) pservice.focusfields.push(node.id); //表单中聚焦的列
				//通过对象变量形式，记录每个可编辑列对于的控件id。例如pmyTable.fieldmap.field3='textfield2'
				/*
				str="fieldmap."+node.field;
				if (eval(str)==undefined){
					eval(str+"='"+node.id+"';");  //虚拟列对应控件id，写法不太规范，但判断速度快
				}
				*/
				//在pmyTable.fields表的字段集合中找到这个列，把这个列的id设置为控件的id，在数据保存时要用到这个id
				for (var k=0; k<pservice.table[pservice.table.length-1].fields.length; k++){
					if (pservice.table[pservice.table.length-1].fields[k]['field']==node.field){
						//第一次找到才赋值
						if (pservice.table[pservice.table.length-1].fields[k]['id']==undefined){
							pservice.table[pservice.table.length-1].fields[k]['id']=node.id;
							//console.log(node.field,node.id,pservice.table[pservice.table.length-1].fields[k]['id']);
						}
						break;
					} 
				}
			}//if 可编辑控件
		}  //if *field
		//记录父节点的子节点，把子节点记录到父节点的xchildren属性上去。
		if (nodetype.substr(nodetype.length-5,5)=='field' || nodetype=='fieldset' || nodetype=='tab'){
			$('#'+node.id).attr('xfield',node.field);  //自定义属性，对应的列名
			if ($('#'+node.parent).length>0){
				if ($('#'+node.parent).attr('xchildren')==undefined) $('#'+node.parent).attr('xchildren',node.id);
				else $('#'+node.parent).attr('xchildren', $('#'+node.parent).attr('xchildren')+';'+node.id);
			}
		}
		eval(varnodeid+"='"+node.id+"'");
		//if (node.parent==undefined || node.parent=='') node.parent=eval(varpnodeid);
		pservice.xmldata[i]=node;
		//console.log('y', node);		
	} //for i=0...next node
	//console.log('event', pservice.eventset);
	if (pservice.filterbar!=undefined && pservice.filterbar.length>0){
		if (pservice.filterbar[0].label==undefined) pservice.filterbar[0].label='快速过滤:'; 
		if (pservice.filterbar[0].width<=0) pservice.filterbar[0].width=500; 
		//if (pservice.filterbar[0].labelwidth<=0 && pservice.filterbar[0].label!='') pservice.filterbar[0].labelwidth=65; 
	}	
	//处理每个table中的隐藏列和键盘控制列
	pservice.formfields='s_app';	
	for (var k=0; k<pservice.table.length; k++){
		//console.log(1,pservice.table[pservice.table.length-1]);
		if (pservice.table[k].attachmenttagfield==undefined && pservice.attachmenttagfield!='') pservice.table[k].attachmenttagfield=pservice.attachment.tagfield; 
		if (pservice.table[k].formfields!='') pservice.formfields+=';'+pservice.table[k].formfields;
		if (pservice.table[k].encryptfields!=undefined && pservice.table[k].encryptfields!='') pservice.formfields+=';'+pservice.table[k].encryptfields;
		if (pservice.table[k].hiddenfields!=undefined && pservice.table[k].hiddenfields!='') pservice.formfields+=';'+pservice.table[k].hiddenfields;
		if (pservice.table[pservice.table.length-1].keyfieldid==''){
			//如果主键在表单控件中没有出现过，则把主键加到formfields中，当做隐藏列处理，避免主键没有在表单中作为控件出现
			//myHiddenField(pmyTable.keyfield);  //主键列对于的id设为主键字段的名称
			pservice.table[pservice.table.length-1].formfields+=';'+pservice.table[pservice.table.length-1].keyfield;
			pservice.table[pservice.table.length-1].keyfieldid=pservice.table[pservice.table.length-1].keyfield;
		}
		if (pservice.table[k].keydownfields!=undefined && pservice.table[k].keydownfields!=''){
			if (pservice.keydownfields!='') pservice.keydownfields+=';'; 
			pservice.keydownfields+=pservice.table[k].keydownfields;
		}
	}
	if (pservice.editorfield!=null && pservice.editorfield.length>0){
		//添加editorfield的隐藏列
		var p={}; p.parent='main'; p.id='xdescription'; p.style='hide';
		myEditorField(p);	//myEditorField(['xdescription','main','',-1,-1,8,10,10,'','hide;readonly;autoheight']);
	}
	//在pmyTable.fields表的字段集合中找到这些隐藏列，把这个列的id设置为控件的id
	pservice.hiddenfieldset='';	
	var tmp=pservice.formfields.split(';');
	for (j=0; j<tmp.length; j++){
		if ($('#'+tmp[j]).length==0){
			//控件不存在的情况下，定义为隐藏控件，并且将其字段集合中的id值设置成与控件id值相同
			pservice.hiddenfieldset+=';'+tmp[j];
			for (var k=0; k<pservice.table[pservice.table.length-1].fields.length; k++){
				if (pservice.table[pservice.table.length-1].fields[k]['field']==tmp[j]){
					if (pservice.table[pservice.table.length-1].fields[k]['id']==undefined){
						pservice.table[pservice.table.length-1].fields[k]['id']=tmp[j];
					}
					break;
				} 
			}
		}
	}
	//定义隐藏列，作为变量用。已存在控件会不再定义而自动跳过。每个隐藏列其控件id值与field值相同
	myHiddenFields(pservice.hiddenfieldset); //pservice.formfields);  
	//console.log('hhiden',pservice.hiddenfieldset);
	//xml文件处理结束
	//
	return pservice;
}

function myGetFieldID(id){
	result='';
	if ($('#'+id).length>0){
		if ($('#'+id).attr('xfield')!=undefined) result=$('#'+id).attr('xfield');
	}
	return result;
}


function mySetXmlParams(str){
	//输入一个带js控件变量的字符串，找出其中参数
	var result='', s='';
	while (true){
		x1=str.indexOf('{');
		x2=str.indexOf('}', x1);
		if (x1>=0 && x2>1){
			tmp=str.substring(x1+1,x2).trim();  //找出参数
			if (tmp!='') value=myGetValue(tmp);  //参数替换成页面的控件中的值
			else value='';
			str=str.substring(0,x1)+value+str.substring(x2+1);
			if (s!='') s+=';';
			s+=tmp;
		}else{
			break;
		}	
	}
	result={'text':str, 'params':s};
	return result;
}

function myReplaceXmlParams(str){
	//输入一个带js控件变量的字符串，找出其中参数
	var result='', s='', stmt='', tmp='';
	var n=1;
	while (true){
		x1=str.indexOf('{');
		x2=str.indexOf('}', x1);
		if (x1>=0 && x2>1){
			tmp=str.substring(x1+1,x2).trim();  //找出参数
			//使用自定义变量替换传递过来的变量，咋地你变量名称不带sys.之类的，调用函数地方也自动改为这个变量
			tmp1='_sysparam'+n;  
			str=str.substring(0,x1)+tmp1+str.substring(x2+1);
			if (eval(tmp)!=undefined){
				var type=typeof(eval(tmp));
				if (type=='object'){//对象变量
					//console.log(tmp,$('#'+tmp).length, myGetValue(tmp));
					if ($('#'+tmp).length>0) stmt+="var "+tmp1+"='"+myGetValue(tmp)+"';\n"; //控件id
					else stmt+="var "+tmp1+"="+tmp+";\n";  //对象s={}之类或数组,不加var
				}else{
					stmt+="var "+tmp1+"='"+eval(tmp)+"';\n";  //一般非对象变量，以字符型为例
				}
			}else{
				//stmt+=stmt+="var "+tmp1+"='"+eval(tmp)+"';\n";  //一般非对象变量，一字符型为例
				stmt+=stmt+="var "+tmp1+"=undefined;\n";
			}
			n++;
			if (s!='') s+=';';
			s+=tmp1;
		}else{
			break;
		}	
	}
	result={'text':str, 'params':s, 'stmt':stmt};
	return result;
}

function myOnSelectAttachmentQueryTab(tabid, index, pmyAttachment){
	//在tab上显示附件,设置图片预览工具栏的显示状态	
	var tab=$('#'+tabid).tabs('getTab',index);
	var parent=$('#'+tabid).attr('xparent');
	var n=1*$('#'+tabid).attr('xfixedtabcount');
	if (index<n){ //非附件阅读的选项卡编辑资源信息
		myDownLoadAttachment(pmyAttachment);
		//$('#winquerypanel').css({overflow:'auto'});
		//height=$('#'+parent).attr('xheight')*1;
		//if (height>0) tab.panel({height: height}); //只有基本信息页是规定高度的，其他页满页显示
		$('#'+tabid).css({overflow:'hidden', position:'relative'});
		$('#'+parent).css({overflow:'hidden', position:'relative'});
		if ($('#myimagebar').length>0){ //不显示图片工具栏
			document.getElementById("myimagebar").style.display="none";  //不显示工具条，只有图片时才显示
		}
	}else{  //新增的附件选项卡
		if ($('#myimagebar').length>0){
			if (tab.attr('xchildtype')=='image') document.getElementById("myimagebar").style.display="";  //显示工具条，只有图片时才显示
			else document.getElementById("myimagebar").style.display="none";  //不显示工具条，只有图片时才显示
		}
		$('#'+tabid).css({overflow:'hidden'});
		$('#'+tabid).css({overflow:'hidden', position:'relative'});
		//第2个及之后的选项卡显示pdf预览文件，这时先隐藏附件栏
		myRemoveLayoutPanel(pmyAttachment.layout, pmyAttachment.position);
		//$('#mainpanel').layout('resize');
	}
}

function myGetJsonData(source){
	var obj={};
	$.each(source, function(id, value) {  //取json中每个列及其值
		var type=typeof(value);
		if (type!='object'){
			if (type=='string' && value!=''){
		    	value=value.replace(/\"/g,"\"");  //双引号处理
				value=value.replaceAll("	"," "); //删除tab键
		    	//value=value.replace(/\\/g,"\\\\");  //斜杠处理
			}
			eval('obj.'+id+'=value');  //变量赋值
		}
	});
	return obj;
}


/**
 * linkbutton方法扩展，在disable方法下禁止点击
 * @param {Object} jq
 */
$.extend($.fn.linkbutton.methods, {
    /**
     * 激活选项（覆盖重写）
     * @param {Object} jq
     */
    enable: function(jq){
        return jq.each(function(){
            var state = $.data(this, 'linkbutton');
            if ($(this).hasClass('l-btn-disabled')) {
                var itemData = state._eventsStore;
                //恢复超链接
                if (itemData.href) {
                    $(this).attr("href", itemData.href);
                }
                //回复点击事件
                if (itemData.onclicks) {
                    for (var j = 0; j < itemData.onclicks.length; j++) {
                        $(this).bind('click', itemData.onclicks[j]);
                    }
                }
                //设置target为null，清空存储的事件处理程序
                itemData.target = null;
                itemData.onclicks = [];
                $(this).removeClass('l-btn-disabled');
            }
        });
    },
    /**
     * 禁用选项（覆盖重写）
     * @param {Object} jq
     */
    disable: function(jq){
        return jq.each(function(){
            var state = $.data(this, 'linkbutton');
            if (!state._eventsStore)
                state._eventsStore = {};
            if (!$(this).hasClass('l-btn-disabled')) {
                var eventsStore = {};
                eventsStore.target = this;
                eventsStore.onclicks = [];
                //处理超链接
                var strHref = $(this).attr("href");
                if (strHref) {
                    eventsStore.href = strHref;
                    $(this).attr("href", "javascript:void(0)");
                }
                //处理直接耦合绑定到onclick属性上的事件
                var onclickStr = $(this).attr("onclick");
                if (onclickStr && onclickStr != "") {
                    eventsStore.onclicks[eventsStore.onclicks.length] = new Function(onclickStr);
                    $(this).attr("onclick", "");
                }
                //处理使用jquery绑定的事件
                var eventDatas = $(this).data("events") || $._data(this, 'events');
                if (eventDatas["click"]) {
                    var eventData = eventDatas["click"];
                    for (var i = 0; i < eventData.length; i++) {
                        if (eventData[i].namespace != "menu") {
                            eventsStore.onclicks[eventsStore.onclicks.length] = eventData[i]["handler"];
                            $(this).unbind('click', eventData[i]["handler"]);
                            i--;
                        }
                    }
                }
                state._eventsStore = eventsStore;
                $(this).addClass('l-btn-disabled');
            }
        });
    }
});

$.fn.treegrid.defaults.loadFilter = function(data, parentId){
	var opts = $.data(this, 'treegrid').options;
	if (!opts.columns){
		var dgOpts = $.data(this, 'datagrid').options;
		opts.columns = dgOpts.columns;
		opts.frozenColumns = dgOpts.columns;
	}
	return data;
};

//只求下一层的子节点，默认是所有层次的子节点，即包括子节点的子节点
$.extend($.fn.tree.methods,{
	getLeafChildren:function(jq, params){
		var nodes = [];
		$(params).next().children().children("div.tree-node").each(function(){
			nodes.push($(jq[0]).tree('getNode',this));
		});
		return nodes;
	},
	removeAll:function(jq){
	return jq.each(function(){
		var roots = $(this).tree('getRoots');
		for(var i=roots.length-1; i>=0; i--){
			$(this).tree('remove', roots[i].target);
		}
	})
}
});

$.extend($.fn.textbox.methods, {
	setBorder: function(jq, border){
		var style = $('#easyui-textbox-border');
		if (!style.length){
			$('head').append(
				'<style id="easyui-textbox-border">' +
				'.textbox-noborder{border-color:transparent;border-radius:0}' +
				'</style>'
			);
		}
		return jq.each(function(){
			var span = $(this).next();
			if (border) {
				span.removeClass('textbox-noborder');
			} else {
				span.addClass('textbox-noborder');
			}
		});
	}
});

$.fn.getCursorPosition = function() {
    var input = this.get(0);
    if (!input) return; // No (input) element found
    if ('selectionStart' in input) {
        // Standard-compliant browsers
        return input.selectionStart;
    } else if (document.selection) {
        // IE
        input.focus();
        var sel = document.selection.createRange();
        var selLen = document.selection.createRange().text.length;
        sel.moveStart('character', -input.value.length);
        return sel.text.length - selLen;
    }
}

